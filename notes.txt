Use environment variables for storing sensitive information, and to avoid hardcoding things like URLs

Refactor schema to use ES6 class

Very good tutorial, very clear:

DB wrapper: https://jasonwatmore.com/post/2018/06/14/nodejs-mongodb-simple-api-for-authentication-registration-and-user-management#db-js

Boilerplate includes:
  <link rel="apple-touch-icon" href="icon.png">
  <link rel="manifest" href="site.webmanifest">
Why?

express-session options, {resave: true} - why?
https://github.com/expressjs/session#resave

When storing data in the database, a game consists of:
a) Who's in the game, ie. players
b) Date/time/turn information.
c) Which territories are currently owned by whom.
d) The units that are currently on the board.
e) The moves people have entered.
f) History (previous game states inc. previous moves)

Q1. Which of these should have their own tables in the database, and which should be stored within a game state object? How do you make this decision?
Q2. Should I just have a table called "moves" that stores every move for every game, and then pull them up by gameID or would that be poor practice? Slow? (relatively)
Q3. This approach would also mean that data was repeated. Should instead the game consist of something more along the lines of:

  {
    gameInfo: {turnNumber, turnLength etc.}
    players: {
      0: {
        playerId,
        empire,
        ownedTerritories,
        units,
        moves,
      },
      1: {...}
      ...
    }
  }

But even then, should I include the player's name in the object, or just reference it through the id?

Q4. Basically, how should databases (specifically mongodb) work?

Models talking to each other? Directly or through services?


ISOLATE API TO /api ROUTES

UNIFY 'Id' vs 'ID'

REFACTOR mongoose models to use ES6 classes

Implement choosing empires ? 

NEXT:
  refactor api to use /api
  add api routes to create a new game
  add buttons on front end to call api routes to set up a new game
  add front end capability to load a specific game by id