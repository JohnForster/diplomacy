!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=165)}([function(e,n,t){e.exports=t(54)},function(e,n,t){"use strict";var r=t(29),o=t(55),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function u(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var t=0,r=e.length;t<r;t++)n.call(null,e[t],t,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var n={};function t(t,r){"object"==typeof n[r]&&"object"==typeof t?n[r]=e(n[r],t):n[r]=t}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],t);return n},extend:function(e,n,t){return u(n,function(n,o){e[o]=t&&"function"==typeof n?r(n,t):n}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,n,t){var r=t(35),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var r=t(111),o=t(114);e.exports=function(e,n){var t=o(e,n);return r(t)?t:void 0}},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var r=t(20),o=t(77),i=t(78),a="[object Null]",s="[object Undefined]",c=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?s:a:c&&c in Object(e)?o(e):i(e)}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[t].concat(i).concat([o]).join("\n")}var a,s,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2],"{").concat(t,"}"):t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var s=e[a];null!=s[0]&&r[s[0]]||(t&&!s[2]?s[2]=t:t&&(s[2]="(".concat(s[2],") and (").concat(t,")")),n.push(s))}},n}},function(e,n,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var r=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}}(),c=null,u=0,l=[],f=t(98);function p(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,n){for(var t=[],r={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),l.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,t);t.insertBefore(n,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function m(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return t.nc}();r&&(e.attrs.nonce=r)}return _(n,e.attrs),h(e,n),n}function _(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function v(e,n){var t,r,o,i;if(n.transform&&e.css){if(!(i="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=i}if(n.singleton){var a=u++;t=c||(c=m(n)),r=x.bind(null,t,a,!1),o=x.bind(null,t,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",_(n,e.attrs),h(e,n),n}(n),r=function(e,n,t){var r=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,n),o=function(){y(t),t.href&&URL.revokeObjectURL(t.href)}):(t=m(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){y(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=d(e,n);return p(t,n),function(e){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}e&&p(d(e,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var g,b=(g=[],function(e,n){return g[e]=n,g.filter(Boolean).join("\n")});function x(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}},function(e,n,t){var r=t(40),o=t(94),i=t(19);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var r=t(101),o=t(102),i=t(103),a=t(104),s=t(105);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,e.exports=c},function(e,n,t){var r=t(18);e.exports=function(e,n){for(var t=e.length;t--;)if(r(e[t][0],n))return t;return-1}},function(e,n,t){var r=t(4)(Object,"create");e.exports=r},function(e,n,t){var r=t(124);e.exports=function(e,n){var t=e.__data__;return r(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var r=t(44),o=t(45);e.exports=function(e,n,t,i){var a=!t;t||(t={});for(var s=-1,c=n.length;++s<c;){var u=n[s],l=i?i(t[u],e[u],u,t,e):void 0;void 0===l&&(l=e[u]),a?o(t,u,l):r(t,u,l)}return t}},function(e,n,t){var r=t(99),o=4;e.exports=function(e){return r(e,o)}},function(e,n,t){"use strict";(function(n){var r=t(1),o=t(58),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,n){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var s,c={adapter:("undefined"!=typeof XMLHttpRequest?s=t(30):void 0!==n&&(s=t(30)),s),transformRequest:[function(e,n){return o(n,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){c.headers[e]={}}),r.forEach(["post","put","patch"],function(e){c.headers[e]=r.merge(i)}),e.exports=c}).call(this,t(57))},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var r=t(34),o=t(36);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,n,t){var r=t(2).Symbol;e.exports=r},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var r=t(35),o=n&&!n.nodeType&&n,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s}).call(this,t(21)(e))},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var r=t(4)(t(2),"Map");e.exports=r},function(e,n,t){var r=t(136),o=t(47),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),r(a(e),function(n){return i.call(e,n)}))}:o;e.exports=s},function(e,n,t){var r=t(140),o=t(25),i=t(141),a=t(142),s=t(143),c=t(6),u=t(43),l=u(r),f=u(o),p=u(i),d=u(a),h=u(s),y=c;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=y(new o)||i&&"[object Promise]"!=y(i.resolve())||a&&"[object Set]"!=y(new a)||s&&"[object WeakMap]"!=y(new s))&&(y=function(e){var n=c(e),t="[object Object]"==n?e.constructor:void 0,r=t?u(t):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case h:return"[object WeakMap]"}return n}),e.exports=y},function(e,n,t){var r=t(146);e.exports=function(e){var n=new e.constructor(e.byteLength);return new r(n).set(new r(e)),n}},function(e,n,t){"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return e.apply(n,t)}}},function(e,n,t){"use strict";var r=t(1),o=t(59),i=t(61),a=t(62),s=t(63),c=t(31);e.exports=function(e){return new Promise(function(n,u){var l=e.data,f=e.headers;r.isFormData(l)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var t="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:t,config:e,request:p};o(n,u,r),p=null}},p.onerror=function(){u(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=t(65),m=(e.withCredentials||s(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;m&&(f[e.xsrfHeaderName]=m)}if("setRequestHeader"in p&&r.forEach(f,function(e,n){void 0===l&&"content-type"===n.toLowerCase()?delete f[n]:p.setRequestHeader(n,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),u(e),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(e,n,t){"use strict";var r=t(60);e.exports=function(e,n,t,o,i){var a=new Error(e);return r(a,n,t,o,i)}},function(e,n,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,t){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,n,t){var r=t(6),o=t(3),i="[object AsyncFunction]",a="[object Function]",s="[object GeneratorFunction]",c="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var n=r(e);return n==a||n==s||n==i||n==c}},function(e,n,t){(function(n){var t="object"==typeof n&&n&&n.Object===Object&&n;e.exports=t}).call(this,t(76))},function(e,n){var t=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=t}},function(e,n){var t=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?t:n)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n){e.exports=function(e,n){var t=-1,r=e.length;for(n||(n=Array(r));++t<r;)n[t]=e[t];return n}},function(e,n,t){var r=t(83);e.exports=function(e,n){var t=-1,o=e.length,i=o-1;for(n=void 0===n?o:n;++t<n;){var a=r(t,i),s=e[a];e[a]=e[t],e[t]=s}return e.length=n,e}},function(e,n,t){var r=t(88),o=t(89),i=t(10),a=t(41),s=t(37),c=t(92),u=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=i(e),l=!t&&o(e),f=!t&&!l&&a(e),p=!t&&!l&&!f&&c(e),d=t||l||f||p,h=d?r(e.length,String):[],y=h.length;for(var m in e)!n&&!u.call(e,m)||d&&("length"==m||f&&("offset"==m||"parent"==m)||p&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||s(m,y))||h.push(m);return h}},function(e,n,t){(function(e){var r=t(2),o=t(91),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||o;e.exports=c}).call(this,t(21)(e))},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var r=t(45),o=t(18),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t){var a=e[n];i.call(e,n)&&o(a,t)&&(void 0!==t||n in e)||r(e,n,t)}},function(e,n,t){var r=t(129);e.exports=function(e,n,t){"__proto__"==n&&r?r(e,n,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[n]=t}},function(e,n,t){var r=t(40),o=t(132),i=t(19);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var r=t(49),o=t(50),i=t(26),a=t(47),s=Object.getOwnPropertySymbols?function(e){for(var n=[];e;)r(n,i(e)),e=o(e);return n}:a;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,r=n.length,o=e.length;++t<r;)e[o+t]=n[t];return e}},function(e,n,t){var r=t(42)(Object.getPrototypeOf,Object);e.exports=r},function(e,n,t){var r=t(49),o=t(10);e.exports=function(e,n,t){var i=n(e);return o(e)?i:r(i,t(e))}},function(e,n,t){var r=t(73)();e.exports=r},function(e,n,t){var r=t(82),o=t(84),i=t(10);e.exports=function(e){return(i(e)?r:o)(e)}},function(e,n,t){"use strict";var r=t(1),o=t(29),i=t(56),a=t(17);function s(e){var n=new i(e),t=o(i.prototype.request,n);return r.extend(t,i.prototype,n),r.extend(t,n),t}var c=s(a);c.Axios=i,c.create=function(e){return s(r.merge(a,e))},c.Cancel=t(33),c.CancelToken=t(71),c.isCancel=t(32),c.all=function(e){return Promise.all(e)},c.spread=t(72),e.exports=c,e.exports.default=c},function(e,n){function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,n,t){"use strict";var r=t(17),o=t(1),i=t(66),a=t(67);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var n=[a,void 0],t=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){n.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){n.push(e.fulfilled,e.rejected)});n.length;)t=t.then(n.shift(),n.shift());return t},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(n,t){return this.request(o.merge(t||{},{method:e,url:n}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(n,t,r){return this.request(o.merge(r||{},{method:e,url:n,data:t}))}}),e.exports=s},function(e,n){var t,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var n=u.length;n;){for(c=u,u=[];++f<n;)c&&c[f].run();f=-1,n=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function h(e,n){this.fun=e,this.array=n}function y(){}o.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];u.push(new h(e,n)),1!==u.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,n,t){"use strict";var r=t(1);e.exports=function(e,n){r.forEach(e,function(t,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[r])})}},function(e,n,t){"use strict";var r=t(31);e.exports=function(e,n,t){var o=t.config.validateStatus;t.status&&o&&!o(t.status)?n(r("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},function(e,n,t){"use strict";e.exports=function(e,n,t,r,o){return e.config=n,t&&(e.code=t),e.request=r,e.response=o,e}},function(e,n,t){"use strict";var r=t(1);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var i;if(t)i=t(n);else if(r.isURLSearchParams(n))i=n.toString();else{var a=[];r.forEach(n,function(e,n){null!=e&&(r.isArray(e)?n+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(n)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,n,t){"use strict";var r=t(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),n=r.trim(e.substr(0,i)).toLowerCase(),t=r.trim(e.substr(i+1)),n){if(a[n]&&o.indexOf(n)>=0)return;a[n]="set-cookie"===n?(a[n]?a[n]:[]).concat([t]):a[n]?a[n]+", "+t:t}}),a):a}},function(e,n,t){"use strict";var r=t(1);e.exports=r.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function o(e){var r=e;return n&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=o(window.location.href),function(n){var t=r.isString(n)?o(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},,function(e,n,t){"use strict";var r=t(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,n,t,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(n)),r.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,t){"use strict";var r=t(1);function o(){this.handlers=[]}o.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(n){null!==n&&e(n)})},e.exports=o},function(e,n,t){"use strict";var r=t(1),o=t(68),i=t(32),a=t(17),s=t(69),c=t(70);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!s(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(n){delete e.headers[n]}),(e.adapter||a.adapter)(e).then(function(n){return u(e),n.data=o(n.data,n.headers,e.transformResponse),n},function(n){return i(n)||(u(e),n&&n.response&&(n.response.data=o(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)})}},function(e,n,t){"use strict";var r=t(1);e.exports=function(e,n,t){return r.forEach(t,function(t){e=t(e,n)}),e}},function(e,n,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,t){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,t){"use strict";var r=t(33);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(e){n=e});var t=this;e(function(e){t.reason||(t.reason=new r(e),n(t.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(n){e=n}),cancel:e}},e.exports=o},function(e,n,t){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,t){var r=t(74),o=t(75),i=t(79);e.exports=function(e){return function(n,t,a){return a&&"number"!=typeof a&&o(n,t,a)&&(t=a=void 0),n=i(n),void 0===t?(t=n,n=0):t=i(t),a=void 0===a?n<t?1:-1:i(a),r(n,t,a,e)}}},function(e,n){var t=Math.ceil,r=Math.max;e.exports=function(e,n,o,i){for(var a=-1,s=r(t((n-e)/(o||1)),0),c=Array(s);s--;)c[i?s:++a]=e,e+=o;return c}},function(e,n,t){var r=t(18),o=t(19),i=t(37),a=t(3);e.exports=function(e,n,t){if(!a(t))return!1;var s=typeof n;return!!("number"==s?o(t)&&i(n,t.length):"string"==s&&n in t)&&r(t[n],e)}},function(e,n){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(e,n,t){var r=t(20),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var n=i.call(e,s),t=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(n?e[s]=t:delete e[s]),o}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var r=t(80),o=1/0,i=1.7976931348623157e308;e.exports=function(e){return e?(e=r(e))===o||e===-o?(e<0?-1:1)*i:e==e?e:0:0===e?e:0}},function(e,n,t){var r=t(3),o=t(81),i=NaN,a=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return i;if(r(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=r(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var t=c.test(e);return t||u.test(e)?l(e.slice(2),t?2:8):s.test(e)?i:+e}},function(e,n,t){var r=t(6),o=t(5),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,n,t){var r=t(38),o=t(39);e.exports=function(e){return o(r(e))}},function(e,n){var t=Math.floor,r=Math.random;e.exports=function(e,n){return e+t(r()*(n-e+1))}},function(e,n,t){var r=t(39),o=t(85);e.exports=function(e){return r(o(e))}},function(e,n,t){var r=t(86),o=t(9);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,n,t){var r=t(87);e.exports=function(e,n){return r(n,function(n){return e[n]})}},function(e,n){e.exports=function(e,n){for(var t=-1,r=null==e?0:e.length,o=Array(r);++t<r;)o[t]=n(e[t],t,e);return o}},function(e,n){e.exports=function(e,n){for(var t=-1,r=Array(e);++t<e;)r[t]=n(t);return r}},function(e,n,t){var r=t(90),o=t(5),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=c},function(e,n,t){var r=t(6),o=t(5),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var r=t(93),o=t(22),i=t(23),a=i&&i.isTypedArray,s=a?o(a):r;e.exports=s},function(e,n,t){var r=t(6),o=t(36),i=t(5),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,n,t){var r=t(24),o=t(95),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var n=[];for(var t in Object(e))i.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n,t){var r=t(42)(Object.keys,Object);e.exports=r},function(e,n,t){var r=t(97);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(7)(!1)).push([e.i,".buttonsContainer {\n  text-justify: center; }\n\n.overlay {\n  border: 2px solid #102542;\n  border-radius: 4px;\n  height: 80vmin;\n  background-image: url(/assets/paperTexture.jpg);\n  background-size: contain; }\n\n.l, .Unowned {\n  fill: #FFFFDD;\n  stroke: black;\n  stroke-linejoin: round;\n  opacity: 0.25;\n  stroke-width: 0.8; }\n\n.w {\n  fill: #99CCFF;\n  stroke: #222;\n  stroke-linejoin: round;\n  opacity: 0.45;\n  stroke-width: 0.8; }\n\n.w:hover {\n  fill: yellow;\n  stroke: yellow;\n  stroke-width: 2; }\n\n.s {\n  fill: url(#diagonalHatch);\n  stroke: #220;\n  stroke-linejoin: round;\n  opacity: 0.5; }\n\n.sc {\n  fill: #DDDDDD;\n  stroke: black; }\n\n#A, #F, #sc {\n  pointer-events: none;\n  stroke: black; }\n\n#unit {\n  pointer-events: none; }\n\ntext {\n  font-family: Palatino;\n  fill: #222;\n  font-size: 9px;\n  transform: translate(-5px, 0px); }\n\n.empire1 {\n  fill: #FFFF88; }\n\n.empire2 {\n  fill: #FFFF00; }\n\n.empire3 {\n  fill: #FF88FF; }\n\n.empire4 {\n  fill: #FF8888; }\n\n.empire5 {\n  fill: #FF8800; }\n\n.empire6 {\n  fill: #FF00FF; }\n\n.empire7 {\n  fill: #FF0088; }\n\n.empire8 {\n  fill: #FF0000; }\n\n.empire9 {\n  fill: #88FFFF; }\n\n.empire10 {\n  fill: #88FF88; }\n\n.empire11 {\n  fill: #88FF00; }\n\n.empire12 {\n  fill: #8888FF; }\n\n.empire13 {\n  fill: #888888; }\n\n.empire14 {\n  fill: #888800; }\n\n.empire15 {\n  fill: #8800FF; }\n\n.empire16 {\n  fill: #880088; }\n\n.empire17 {\n  fill: #880000; }\n\n.empire18 {\n  fill: #00FFFF; }\n\n.empire19 {\n  fill: #00FF88; }\n\n.empire20 {\n  fill: #00FF00; }\n\n.empire21 {\n  fill: #0088FF; }\n\n.empire22 {\n  fill: #008888; }\n\n.empire23 {\n  fill: #008800; }\n\n.empire24 {\n  fill: #0000FF; }\n\n.empire25 {\n  fill: #000088; }\n\n.success {\n  stroke: #1C1; }\n\n.bounce {\n  stroke: #D50; }\n\n.move {\n  stroke: #000; }\n\nsvg text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\nsvg text::selection {\n  background: none; }\n\n.e01-light {\n  fill: #00007f; }\n\n.e01-medium {\n  fill: #000065; }\n\n.e01-shadow {\n  fill: #00004c; }\n\n.e02-light {\n  fill: #0000ff; }\n\n.e02-medium {\n  fill: #0000cc; }\n\n.e02-shadow {\n  fill: #000099; }\n\n.e03-light {\n  fill: #007f00; }\n\n.e03-medium {\n  fill: #006500; }\n\n.e03-shadow {\n  fill: #004c00; }\n\n.e04-light {\n  fill: #007f7f; }\n\n.e04-medium {\n  fill: #006565; }\n\n.e04-shadow {\n  fill: #004c4c; }\n\n.e05-light {\n  fill: #007fff; }\n\n.e05-medium {\n  fill: #0065cc; }\n\n.e05-shadow {\n  fill: #004c99; }\n\n.e06-light {\n  fill: #00ff00; }\n\n.e06-medium {\n  fill: #00cc00; }\n\n.e06-shadow {\n  fill: #009900; }\n\n.e07-light {\n  fill: #00ff7f; }\n\n.e07-medium {\n  fill: #00cc65; }\n\n.e07-shadow {\n  fill: #00994c; }\n\n.e08-light {\n  fill: #00ffff; }\n\n.e08-medium {\n  fill: #00cccc; }\n\n.e08-shadow {\n  fill: #009999; }\n\n.e09-light {\n  fill: #7f0000; }\n\n.e09-medium {\n  fill: #650000; }\n\n.e09-shadow {\n  fill: #4c0000; }\n\n.e10-light {\n  fill: #7f007f; }\n\n.e10-medium {\n  fill: #650065; }\n\n.e10-shadow {\n  fill: #4c004c; }\n\n.e11-light {\n  fill: #7f00ff; }\n\n.e11-medium {\n  fill: #6500cc; }\n\n.e11-shadow {\n  fill: #4c0099; }\n\n.e12-light {\n  fill: #7f7f00; }\n\n.e12-medium {\n  fill: #656500; }\n\n.e12-shadow {\n  fill: #4c4c00; }\n\n.e13-light {\n  fill: #7f7f7f; }\n\n.e13-medium {\n  fill: #656565; }\n\n.e13-shadow {\n  fill: #4c4c4c; }\n\n.e14-light {\n  fill: #7f7fff; }\n\n.e14-medium {\n  fill: #6565cc; }\n\n.e14-shadow {\n  fill: #4c4c99; }\n\n.e15-light {\n  fill: #7fff00; }\n\n.e15-medium {\n  fill: #65cc00; }\n\n.e15-shadow {\n  fill: #4c9900; }\n\n.e16-light {\n  fill: #7fff7f; }\n\n.e16-medium {\n  fill: #65cc65; }\n\n.e16-shadow {\n  fill: #4c994c; }\n\n.e17-light {\n  fill: #7fffff; }\n\n.e17-medium {\n  fill: #65cccc; }\n\n.e17-shadow {\n  fill: #4c9999; }\n\n.e18-light {\n  fill: #ff0000; }\n\n.e18-medium {\n  fill: #cc0000; }\n\n.e18-shadow {\n  fill: #990000; }\n\n.e19-light {\n  fill: #ff007f; }\n\n.e19-medium {\n  fill: #cc0065; }\n\n.e19-shadow {\n  fill: #99004c; }\n\n.e20-light {\n  fill: #ff00ff; }\n\n.e20-medium {\n  fill: #cc00cc; }\n\n.e20-shadow {\n  fill: #990099; }\n\n.e21-light {\n  fill: #ff7f00; }\n\n.e21-medium {\n  fill: #cc6500; }\n\n.e21-shadow {\n  fill: #994c00; }\n\n.e22-light {\n  fill: #ff7f7f; }\n\n.e22-medium {\n  fill: #cc6565; }\n\n.e22-shadow {\n  fill: #994c4c; }\n\n.e23-light {\n  fill: #ff7fff; }\n\n.e23-medium {\n  fill: #cc65cc; }\n\n.e23-shadow {\n  fill: #994c99; }\n\n.e24-light {\n  fill: #ffff00; }\n\n.e24-medium {\n  fill: #cccc00; }\n\n.e24-shadow {\n  fill: #999900; }\n\n.e25-light {\n  fill: #ffff7f; }\n\n.e25-medium {\n  fill: #cccc65; }\n\n.e25-shadow {\n  fill: #99994c; }\n",""])},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,t){var r=t(100),o=t(128),i=t(44),a=t(130),s=t(131),c=t(134),u=t(38),l=t(135),f=t(137),p=t(138),d=t(139),h=t(27),y=t(144),m=t(145),_=t(151),v=t(10),g=t(41),b=t(153),x=t(3),S=t(155),w=t(9),A=1,j=2,k=4,B="[object Arguments]",C="[object Function]",O="[object GeneratorFunction]",T="[object Object]",N={};N[B]=N["[object Array]"]=N["[object ArrayBuffer]"]=N["[object DataView]"]=N["[object Boolean]"]=N["[object Date]"]=N["[object Float32Array]"]=N["[object Float64Array]"]=N["[object Int8Array]"]=N["[object Int16Array]"]=N["[object Int32Array]"]=N["[object Map]"]=N["[object Number]"]=N[T]=N["[object RegExp]"]=N["[object Set]"]=N["[object String]"]=N["[object Symbol]"]=N["[object Uint8Array]"]=N["[object Uint8ClampedArray]"]=N["[object Uint16Array]"]=N["[object Uint32Array]"]=!0,N["[object Error]"]=N[C]=N["[object WeakMap]"]=!1,e.exports=function e(n,t,E,P,M,L){var F,I=t&A,U=t&j,R=t&k;if(E&&(F=M?E(n,P,M,L):E(n)),void 0!==F)return F;if(!x(n))return n;var D=v(n);if(D){if(F=y(n),!I)return u(n,F)}else{var G=h(n),W=G==C||G==O;if(g(n))return c(n,I);if(G==T||G==B||W&&!M){if(F=U||W?{}:_(n),!I)return U?f(n,s(F,n)):l(n,a(F,n))}else{if(!N[G])return M?n:{};F=m(n,G,I)}}L||(L=new r);var H=L.get(n);if(H)return H;L.set(n,F),S(n)?n.forEach(function(r){F.add(e(r,t,E,r,n,L))}):b(n)&&n.forEach(function(r,o){F.set(o,e(r,t,E,o,n,L))});var V=R?U?d:p:U?keysIn:w,z=D?void 0:V(n);return o(z||n,function(r,o){z&&(r=n[o=r]),i(F,o,e(r,t,E,o,n,L))}),F}},function(e,n,t){var r=t(11),o=t(106),i=t(107),a=t(108),s=t(109),c=t(110);function u(e){var n=this.__data__=new r(e);this.size=n.size}u.prototype.clear=o,u.prototype.delete=i,u.prototype.get=a,u.prototype.has=s,u.prototype.set=c,e.exports=u},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var r=t(12),o=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=r(n,e);return!(t<0||(t==n.length-1?n.pop():o.call(n,t,1),--this.size,0))}},function(e,n,t){var r=t(12);e.exports=function(e){var n=this.__data__,t=r(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var r=t(12);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,n,t){var r=t(12);e.exports=function(e,n){var t=this.__data__,o=r(t,e);return o<0?(++this.size,t.push([e,n])):t[o][1]=n,this}},function(e,n,t){var r=t(11);e.exports=function(){this.__data__=new r,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var r=t(11),o=t(25),i=t(115),a=200;e.exports=function(e,n){var t=this.__data__;if(t instanceof r){var s=t.__data__;if(!o||s.length<a-1)return s.push([e,n]),this.size=++t.size,this;t=this.__data__=new i(s)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var r=t(34),o=t(112),i=t(3),a=t(43),s=/^\[object .+?Constructor\]$/,c=Function.prototype,u=Object.prototype,l=c.toString,f=u.hasOwnProperty,p=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?p:s).test(a(e))}},function(e,n,t){var r,o=t(113),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,n,t){var r=t(2)["__core-js_shared__"];e.exports=r},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var r=t(116),o=t(123),i=t(125),a=t(126),s=t(127);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,e.exports=c},function(e,n,t){var r=t(117),o=t(11),i=t(25);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,n,t){var r=t(118),o=t(119),i=t(120),a=t(121),s=t(122);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,e.exports=c},function(e,n,t){var r=t(13);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var r=t(13),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(r){var t=n[e];return t===o?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var r=t(13),o=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return r?void 0!==n[e]:o.call(n,e)}},function(e,n,t){var r=t(13),o="__lodash_hash_undefined__";e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=r&&void 0===n?o:n,this}},function(e,n,t){var r=t(14);e.exports=function(e){var n=r(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var r=t(14);e.exports=function(e){return r(this,e).get(e)}},function(e,n,t){var r=t(14);e.exports=function(e){return r(this,e).has(e)}},function(e,n,t){var r=t(14);e.exports=function(e,n){var t=r(this,e),o=t.size;return t.set(e,n),this.size+=t.size==o?0:1,this}},function(e,n){e.exports=function(e,n){for(var t=-1,r=null==e?0:e.length;++t<r&&!1!==n(e[t],t,e););return e}},function(e,n,t){var r=t(4),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,n,t){var r=t(15),o=t(9);e.exports=function(e,n){return e&&r(n,o(n),e)}},function(e,n,t){var r=t(15),o=t(46);e.exports=function(e,n){return e&&r(n,o(n),e)}},function(e,n,t){var r=t(3),o=t(24),i=t(133),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var n=o(e),t=[];for(var s in e)("constructor"!=s||!n&&a.call(e,s))&&t.push(s);return t}},function(e,n){e.exports=function(e){var n=[];if(null!=e)for(var t in Object(e))n.push(t);return n}},function(e,n,t){(function(e){var r=t(2),o=n&&!n.nodeType&&n,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,s=a?a.allocUnsafe:void 0;e.exports=function(e,n){if(n)return e.slice();var t=e.length,r=s?s(t):new e.constructor(t);return e.copy(r),r}}).call(this,t(21)(e))},function(e,n,t){var r=t(15),o=t(26);e.exports=function(e,n){return r(e,o(e),n)}},function(e,n){e.exports=function(e,n){for(var t=-1,r=null==e?0:e.length,o=0,i=[];++t<r;){var a=e[t];n(a,t,e)&&(i[o++]=a)}return i}},function(e,n,t){var r=t(15),o=t(48);e.exports=function(e,n){return r(e,o(e),n)}},function(e,n,t){var r=t(51),o=t(26),i=t(9);e.exports=function(e){return r(e,i,o)}},function(e,n,t){var r=t(51),o=t(48),i=t(46);e.exports=function(e){return r(e,i,o)}},function(e,n,t){var r=t(4)(t(2),"DataView");e.exports=r},function(e,n,t){var r=t(4)(t(2),"Promise");e.exports=r},function(e,n,t){var r=t(4)(t(2),"Set");e.exports=r},function(e,n,t){var r=t(4)(t(2),"WeakMap");e.exports=r},function(e,n){var t=Object.prototype.hasOwnProperty;e.exports=function(e){var n=e.length,r=new e.constructor(n);return n&&"string"==typeof e[0]&&t.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,n,t){var r=t(28),o=t(147),i=t(148),a=t(149),s=t(150),c="[object Boolean]",u="[object Date]",l="[object Map]",f="[object Number]",p="[object RegExp]",d="[object Set]",h="[object String]",y="[object Symbol]",m="[object ArrayBuffer]",_="[object DataView]",v="[object Float32Array]",g="[object Float64Array]",b="[object Int8Array]",x="[object Int16Array]",S="[object Int32Array]",w="[object Uint8Array]",A="[object Uint8ClampedArray]",j="[object Uint16Array]",k="[object Uint32Array]";e.exports=function(e,n,t){var B=e.constructor;switch(n){case m:return r(e);case c:case u:return new B(+e);case _:return o(e,t);case v:case g:case b:case x:case S:case w:case A:case j:case k:return s(e,t);case l:return new B;case f:case h:return new B(e);case p:return i(e);case d:return new B;case y:return a(e)}}},function(e,n,t){var r=t(2).Uint8Array;e.exports=r},function(e,n,t){var r=t(28);e.exports=function(e,n){var t=n?r(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}},function(e,n){var t=/\w*$/;e.exports=function(e){var n=new e.constructor(e.source,t.exec(e));return n.lastIndex=e.lastIndex,n}},function(e,n,t){var r=t(20),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,n,t){var r=t(28);e.exports=function(e,n){var t=n?r(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}},function(e,n,t){var r=t(152),o=t(50),i=t(24);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,n,t){var r=t(3),o=Object.create,i=function(){function e(){}return function(n){if(!r(n))return{};if(o)return o(n);e.prototype=n;var t=new e;return e.prototype=void 0,t}}();e.exports=i},function(e,n,t){var r=t(154),o=t(22),i=t(23),a=i&&i.isMap,s=a?o(a):r;e.exports=s},function(e,n,t){var r=t(27),o=t(5),i="[object Map]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,n,t){var r=t(156),o=t(22),i=t(23),a=i&&i.isSet,s=a?o(a):r;e.exports=s},function(e,n,t){var r=t(27),o=t(5),i="[object Set]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,n,t){var r=t(158);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(7)(!1)).push([e.i,"h1 {\n  color: #102542;\n  font-size: 84px;\n  text-shadow: 5px 5px 0px #546A7B;\n  text-align: center; }\n",""])},function(e,n,t){var r=t(160);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(n=e.exports=t(7)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Notable|Arvo&display=swap);",""]),n.push([e.i,".formBox {\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 20px;\n  padding: 24px;\n  background-color: #4972AB;\n  color: #EFEFEF;\n  letter-spacing: 2px;\n  box-shadow: 5px 5px 0px #102542;\n  margin: auto; }\n  .formBox input[type=submit] {\n    width: 50%;\n    font-size: 12px;\n    font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    letter-spacing: 1px; }\n\na {\n  color: #EFEFEF; }\n",""])},function(e,n,t){var r=t(162);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(7)(!1)).push([e.i,"body {\n  background-color: #EFEFEF; }\n\n.page {\n  display: flex;\n  align-items: center;\n  align-content: flex-start;\n  flex-direction: column;\n  padding: 56px;\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif; }\n\ninput, button {\n  font-family: 'Arvo', Calibri, sans-serif;\n  color: #102542;\n  font-size: 18px;\n  height: 24px;\n  border-radius: 3px;\n  background-color: #EFEFEF;\n  margin: 10px 0px;\n  box-sizing: border-box;\n  text-align: center; }\n",""])},function(e,n,t){var r=t(164);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(7)(!1)).push([e.i,"",""])},function(e,n,t){"use strict";t.r(n);var r=function(){},o={},i=[],a=[];function s(e,n){var t,s,c,u,l=a;for(u=arguments.length;u-- >2;)i.push(arguments[u]);for(n&&null!=n.children&&(i.length||i.push(n.children),delete n.children);i.length;)if((s=i.pop())&&void 0!==s.pop)for(u=s.length;u--;)i.push(s[u]);else"boolean"==typeof s&&(s=null),(c="function"!=typeof e)&&(null==s?s="":"number"==typeof s?s=String(s):"string"!=typeof s&&(c=!1)),c&&t?l[l.length-1]+=s:l===a?l=[s]:l.push(s),t=c;var f=new r;return f.nodeName=e,f.children=l,f.attributes=null==n?void 0:n,f.key=null==n?void 0:n.key,void 0!==o.vnode&&o.vnode(f),f}function c(e,n){for(var t in n)e[t]=n[t];return e}function u(e,n){null!=e&&("function"==typeof e?e(n):e.current=n)}var l="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;function f(e,n){return s(e.nodeName,c(c({},e.attributes),n),arguments.length>2?[].slice.call(arguments,2):e.children)}var p=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,d=[];function h(e){!e._dirty&&(e._dirty=!0)&&1==d.push(e)&&(o.debounceRendering||l)(y)}function y(){for(var e;e=d.pop();)e._dirty&&M(e)}function m(e,n){return e.normalizedNodeName===n||e.nodeName.toLowerCase()===n.toLowerCase()}function _(e){var n=c({},e.attributes);n.children=e.children;var t=e.nodeName.defaultProps;if(void 0!==t)for(var r in t)void 0===n[r]&&(n[r]=t[r]);return n}function v(e){var n=e.parentNode;n&&n.removeChild(e)}function g(e,n,t,r,o){if("className"===n&&(n="class"),"key"===n);else if("ref"===n)u(t,null),u(r,e);else if("class"!==n||o)if("style"===n){if(r&&"string"!=typeof r&&"string"!=typeof t||(e.style.cssText=r||""),r&&"object"==typeof r){if("string"!=typeof t)for(var i in t)i in r||(e.style[i]="");for(var i in r)e.style[i]="number"==typeof r[i]&&!1===p.test(i)?r[i]+"px":r[i]}}else if("dangerouslySetInnerHTML"===n)r&&(e.innerHTML=r.__html||"");else if("o"==n[0]&&"n"==n[1]){var a=n!==(n=n.replace(/Capture$/,""));n=n.toLowerCase().substring(2),r?t||e.addEventListener(n,b,a):e.removeEventListener(n,b,a),(e._listeners||(e._listeners={}))[n]=r}else if("list"!==n&&"type"!==n&&!o&&n in e){try{e[n]=null==r?"":r}catch(e){}null!=r&&!1!==r||"spellcheck"==n||e.removeAttribute(n)}else{var s=o&&n!==(n=n.replace(/^xlink:?/,""));null==r||!1===r?s?e.removeAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase()):e.removeAttribute(n):"function"!=typeof r&&(s?e.setAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase(),r):e.setAttribute(n,r))}else e.className=r||""}function b(e){return this._listeners[e.type](o.event&&o.event(e)||e)}var x=[],S=0,w=!1,A=!1;function j(){for(var e;e=x.shift();)o.afterMount&&o.afterMount(e),e.componentDidMount&&e.componentDidMount()}function k(e,n,t,r,o,i){S++||(w=null!=o&&void 0!==o.ownerSVGElement,A=null!=e&&!("__preactattr_"in e));var a=B(e,n,t,r,i);return o&&a.parentNode!==o&&o.appendChild(a),--S||(A=!1,i||j()),a}function B(e,n,t,r,o){var i=e,a=w;if(null!=n&&"boolean"!=typeof n||(n=""),"string"==typeof n||"number"==typeof n)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=n&&(e.nodeValue=n):(i=document.createTextNode(n),e&&(e.parentNode&&e.parentNode.replaceChild(i,e),C(e,!0))),i.__preactattr_=!0,i;var s,c,u=n.nodeName;if("function"==typeof u)return function(e,n,t,r){var o=e&&e._component,i=o,a=e,s=o&&e._componentConstructor===n.nodeName,c=s,u=_(n);for(;o&&!c&&(o=o._parentComponent);)c=o.constructor===n.nodeName;o&&c&&(!r||o._component)?(P(o,u,3,t,r),e=o.base):(i&&!s&&(L(i),e=a=null),o=N(n.nodeName,u,t),e&&!o.nextBase&&(o.nextBase=e,a=null),P(o,u,1,t,r),e=o.base,a&&e!==a&&(a._component=null,C(a,!1)));return e}(e,n,t,r);if(w="svg"===u||"foreignObject"!==u&&w,u=String(u),(!e||!m(e,u))&&(s=u,(c=w?document.createElementNS("http://www.w3.org/2000/svg",s):document.createElement(s)).normalizedNodeName=s,i=c,e)){for(;e.firstChild;)i.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(i,e),C(e,!0)}var l=i.firstChild,f=i.__preactattr_,p=n.children;if(null==f){f=i.__preactattr_={};for(var d=i.attributes,h=d.length;h--;)f[d[h].name]=d[h].value}return!A&&p&&1===p.length&&"string"==typeof p[0]&&null!=l&&void 0!==l.splitText&&null==l.nextSibling?l.nodeValue!=p[0]&&(l.nodeValue=p[0]):(p&&p.length||null!=l)&&function(e,n,t,r,o){var i,a,s,c,u,l=e.childNodes,f=[],p={},d=0,h=0,y=l.length,_=0,g=n?n.length:0;if(0!==y)for(var b=0;b<y;b++){var x=l[b],S=x.__preactattr_,w=g&&S?x._component?x._component.__key:S.key:null;null!=w?(d++,p[w]=x):(S||(void 0!==x.splitText?!o||x.nodeValue.trim():o))&&(f[_++]=x)}if(0!==g)for(var b=0;b<g;b++){c=n[b],u=null;var w=c.key;if(null!=w)d&&void 0!==p[w]&&(u=p[w],p[w]=void 0,d--);else if(h<_)for(i=h;i<_;i++)if(void 0!==f[i]&&(A=a=f[i],k=o,"string"==typeof(j=c)||"number"==typeof j?void 0!==A.splitText:"string"==typeof j.nodeName?!A._componentConstructor&&m(A,j.nodeName):k||A._componentConstructor===j.nodeName)){u=a,f[i]=void 0,i===_-1&&_--,i===h&&h++;break}u=B(u,c,t,r),s=l[b],u&&u!==e&&u!==s&&(null==s?e.appendChild(u):u===s.nextSibling?v(s):e.insertBefore(u,s))}var A,j,k;if(d)for(var b in p)void 0!==p[b]&&C(p[b],!1);for(;h<=_;)void 0!==(u=f[_--])&&C(u,!1)}(i,p,t,r,A||null!=f.dangerouslySetInnerHTML),function(e,n,t){var r;for(r in t)n&&null!=n[r]||null==t[r]||g(e,r,t[r],t[r]=void 0,w);for(r in n)"children"===r||"innerHTML"===r||r in t&&n[r]===("value"===r||"checked"===r?e[r]:t[r])||g(e,r,t[r],t[r]=n[r],w)}(i,n.attributes,f),w=a,i}function C(e,n){var t=e._component;t?L(t):(null!=e.__preactattr_&&u(e.__preactattr_.ref,null),!1!==n&&null!=e.__preactattr_||v(e),O(e))}function O(e){for(e=e.lastChild;e;){var n=e.previousSibling;C(e,!0),e=n}}var T=[];function N(e,n,t){var r,o=T.length;for(e.prototype&&e.prototype.render?(r=new e(n,t),F.call(r,n,t)):((r=new F(n,t)).constructor=e,r.render=E);o--;)if(T[o].constructor===e)return r.nextBase=T[o].nextBase,T.splice(o,1),r;return r}function E(e,n,t){return this.constructor(e,t)}function P(e,n,t,r,i){e._disable||(e._disable=!0,e.__ref=n.ref,e.__key=n.key,delete n.ref,delete n.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||i?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r)),r&&r!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=r),e.prevProps||(e.prevProps=e.props),e.props=n,e._disable=!1,0!==t&&(1!==t&&!1===o.syncComponentUpdates&&e.base?h(e):M(e,1,i)),u(e.__ref,e))}function M(e,n,t,r){if(!e._disable){var i,a,s,u=e.props,l=e.state,f=e.context,p=e.prevProps||u,d=e.prevState||l,h=e.prevContext||f,y=e.base,m=e.nextBase,v=y||m,g=e._component,b=!1,w=h;if(e.constructor.getDerivedStateFromProps&&(l=c(c({},l),e.constructor.getDerivedStateFromProps(u,l)),e.state=l),y&&(e.props=p,e.state=d,e.context=h,2!==n&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(u,l,f)?b=!0:e.componentWillUpdate&&e.componentWillUpdate(u,l,f),e.props=u,e.state=l,e.context=f),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!b){i=e.render(u,l,f),e.getChildContext&&(f=c(c({},f),e.getChildContext())),y&&e.getSnapshotBeforeUpdate&&(w=e.getSnapshotBeforeUpdate(p,d));var A,B,O=i&&i.nodeName;if("function"==typeof O){var T=_(i);(a=g)&&a.constructor===O&&T.key==a.__key?P(a,T,1,f,!1):(A=a,e._component=a=N(O,T,f),a.nextBase=a.nextBase||m,a._parentComponent=e,P(a,T,0,f,!1),M(a,1,t,!0)),B=a.base}else s=v,(A=g)&&(s=e._component=null),(v||1===n)&&(s&&(s._component=null),B=k(s,i,f,t||!y,v&&v.parentNode,!0));if(v&&B!==v&&a!==g){var E=v.parentNode;E&&B!==E&&(E.replaceChild(B,v),A||(v._component=null,C(v,!1)))}if(A&&L(A),e.base=B,B&&!r){for(var F=e,I=e;I=I._parentComponent;)(F=I).base=B;B._component=F,B._componentConstructor=F.constructor}}for(!y||t?x.push(e):b||(e.componentDidUpdate&&e.componentDidUpdate(p,d,w),o.afterUpdate&&o.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);S||r||j()}}function L(e){o.beforeUnmount&&o.beforeUnmount(e);var n=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var t=e._component;t?L(t):n&&(null!=n.__preactattr_&&u(n.__preactattr_.ref,null),e.nextBase=n,v(n),T.push(e),O(n)),u(e.__ref,null)}function F(e,n){this._dirty=!0,this.context=n,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function I(e,n,t){return k(t,e,{},!1,n,!1)}c(F.prototype,{setState:function(e,n){this.prevState||(this.prevState=this.state),this.state=c(c({},this.state),"function"==typeof e?e(this.state,this.props):e),n&&this._renderCallbacks.push(n),h(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),M(this,2)},render:function(){}});var U={};function R(e,n){for(var t in n)e[t]=n[t];return e}function D(e,n){return e.rank<n.rank?1:e.rank>n.rank?-1:e.index-n.index}function G(e,n){return e.index=n,e.rank=function(e){return e.attributes.default?0:(n=e.attributes.path,W(n).map(H).join(""));var n}(e),e.attributes}function W(e){return e.replace(/(^\/+|\/+$)/g,"").split("/")}function H(e){return":"==e.charAt(0)?1+"*+?".indexOf(e.charAt(e.length-1))||4:5}var V=null,z=[],$=[],q={};function K(){var e;return""+((e=V&&V.location?V.location:V&&V.getCurrentLocation?V.getCurrentLocation():"undefined"!=typeof location?location:q).pathname||"")+(e.search||"")}function Y(e,n){return void 0===n&&(n=!1),"string"!=typeof e&&e.url&&(n=e.replace,e=e.url),function(e){for(var n=z.length;n--;)if(z[n].canRoute(e))return!0;return!1}(e)&&function(e,n){void 0===n&&(n="push"),V&&V[n]?V[n](e):"undefined"!=typeof history&&history[n+"State"]&&history[n+"State"](null,null,e)}(e,n?"replace":"push"),J(e)}function J(e){for(var n=!1,t=0;t<z.length;t++)!0===z[t].routeTo(e)&&(n=!0);for(var r=$.length;r--;)$[r](e);return n}function X(e){if(e&&e.getAttribute){var n=e.getAttribute("href"),t=e.getAttribute("target");if(n&&n.match(/^\//g)&&(!t||t.match(/^_?self$/i)))return Y(n)}}function Q(e){if(0==e.button)return X(e.currentTarget||e.target||this),Z(e)}function Z(e){return e&&(e.stopImmediatePropagation&&e.stopImmediatePropagation(),e.stopPropagation&&e.stopPropagation(),e.preventDefault()),!1}function ee(e){if(!(e.ctrlKey||e.metaKey||e.altKey||e.shiftKey||0!==e.button)){var n,t=e.target;do{if("A"===String(t.nodeName).toUpperCase()&&t.getAttribute("href")&&(null!=(n=t).__preactattr_||"undefined"!=typeof Symbol&&null!=n[Symbol.for("preactattr")])){if(t.hasAttribute("native"))return;if(X(t))return Z(e)}}while(t=t.parentNode)}}var ne=!1;var te=function(e){function n(n){e.call(this,n),n.history&&(V=n.history),this.state={url:n.url||K()},ne||("function"==typeof addEventListener&&(V||addEventListener("popstate",function(){J(K())}),addEventListener("click",ee)),ne=!0)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.shouldComponentUpdate=function(e){return!0!==e.static||(e.url!==this.props.url||e.onChange!==this.props.onChange)},n.prototype.canRoute=function(e){return this.getMatchingChildren(this.props.children,e,!1).length>0},n.prototype.routeTo=function(e){return this._didRoute=!1,this.setState({url:e}),this.updating?this.canRoute(e):(this.forceUpdate(),this._didRoute)},n.prototype.componentWillMount=function(){z.push(this),this.updating=!0},n.prototype.componentDidMount=function(){var e=this;V&&(this.unlisten=V.listen(function(n){e.routeTo(""+(n.pathname||"")+(n.search||""))})),this.updating=!1},n.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),z.splice(z.indexOf(this),1)},n.prototype.componentWillUpdate=function(){this.updating=!0},n.prototype.componentDidUpdate=function(){this.updating=!1},n.prototype.getMatchingChildren=function(e,n,t){return e.filter(G).sort(D).map(function(e){var r=function(e,n,t){var r,o=/(?:\?([^#]*))?(#.*)?$/,i=e.match(o),a={};if(i&&i[1])for(var s=i[1].split("&"),c=0;c<s.length;c++){var u=s[c].split("=");a[decodeURIComponent(u[0])]=decodeURIComponent(u.slice(1).join("="))}e=W(e.replace(o,"")),n=W(n||"");for(var l=Math.max(e.length,n.length),f=0;f<l;f++)if(n[f]&&":"===n[f].charAt(0)){var p=n[f].replace(/(^\:|[+*?]+$)/g,""),d=(n[f].match(/[+*?]+$/)||U)[0]||"",h=~d.indexOf("+"),y=~d.indexOf("*"),m=e[f]||"";if(!m&&!y&&(d.indexOf("?")<0||h)){r=!1;break}if(a[p]=decodeURIComponent(m),h||y){a[p]=e.slice(f).map(decodeURIComponent).join("/");break}}else if(n[f]!==e[f]){r=!1;break}return(!0===t.default||!1!==r)&&a}(n,e.attributes.path,e.attributes);if(r){if(!1!==t){var o={url:n,matches:r};return R(o,r),delete o.ref,delete o.key,f(e,o)}return e}}).filter(Boolean)},n.prototype.render=function(e,n){var t=e.children,r=e.onChange,o=n.url,i=this.getMatchingChildren(t,o,!0),a=i[0]||null;this._didRoute=!!a;var s=this.previousUrl;return o!==s&&(this.previousUrl=o,"function"==typeof r&&r({router:this,url:o,previous:s,active:i,current:a})),a},n}(F),re=function(e){return s("a",R({onClick:Q},e))};te.subscribers=$,te.getCurrentUrl=K,te.route=Y,te.Router=te,te.Route=function(e){return s(e.component,e)},te.Link=re;var oe=te,ie=t(0),ae=t.n(ie);var se,ce=function(e,n){return e.then(function(e){return[null,e]}).catch(function(e){return n&&Object.assign(e,n),[e,void 0]})},ue=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},le=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},fe=function(){return ue(void 0,void 0,void 0,function(){var e,n,t;return le(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.get("/api/auth"))];case 1:return e=r.sent(),n=e[0],t=e[1],console.log(t),n?[2,null]:[2,t.data.userID]}})})},pe=t(52),de=t.n(pe),he=t(53),ye=t.n(he),me=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},_e=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},ve=function(){return me(void 0,void 0,void 0,function(){var e,n,t,r,o;return _e(this,function(i){switch(i.label){case 0:return console.log("Creating a new game..."),[4,ce(ae.a.post("/api/game"))];case 1:return e=i.sent(),n=e[0],t=e[1],n?[2,n]:(r=t.data,o=ye()(de()(1,25)).map(function(e){return e.toString().padStart(2,"0")}),[4,Promise.all([ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd85783c26513e12f695ce2",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd8988c463115ffdbc672b3",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c5b63ca37c488983f92",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c7563ca37c488983f93",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c9663ca37c488983f94",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cbd63ca37c488983f95",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cd263ca37c488983f96",colour:"e"+o.pop()})])]);case 2:return i.sent(),[4,ae.a.post("/api/game/"+r.id+"/start")];case 3:return i.sent(),[4,ae.a.get("/api/game/"+r.id)];case 4:return[2,i.sent()]}})})},ge=function(){function e(e,n,t,r,o){Object.assign(this,{unit:e,from:n,to:t,moveType:r,supportFrom:o})}return e.from=function(n){return new e("",n.from,n.to,n.moveType,n.supportFrom)},e.prototype.toObject=function(){return{unit:this.unit,moveType:this.moveType,from:this.from,to:this.to,supportFrom:this.supportFrom,wasSuccessful:this.wasSuccessful}},e}(),be={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},xe=function(){function e(e,n,t,r){var o=this;this.draw=function(e){e&&(o.turn=e),o.turn.players.forEach(function(e){o.colourTerritories(e.ownedTerritories,e.empire,e.colour),o.drawMoves(e.moves.map(ge.from)),o.drawUnits(e.ownedUnits,e.empire,e.colour)})},this.reset=function(){o.turn.players.forEach(function(e){return o.colourTerritories(e.ownedTerritories,"unowned")}),o.removeOrders(),o.removeUnits()},this.redraw=function(){o.reset(),o.draw()},this.redrawOrders=function(e){o.removeOrders(),o.drawMoves(e)},this.colourTerritories=function(e,n,t){e.forEach(function(e){return o.setOwnership(e,n,t)})},this.drawMoves=function(e){e.forEach(function(e){return o.drawOrder(e)})},this.setOwnership=function(e,n,t){Array.from(o.board.getElementsByClassName(e)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(t+"-light")})},this.drawUnit=function(e,n,t){var r=("Army"===e.unitType?o.army:o.fleet).cloneNode(!0),i=be[e.location];r.setAttribute("class","unit "+e.unitType+" "+e.location+" "+n),r.setAttribute("x",(i.x-13).toString()),r.setAttribute("y",(i.y-18).toString());["light","medium","shadow"].forEach(function(e){Array.from(r.getElementsByClassName(e)).forEach(function(n){n.setAttribute("class",t+"-"+e)})}),o.board.appendChild(r)},this.drawOrder=function(e){o.drawLine(be[e.from],be[e.to])},this.drawLine=function(e,n){var t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("d","M "+e.x+" "+e.y+" L "+n.x+" "+n.y),t.setAttribute("stroke","green"),t.setAttribute("class","order"),t.style.strokeWidth="2px",t.style.markerEnd="url(#triangle)",o.board.appendChild(t)},this.removeOrders=function(){Array.from(o.board.getElementsByClassName("order")).forEach(function(e){return e.remove()})},this.removeUnits=function(){Array.from(o.board.getElementsByClassName("unit")).forEach(function(e){return e.remove()})},this.board=e,this.turn=n,this.army=t,this.fleet=r,this.draw()}return e.prototype.drawUnits=function(e,n,t){var r=this;e.forEach(function(e){return r.drawUnit(e,n,t)})},e}(),Se={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Serbia","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople","Smyrna"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Rome","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna","Syria"],Belgium:["English_Channel","North_Sea","Burgundy","Holland","Picardy","Ruhr"],Berlin:["Baltic_Sea","Kiel","Munich","Prussia","Silesia"],Bohemia:["Galicia","Munich","Silesia","Tyrolia","Vienna"],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Paris","Picardy"],Budapest:["Galicia","Rumania","Serbia","Trieste","Vienna"],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece","Serbia"],Burgundy:["Belgium","Gascony","Marseilles","Munich","Paris","Picardy","Ruhr"],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Liverpool","Yorkshire"],Finland:["Gulf_of_Bothnia","Norway","St_Petersburg__nc","St_Petersburg__sc","Sweden"],Galicia:["Bohemia","Budapest","Rumania","Silesia","Ukraine","Vienna","Warsaw"],Gascony:["Mid_Atlantic_Ocean","Brest","Burgundy","Marseilles","Paris","Spain__nc","Spain__sc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc","Serbia"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Munich","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Edinburgh","Wales","Yorkshire"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Moscow","Prussia","St_Petersburg__sc","Warsaw"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Burgundy","Gascony","Piedmont","Spain__sc"],Moscow:["Livonia","Sevastopol","St_Petersburg__nc","St_Petersburg__sc","Ukraine","Warsaw"],Munich:["Berlin","Bohemia","Burgundy","Kiel","Ruhr","Silesia","Tyrolia"],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden"],Paris:["Brest","Burgundy","Gascony","Picardy"],Picardy:["English_Channel","Belgium","Brest","Burgundy","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Tyrolia","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia","Silesia","Warsaw"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Burgundy","Holland","Kiel","Munich"],Rumania:["Black_Sea","Budapest","Galicia","Serbia","Sevastopol","Ukraine"],Serbia:["Albania","Budapest","Bulgaria__sc","Greece","Rumania","Trieste"],Sevastopol:["Black_Sea","Armenia","Moscow","Rumania","Ukraine"],Silesia:["Berlin","Bohemia","Galicia","Munich","Prussia","Warsaw"],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal","Spain__sc"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal","Spain__nc"],St_Petersburg__nc:["Barents_Sea","Finland","Moscow","St_Petersburg__sc"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia","Moscow","St_Petersburg__nc"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Budapest","Serbia","Tyrolia","Venice","Vienna"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:["Bohemia","Munich","Piedmont","Trieste","Venice","Vienna"],Ukraine:["Galicia","Moscow","Rumania","Sevastopol","Warsaw"],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany","Tyrolia"],Vienna:["Bohemia","Budapest","Galicia","Trieste","Tyrolia"],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:["Galicia","Livonia","Moscow","Prussia","Silesia","Ukraine"],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},we={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna"],Belgium:["English_Channel","North_Sea","Holland","Picardy"],Berlin:["Baltic_Sea","Kiel","Prussia"],Bohemia:[],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Picardy"],Budapest:[],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece"],Burgundy:[],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Yorkshire"],Finland:["Gulf_of_Bothnia","St_Petersburg__sc","Sweden"],Galicia:[],Gascony:["Mid_Atlantic_Ocean","Brest","Spain__nc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Wales"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Prussia","St_Petersburg__sc"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Gascony","Piedmont","Spain__sc"],Moscow:[],Munich:[],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden","St_Petersburg__nc"],Paris:[],Picardy:["English_Channel","Belgium","Brest","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Holland","Kiel"],Rumania:["Black_Sea","Sevastopol"],Serbia:[],Sevastopol:["Black_Sea","Armenia","Rumania"],Silesia:[],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal"],St_Petersburg__nc:["Barents_Sea","Norway"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Venice"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:[],Ukraine:[],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany"],Vienna:[],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:[],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},Ae={movement:["Move","support","hold"],retreat:["retreat"],build:["build","disband"]},je=function(e,n,t){var r,o=function(e){return function(n){return e.players.find(function(e){return e.playerID===n})}}(e)(t);if(!o)return console.log("Player not found"),!1;if(!(r=o,function(e){return r.ownedUnits.find(function(n){return n.location===e})})(n.from))return console.log("Unit not found"),!1;if(!(Ae[e.info.phase]||[]).includes(n.moveType))return console.log("not included",n.moveType),console.log("turn.info.phase: "+e.info.phase),!1;var i,a=(i=n.unit,function(e){return function(n){var t="Army"===i?Se:we;return console.log("inside areAdjacent..."),console.log(i,t),t[e].includes(n)}})(n.to);switch(n.moveType){case"Move":return!!a(n.from)||(console.log("is not adjacent"),!1);case"support":return!!a(n.from)&&!!a(n.supportFrom);case"retreat":return!!a(n.from);case"hold":case"disband":return!0}return!1},ke=new(function(){return function(){var e=this;this.orders=[],this.units={},this.run=function(){},this.setup=function(n,t,r){e.mapSvg=n.map,e.armySvg=n.army,e.fleetSvg=n.fleet,e.turn=t,e.playerID=r,e.playerEmpire=e.turn.players.find(function(e){return e.playerID===r}).empire,console.log("playing as ",e.playerEmpire),e.turn.players.forEach(function(n){return e.units[n.empire]=n.ownedUnits}),e.boardPainter=new xe(e.mapSvg,t,e.armySvg,e.fleetSvg),e.orders=e.turn.players.find(function(e){return e.playerID===r}).moves.map(ge.from),e.boardPainter.redraw();var o=Array.from(e.mapSvg.getElementsByClassName("seaTile"));o.push.apply(o,Array.from(e.mapSvg.getElementsByClassName("landTile"))),o.forEach(function(n){n.addEventListener("click",function(t){e.onClick(n.getAttribute("title"))})}),Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(n){n.addEventListener("click",function(t){return e.onClick(n.classList[2])})})},this.clearMap=function(){e.mapSvg&&(Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(e){return e.remove()}),Array.from(e.mapSvg.getElementsByClassName("order")).forEach(function(e){return e.remove()}))},this.onClick=function(n){e.tileSelected&&Se[e.tileSelected].includes(n)?(e.finishOrder(n),console.log("finishingOrder")):(console.log("startingOrder"),e.startOrder(n))},this.finishOrder=function(n){console.log(e.units[e.playerEmpire],e.tileSelected);var t=e.units[e.playerEmpire].find(function(n){return n.location===e.tileSelected});e.orders=e.orders.filter(function(n){return n.from!==e.tileSelected}),console.log(e.turn);var r=new ge(t.unitType,e.tileSelected,n,"Move");console.log(je(e.turn,r.toObject(),e.playerID)),je(e.turn,r.toObject(),e.playerID)&&(e.orders.push(r),e.boardPainter.redrawOrders(e.orders),e.tileSelected=null)},this.startOrder=function(n){e.playerHasUnitAt(n)&&(e.tileSelected=n)},this.playerHasUnitAt=function(n){return!!e.units[e.playerEmpire].find(function(e){return e.location===n})}}}()),Be=(t(96),se=function(e,n){return(se=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}se(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),Ce=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},Oe=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Te=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.state={gameIsRunning:!1},n.setupGame=function(){return Ce(n,void 0,void 0,function(){var e,n,t=this;return Oe(this,function(r){switch(r.label){case 0:return[4,ve()];case 1:return e=r.sent().data,[4,ae.a.get("api/turn/"+e.currentTurn)];case 2:return n=r.sent().data,this.setState({game:e,turn:n},function(){t.runGame()}),[2]}})})},n.getLatestGame=function(){return Ce(n,void 0,void 0,function(){var e,n;return Oe(this,function(t){switch(t.label){case 0:return[4,ae.a.get("/api/game/latest")];case 1:return e=t.sent().data,[4,ae.a.get("/api/turn/"+e.currentTurn)];case 2:return n=t.sent().data,this.setState({game:e,turn:n},this.refresh),[2]}})})},n.refresh=function(){ke.clearMap(),n.runGame()},n.fetchGame=function(e){return Ce(n,void 0,void 0,function(){var n,t;return Oe(this,function(r){switch(r.label){case 0:return[4,ae.a.get("/api/game/"+e)];case 1:return n=r.sent().data,[4,ae.a.get("/api/turn/"+n.currentTurn)];case 2:return t=r.sent().data,this.setState({game:n,turn:t}),[2]}})})},n.submitOrders=function(){return Ce(n,void 0,void 0,function(){return Oe(this,function(e){switch(e.label){case 0:return[4,ae.a.patch("/api/turn/"+this.state.game.currentTurn,{moves:ke.orders.map(function(e){return e.toObject()}),turnID:this.state.game.currentTurn})];case 1:return e.sent(),console.log("sent!"),[2]}})})},n.nextTurn=function(){return Ce(n,void 0,void 0,function(){var e,n,t;return Oe(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.post("/api/game/"+this.state.game._id+"/next"))];case 1:return e=r.sent(),n=e[0],t=e[1],n&&console.log(n),t&&this.getLatestGame(),[2]}})})},n.getSvg=function(e){return document.getElementById(e).contentDocument.getElementById(e+"Svg")},n}return Be(n,e),n.prototype.render=function(e,n){return s("div",{className:"page"},s("div",{className:"buttonsContainer"},s("button",{onClick:this.setupGame},"Set Up Game"),s("button",{onClick:this.getLatestGame},"Load Game"),s("button",{onClick:this.submitOrders},"Submit Orders"),s("button",{onClick:this.props.logOut},"Log out"),s("button",{onClick:this.nextTurn},"Next Turn"),s("br",null)),s("br",null),s("div",null,s("object",{id:"army",type:"image/svg+xml",data:"assets/svg/001-tank-1.svg",width:"0"}),s("object",{id:"fleet",type:"image/svg+xml",data:"assets/svg/002-cruiser.svg",width:"0"}),s("object",{id:"map",type:"image/svg+xml",data:"assets/Diplomacy.svg",class:"overlay"},"Diplomacy map should be here")))},n.prototype.runGame=function(){var e=["map","army","fleet"].map(this.getSvg),n=e[0],t=e[1],r=e[2];ke.setup({map:n,army:t,fleet:r},this.state.turn,this.props.userID),ke.run()},n}(F),Ne=t(16),Ee=t.n(Ne),Pe=(t(157),t(159),function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}()),Me=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return Pe(n,e),n.prototype.render=function(){return s("div",{className:"formBox"},this.props.children)},n}(F),Le=function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),Fe=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},Ie=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Ue=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.state={formFields:{}},n.login=function(e){return Fe(n,void 0,void 0,function(){var n,t,r;return Ie(this,function(o){switch(o.label){case 0:return e.preventDefault(),console.log("attempting to log in"),console.log(this.state.formFields),[4,ce(ae.a.post("api/login",this.state.formFields))];case 1:return n=o.sent(),t=n[0],r=n[1],t&&(console.log("logging an err"),console.log(t)),r?(console.log("success!"),console.log(r.data),[4,this.props.toggleLogIn(!0)]):[3,3];case 2:o.sent(),Y("/game"),o.label=3;case 3:return[2]}})})},n.handleChange=function(e){return function(t){var r=Ee()(n.state.formFields);r[e]=t.target.value,n.setState({formFields:r})}},n}return Le(n,e),n.prototype.componentDidMount=function(){this.setState({formFields:{username:this.usernameInput.value,password:this.passwordInput.value}})},n.prototype.render=function(e,n){var t=this;return s("div",{className:"page"},s("h1",null,"Diplomacy"),s("br",null),s(Me,null,s("form",{action:"api/user/authenticate",method:"post",onSubmit:this.login},"Username",s("br",null),s("input",{ref:function(e){return t.usernameInput=e},type:"text",name:"username",onChange:this.handleChange("username")}),s("br",null),"Password",s("br",null),s("input",{ref:function(e){return t.passwordInput=e},type:"text",name:"password",onChange:this.handleChange("password")}),s("br",null),s("input",{type:"submit",value:"Submit"})),"New? Register ",s(re,{href:"/register"},"here")))},n}(F),Re=function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),De=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},Ge=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},We=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.state={formFields:{}},n.handleSubmit=function(e){return De(n,void 0,void 0,function(){var n,t,r;return Ge(this,function(o){switch(o.label){case 0:return e.preventDefault(),[4,ce(ae.a.post("/api/user/register",this.state.formFields))];case 1:return n=o.sent(),t=n[0],r=n[1],t&&console.log(t),r&&Y("/",!0),[2]}})})},n.handleChange=function(e){return function(t){var r=Ee()(n.state.formFields);r[e]=t.target.value,n.setState({formFields:r})}},n}return Re(n,e),n.prototype.render=function(e,n){return s("div",{className:"page"},s(Me,null,s("form",{action:"/user/register",method:"post",onSubmit:this.handleSubmit},"Username:",s("br",null),s("input",{type:"text",name:"username",value:n.formFields.username,onChange:this.handleChange("username")}),s("br",null),"Name:",s("br",null),s("input",{type:"text",name:"name",value:n.formFields.name,onChange:this.handleChange("name")}),s("br",null),"Email:",s("br",null),s("input",{type:"text",name:"email",value:n.formFields.email,onChange:this.handleChange("email")}),s("br",null),"Password:",s("br",null),s("input",{type:"password",name:"password",value:n.formFields.password,onChange:this.handleChange("password")}),s("br",null),s("input",{type:"submit",value:"Submit"}))))},n}(F),He=(t(161),t(163),function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}()),Ve=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,s)}c((r=r.apply(e,n||[])).next())})},ze=function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},$e=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.state={isLoggedIn:!1,userID:null},n.handleRoute=function(e){return Ve(n,void 0,void 0,function(){return ze(this,function(n){switch(n.label){case 0:switch(e.url){case"/game":return[3,1]}return[3,3];case 1:return console.log("attempting to route to /game"),[4,this.checkAuthentication()];case 2:n.sent()||Y("/",!0),n.label=3;case 3:return[2]}})})},n.toggleLogIn=function(e){return e&&n.setState({isLoggedIn:e},n.checkAuthentication),n.setState({isLoggedIn:!n.state.isLoggedIn})},n.checkAuthentication=function(){return Ve(n,void 0,void 0,function(){var e;return ze(this,function(n){switch(n.label){case 0:return[4,fe()];case 1:return e=n.sent(),console.log("authID: "+e),e?(this.setState({userID:e}),[2,!0]):[2,!1]}})})},n.logOut=function(){return Ve(n,void 0,void 0,function(){return ze(this,function(e){switch(e.label){case 0:return[4,ae.a.get("/logout")];case 1:return e.sent(),Y("/",!0),this.setState({userID:null,isLoggedIn:!1}),[2]}})})},n}return He(n,e),n.prototype.render=function(e,n){return s(oe,{onChange:this.handleRoute},s(Te,{path:"/game",userID:n.userID,logOut:this.logOut}),s(We,{path:"/register"}),s(Ue,{path:"/",toggleLogIn:this.toggleLogIn}))},n}(F);I(s($e,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,