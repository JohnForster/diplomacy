!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(r,a,function(n){return e[n]}.bind(null,a));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=27)}([function(e,n,t){"use strict";var r=t(2),a=t(9),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function c(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var t=0,r=e.length;t<r;t++)n.call(null,e[t],t,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:a,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var n={};function t(t,r){"object"==typeof n[r]&&"object"==typeof t?n[r]=e(n[r],t):n[r]=t}for(var r=0,a=arguments.length;r<a;r++)c(arguments[r],t);return n},extend:function(e,n,t){return c(n,function(n,a){e[a]=t&&"function"==typeof n?r(n,t):n}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,n,t){"use strict";(function(n){var r=t(0),a=t(12),i={"Content-Type":"application/x-www-form-urlencoded"};function o(e,n){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=t(3):void 0!==n&&(s=t(3)),s),transformRequest:[function(e,n){return a(n,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(i)}),e.exports=u}).call(this,t(11))},function(e,n,t){"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return e.apply(n,t)}}},function(e,n,t){"use strict";var r=t(0),a=t(13),i=t(15),o=t(16),s=t(17),u=t(4),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||t(18);e.exports=function(e){return new Promise(function(n,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest,y="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(e.url)||(p=new window.XDomainRequest,y="onload",h=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var _=e.auth.username||"",S=e.auth.password||"";d.Authorization="Basic "+c(_+":"+S)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[y]=function(){if(p&&(4===p.readyState||h)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var t="getAllResponseHeaders"in p?o(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:t,config:e,request:p};a(n,l,r),p=null}},p.onerror=function(){l(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=t(19),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,function(e,n){void 0===f&&"content-type"===n.toLowerCase()?delete d[n]:p.setRequestHeader(n,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),l(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,n,t){"use strict";var r=t(14);e.exports=function(e,n,t,a,i){var o=new Error(e);return r(o,n,t,a,i)}},function(e,n,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,t){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,n,t){e.exports=t(8)},function(e,n,t){"use strict";var r=t(0),a=t(2),i=t(10),o=t(1);function s(e){var n=new i(e),t=a(i.prototype.request,n);return r.extend(t,i.prototype,n),r.extend(t,n),t}var u=s(o);u.Axios=i,u.create=function(e){return s(r.merge(o,e))},u.Cancel=t(6),u.CancelToken=t(25),u.isCancel=t(5),u.all=function(e){return Promise.all(e)},u.spread=t(26),e.exports=u,e.exports.default=u},function(e,n){function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,n,t){"use strict";var r=t(1),a=t(0),i=t(20),o=t(21);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=a.merge({url:arguments[0]},arguments[1])),(e=a.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var n=[o,void 0],t=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){n.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){n.push(e.fulfilled,e.rejected)});n.length;)t=t.then(n.shift(),n.shift());return t},a.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(n,t){return this.request(a.merge(t||{},{method:e,url:n}))}}),a.forEach(["post","put","patch"],function(e){s.prototype[e]=function(n,t,r){return this.request(a.merge(r||{},{method:e,url:n,data:t}))}}),e.exports=s},function(e,n){var t,r,a=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=s(d);l=!0;for(var n=c.length;n;){for(u=c,c=[];++f<n;)u&&u[f].run();f=-1,n=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function y(e,n){this.fun=e,this.array=n}function h(){}a.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];c.push(new y(e,n)),1!==c.length||l||s(p)},y.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=h,a.addListener=h,a.once=h,a.off=h,a.removeListener=h,a.removeAllListeners=h,a.emit=h,a.prependListener=h,a.prependOnceListener=h,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,n,t){"use strict";var r=t(0);e.exports=function(e,n){r.forEach(e,function(t,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[r])})}},function(e,n,t){"use strict";var r=t(4);e.exports=function(e,n,t){var a=t.config.validateStatus;t.status&&a&&!a(t.status)?n(r("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},function(e,n,t){"use strict";e.exports=function(e,n,t,r,a){return e.config=n,t&&(e.code=t),e.request=r,e.response=a,e}},function(e,n,t){"use strict";var r=t(0);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var i;if(t)i=t(n);else if(r.isURLSearchParams(n))i=n.toString();else{var o=[];r.forEach(n,function(e,n){null!=e&&(r.isArray(e)?n+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(a(n)+"="+a(e))}))}),i=o.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,n,t){"use strict";var r=t(0),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,i,o={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),n=r.trim(e.substr(0,i)).toLowerCase(),t=r.trim(e.substr(i+1)),n){if(o[n]&&a.indexOf(n)>=0)return;o[n]="set-cookie"===n?(o[n]?o[n]:[]).concat([t]):o[n]?o[n]+", "+t:t}}),o):o}},function(e,n,t){"use strict";var r=t(0);e.exports=r.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function a(e){var r=e;return n&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=a(window.location.href),function(n){var t=r.isString(n)?a(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},function(e,n,t){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function a(){this.message="String contains an invalid character"}a.prototype=new Error,a.prototype.code=5,a.prototype.name="InvalidCharacterError",e.exports=function(e){for(var n,t,i=String(e),o="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);o+=u.charAt(63&n>>8-s%1*8)){if((t=i.charCodeAt(s+=.75))>255)throw new a;n=n<<8|t}return o}},function(e,n,t){"use strict";var r=t(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,n,t,a,i,o){var s=[];s.push(e+"="+encodeURIComponent(n)),r.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),r.isString(a)&&s.push("path="+a),r.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,t){"use strict";var r=t(0);function a(){this.handlers=[]}a.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,function(n){null!==n&&e(n)})},e.exports=a},function(e,n,t){"use strict";var r=t(0),a=t(22),i=t(5),o=t(1),s=t(23),u=t(24);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(n){delete e.headers[n]}),(e.adapter||o.adapter)(e).then(function(n){return c(e),n.data=a(n.data,n.headers,e.transformResponse),n},function(n){return i(n)||(c(e),n&&n.response&&(n.response.data=a(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)})}},function(e,n,t){"use strict";var r=t(0);e.exports=function(e,n,t){return r.forEach(t,function(t){e=t(e,n)}),e}},function(e,n,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,t){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,t){"use strict";var r=t(6);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(e){n=e});var t=this;e(function(e){t.reason||(t.reason=new r(e),n(t.reason))})}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a(function(n){e=n}),cancel:e}},e.exports=a},function(e,n,t){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,t){"use strict";t.r(n);var r=t(7),a=t.n(r);var i,o=function(e,n){return e.then(function(e){return[null,e]}).catch(function(e){return n&&Object.assign(e,n),[e,void 0]})},s={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},u=JSON.stringify({moves:[{country:"England",start:"English_Channel",end:"Brest"},{country:"Italy",start:"Rome",end:"Tyrrhenian_Sea"},{country:"France",start:"Burgundy",end:"Marseilles"}]}),c={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Serbia","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople","Smyrna"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Rome","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna","Syria"],Belgium:["English_Channel","North_Sea","Burgundy","Holland","Picardy","Ruhr"],Berlin:["Baltic_Sea","Kiel","Munich","Prussia","Silesia"],Bohemia:["Galicia","Munich","Silesia","Tyrolia","Vienna"],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Paris","Picardy"],Budapest:["Galicia","Rumania","Serbia","Trieste","Vienna"],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece","Serbia"],Burgundy:["Belgium","Gascony","Marseilles","Munich","Paris","Picardy","Ruhr"],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Liverpool","Yorkshire"],Finland:["Gulf_of_Bothnia","Norway","St_Petersburg__nc","St_Petersburg__sc","Sweden"],Galicia:["Bohemia","Budapest","Rumania","Silesia","Ukraine","Vienna","Warsaw"],Gascony:["Mid_Atlantic_Ocean","Brest","Burgundy","Marseilles","Paris","Spain__nc","Spain__sc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc","Serbia"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Munich","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Edinburgh","Wales","Yorkshire"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Moscow","Prussia","St_Petersburg__sc","Warsaw"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Burgundy","Gascony","Piedmont","Spain__sc"],Moscow:["Livonia","Sevastopol","St_Petersburg__nc","St_Petersburg__sc","Ukraine","Warsaw"],Munich:["Berlin","Bohemia","Burgundy","Kiel","Ruhr","Silesia","Tyrolia"],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden"],Paris:["Brest","Burgundy","Gascony","Picardy"],Picardy:["English_Channel","Belgium","Brest","Burgundy","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Tyrolia","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia","Silesia","Warsaw"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Burgundy","Holland","Kiel","Munich"],Rumania:["Black_Sea","Budapest","Galicia","Serbia","Sevastopol","Ukraine"],Serbia:["Albania","Budapest","Bulgaria__sc","Greece","Rumania","Trieste"],Sevastopol:["Black_Sea","Armenia","Moscow","Rumania","Ukraine"],Silesia:["Berlin","Bohemia","Galicia","Munich","Prussia","Warsaw"],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal","Spain__sc"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal","Spain__nc"],St_Petersburg__nc:["Barents_Sea","Finland","Moscow","St_Petersburg__sc"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia","Moscow","St_Petersburg__nc"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Budapest","Serbia","Tyrolia","Venice","Vienna"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:["Bohemia","Munich","Piedmont","Trieste","Venice","Vienna"],Ukraine:["Galicia","Moscow","Rumania","Sevastopol","Warsaw"],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany","Tyrolia"],Vienna:["Bohemia","Budapest","Galicia","Trieste","Tyrolia"],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:["Galicia","Livonia","Moscow","Prussia","Silesia","Ukraine"],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]};!function(e){e[e.England=0]="England",e[e.France=1]="France",e[e.Germany=2]="Germany",e[e.Italy=3]="Italy",e[e.Austria=4]="Austria",e[e.Turkey=5]="Turkey",e[e.Russia=6]="Russia"}(i||(i={}));var l=i,f=function(e,n,t,r){return new(t||(t=Promise))(function(a,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?a(e.value):new t(function(n){n(e.value)}).then(o,s)}u((r=r.apply(e,n||[])).next())})},d=function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=n.call(e,o)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=new(function(){return function(){var e=this;this.playerCountry="England",this.run=function(){},this.setup=function(n){e.svg=n;var t=Array.from(n.getElementsByClassName("seaTile"));t.push.apply(t,Array.from(n.getElementsByClassName("landTile"))),t.forEach(function(n){n.addEventListener("click",function(t){e.onClick(n.getAttribute("title"))})}),e.drawInstructions(JSON.parse(u)),e.asyncSetup()},this.asyncSetup=function(){return f(e,void 0,void 0,function(){var e,n,t,r=this;return d(this,function(i){switch(i.label){case 0:return[4,o(a.a.get("/game/5cc5d578382f88cc84d4f6e2"))];case 1:if(e=i.sent(),n=e[0],t=e[1],n)throw new Error("No game data found");return t&&t.data.territories.forEach(function(e){e.ownedTerritories.forEach(function(n){return r.setOwnership(n,e.empire)})}),this.drawUnits(),[2]}})})},this.onClick=function(n){e.tileSelected?(e.finishOrder(n),e.drawLine(s[e.tileSelected],s[n]),e.tileSelected=null):e.startOrder(n)},this.finishOrder=function(n){c[e.tileSelected].includes(n)&&(e.drawLine(s[e.tileSelected],s[n]),e.tileSelected=null)},this.startOrder=function(n){e.playerHasUnitAt(n)&&(e.tileSelected=n)},this.playerHasUnitAt=function(n){return!!e.units[e.playerCountry].find(function(e){return e.location===n})},this.drawLine=function(n,t){var r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M "+n.x+" "+n.y+" L "+t.x+" "+t.y),r.setAttribute("stroke","green"),r.style.strokeWidth="2px",r.style.markerEnd="url(#triangle)",e.svg.appendChild(r)},this.drawUnits=function(n){var t=function(t){if(l.hasOwnProperty(t)){var r=l[t];if(!n[r])return"continue";n[r].forEach(function(n){e.drawUnit(n.location,r,n.unitType)})}};for(var r in l)t(r)},this.drawUnit=function(n,t,r){var a=document.createElementNS("http://www.w3.org/2000/svg","use"),i=s[n];a.setAttribute("href",{fleet:"#F",army:"#A"}[r]),a.setAttribute("class",t),a.setAttribute("transform","translate("+i.x+", "+i.y+")"),e.svg.appendChild(a)},this.drawInstructions=function(n){n.moves.forEach(function(n){e.drawLine(s[n.start],s[n.end])})},this.setOwnership=function(n,t){Array.from(e.svg.getElementsByClassName(n)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(t)})}}}());window.addEventListener("load",function(){var e=document.getElementById("mainMap").contentDocument.getElementById("mapSvg");p.setup(e),p.run()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,