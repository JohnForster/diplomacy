!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){"use strict";var r=n(2),o=n(9),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(12),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=n(3):void 0!==t&&(s=n(3)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(i)}),e.exports=u}).call(this,n(11))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(13),i=n(15),a=n(16),s=n(17),u=n(4),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(18);e.exports=function(e){return new Promise(function(t,f){var l=e.data,p=e.headers;r.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest,y="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||s(e.url)||(d=new window.XDomainRequest,y="onload",h=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var x=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+c(x+":"+m)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[y]=function(){if(d&&(4===d.readyState||h)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,f,r),d=null}},d.onerror=function(){f(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var g=n(19),w=(e.withCredentials||s(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;w&&(p[e.xsrfHeaderName]=w)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),f(e),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(e,t,n){"use strict";var r=n(14);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(8)},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n(10),a=n(1);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(a);u.Axios=i,u.create=function(e){return s(r.merge(a,e))},u.Cancel=n(6),u.CancelToken=n(25),u.isCancel=n(5),u.all=function(e){return Promise.all(e)},u.spread=n(26),e.exports=u,e.exports.default=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=n(20),a=n(21);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&d())}function d(){if(!f){var e=s(p);f=!0;for(var t=c.length;t;){for(u=c,c=[];++l<t;)u&&u[l].run();l=-1,t=c.length}u=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function y(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new y(e,t)),1!==c.length||f||s(d)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&t>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(22),i=n(5),a=n(1),s=n(23),u=n(24);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(6);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t);var r,o=n(7),i=n.n(o),a={Austria:"#FF0000",England:"#0000FF",France:"#00FFFF",Germany:"#808080",Italy:"#00FF00",Russia:"#008000",Turkey:"#FFFF00"},s={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},u=JSON.stringify({moves:[{country:"England",start:"English_Channel",end:"Brest"},{country:"Italy",start:"Rome",end:"Tyrrhenian_Sea"},{country:"France",start:"Burgundy",end:"Marseilles"}]}),c=JSON.stringify({territories:{England:["London","Liverpool","Yorkshire","Clyde","Edinburgh","Wales"],France:["Picardy","Brest","Paris","Gascony","Burgundy","Marseilles"],Italy:["Piedmont","Venice","Rome","Naples","Apulia","Tuscany"],Germany:["Berlin","Ruhr","Munich","Kiel","Silesia","Prussia"],Austria:["Bohemia","Budapest","Tyrolia","Galicia","Vienna","Trieste"],Russia:["Warsaw","Livonia","Sevastopol","Moscow","Ukraine","Finland","St_Petersburg"],Turkey:["Constantinople","Smyrna","Syria","Ankara","Armenia"]}});!function(e){e[e.England=0]="England",e[e.France=1]="France",e[e.Germany=2]="Germany",e[e.Italy=3]="Italy",e[e.Austria=4]="Austria",e[e.Turkey=5]="Turkey",e[e.Russia=6]="Russia"}(r||(r={}));var f=r,l=new(function(){return function(){var e=this;this.playerCountry="England",this.setState=function(t){e.state=JSON.parse(t)},this.run=function(){},this.setup=function(t){e.svg=t;var n=Array.from(t.getElementsByClassName("seaTile"));n.push.apply(n,Array.from(t.getElementsByClassName("landTile"))),n.forEach(function(t){t.addEventListener("click",function(n){e.onClick(t.getAttribute("title"))})});var r=e.state.territories,o=function(t){r.hasOwnProperty(t)&&r[t].forEach(function(n){return e.setOwnership(n,t)})};for(var a in r)o(a);i.a.get("/game").then(function(t){console.log(t.data),e.units=t.data,e.drawUnits(t.data)}),e.drawInstructions(JSON.parse(u))},this.onClick=function(t){e.tileSelected?(e.drawLine(s[e.tileSelected],s[t]),e.tileSelected=null):e.startOrder(t)},this.startOrder=function(t){e.playerHasUnitAt(t)&&(e.tileSelected=t)},this.playerHasUnitAt=function(t){return!!e.units[e.playerCountry].find(function(e){return e.location===t})},this.drawLine=function(t,n,r){var o=document.createElementNS("http://www.w3.org/2000/svg","path");o.setAttribute("d","M "+t.x+" "+t.y+" L "+n.x+" "+n.y),o.setAttribute("stroke","green"),o.style.strokeWidth="2px",o.style.markerEnd="url(#triangle)",e.svg.appendChild(o)},this.drawUnits=function(t){var n=function(n){if(f.hasOwnProperty(n)){var r=f[n];if(!t[r])return"continue";t[r].forEach(function(t){e.drawUnit(t.location,r,t.unitType)})}};for(var r in f)n(r)},this.drawUnit=function(t,n,r){var o=document.createElementNS("http://www.w3.org/2000/svg","use"),i=s[t];o.setAttribute("href",{fleet:"#F",army:"#A"}[r]),o.setAttribute("class",n),o.setAttribute("transform","translate("+i.x+", "+i.y+")"),e.svg.appendChild(o)},this.drawInstructions=function(t){t.moves.forEach(function(t){e.drawLine(s[t.start],s[t.end],a[t.country])})},this.setOwnership=function(t,n){Array.from(e.svg.getElementsByClassName(t)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(n)})},this.setState(c)}}());window.addEventListener("load",function(){var e=document.getElementById("mainMap").contentDocument.getElementById("mapSvg");l.setup(e),l.run()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,