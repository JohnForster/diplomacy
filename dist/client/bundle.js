!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=168)}([function(e,t,n){e.exports=n(54)},function(e,t,n){"use strict";var r=n(29),o=n(55),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function l(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){var r=n(35),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),i=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(i).concat([o]).join("\n")}var a,l,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var l=e[a];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),c=null,s=0,u=[],L=n(97);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(_(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(_(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function d(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,n);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),d(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function _(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=c||(c=y(t)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=L(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&f(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete i[l.id]}}}};var v,g=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){var r=n(114),o=n(117);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(20),o=n(76),i=n(77),a="[object Null]",l="[object Undefined]",c=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?l:a:c&&c in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(40),o=n(93),i=n(19);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(104),o=n(105),i=n(106),a=n(107),l=n(108);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(18);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(6)(Object,"create");e.exports=r},function(e,t,n){var r=n(127);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(44),o=n(45);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var l=-1,c=t.length;++l<c;){var s=t[l],u=i?i(n[s],e[s],s,n,e):void 0;void 0===u&&(u=e[s]),a?o(n,s,u):r(n,s,u)}return n}},function(e,t,n){var r=n(102),o=4;e.exports=function(e){return r(e,o)}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(58),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,c={adapter:("undefined"!=typeof XMLHttpRequest?l=n(30):void 0!==t&&(l=n(30)),l),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){c.headers[e]={}}),r.forEach(["post","put","patch"],function(e){c.headers[e]=r.merge(i)}),e.exports=c}).call(this,n(57))},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(34),o=n(36);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(2).Symbol;e.exports=r},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(35),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,l=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=l}).call(this,n(21)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(6)(n(2),"Map");e.exports=r},function(e,t,n){var r=n(139),o=n(47),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,l=a?function(e){return null==e?[]:(e=Object(e),r(a(e),function(t){return i.call(e,t)}))}:o;e.exports=l},function(e,t,n){var r=n(143),o=n(25),i=n(144),a=n(145),l=n(146),c=n(8),s=n(43),u=s(r),L=s(o),f=s(i),p=s(a),d=s(l),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||i&&"[object Promise]"!=h(i.resolve())||a&&"[object Set]"!=h(new a)||l&&"[object WeakMap]"!=h(new l))&&(h=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?s(n):"";if(r)switch(r){case u:return"[object DataView]";case L:return"[object Map]";case f:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return t}),e.exports=h},function(e,t,n){var r=n(149);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(1),o=n(59),i=n(61),a=n(62),l=n(63),c=n(31);e.exports=function(e){return new Promise(function(t,s){var u=e.data,L=e.headers;r.isFormData(u)&&delete L["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",d=e.auth.password||"";L.Authorization="Basic "+btoa(p+":"+d)}if(f.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?a(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:e,request:f};o(t,s,r),f=null}},f.onerror=function(){s(c("Network Error",e,null,f)),f=null},f.ontimeout=function(){s(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var h=n(64),y=(e.withCredentials||l(e.url))&&e.xsrfCookieName?h.read(e.xsrfCookieName):void 0;y&&(L[e.xsrfHeaderName]=y)}if("setRequestHeader"in f&&r.forEach(L,function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete L[t]:f.setRequestHeader(t,e)}),e.withCredentials&&(f.withCredentials=!0),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){f&&(f.abort(),s(e),f=null)}),void 0===u&&(u=null),f.send(u)})}},function(e,t,n){"use strict";var r=n(60);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){var r=n(8),o=n(3),i="[object AsyncFunction]",a="[object Function]",l="[object GeneratorFunction]",c="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==a||t==l||t==i||t==c}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(75))},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(82);e.exports=function(e,t){var n=-1,o=e.length,i=o-1;for(t=void 0===t?o:t;++n<t;){var a=r(n,i),l=e[a];e[a]=e[n],e[n]=l}return e.length=t,e}},function(e,t,n){var r=n(87),o=n(88),i=n(10),a=n(41),l=n(37),c=n(91),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),u=!n&&o(e),L=!n&&!u&&a(e),f=!n&&!u&&!L&&c(e),p=n||u||L||f,d=p?r(e.length,String):[],h=d.length;for(var y in e)!t&&!s.call(e,y)||p&&("length"==y||L&&("offset"==y||"parent"==y)||f&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||l(y,h))||d.push(y);return d}},function(e,t,n){(function(e){var r=n(2),o=n(90),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,l=a&&a.exports===i?r.Buffer:void 0,c=(l?l.isBuffer:void 0)||o;e.exports=c}).call(this,n(21)(e))},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(45),o=n(18),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(132);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(40),o=n(135),i=n(19);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(49),o=n(50),i=n(26),a=n(47),l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=l},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(42)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(49),o=n(10);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t,n){var r=n(72)();e.exports=r},function(e,t,n){var r=n(81),o=n(83),i=n(10);e.exports=function(e){return(i(e)?r:o)(e)}},function(e,t,n){"use strict";var r=n(1),o=n(29),i=n(56),a=n(17);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=l(a);c.Axios=i,c.create=function(e){return l(r.merge(a,e))},c.Cancel=n(33),c.CancelToken=n(70),c.isCancel=n(32),c.all=function(e){return Promise.all(e)},c.spread=n(71),e.exports=c,e.exports.default=c},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(17),o=n(1),i=n(65),a=n(66);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){l.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){l.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=l},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,s=[],u=!1,L=-1;function f(){u&&c&&(u=!1,c.length?s=c.concat(s):L=-1,s.length&&p())}function p(){if(!u){var e=l(f);u=!0;for(var t=s.length;t;){for(c=s,s=[];++L<t;)c&&c[L].run();L=-1,t=s.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||u||l(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(31);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(1);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(1);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(67),i=n(32),a=n(17),l=n(68),c=n(69);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!l(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(33);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r=n(73),o=n(74),i=n(78);e.exports=function(e){return function(t,n,a){return a&&"number"!=typeof a&&o(t,n,a)&&(n=a=void 0),t=i(t),void 0===n?(n=t,t=0):n=i(n),a=void 0===a?t<n?1:-1:i(a),r(t,n,a,e)}}},function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,i){for(var a=-1,l=r(n((t-e)/(o||1)),0),c=Array(l);l--;)c[i?l:++a]=e,e+=o;return c}},function(e,t,n){var r=n(18),o=n(19),i=n(37),a=n(3);e.exports=function(e,t,n){if(!a(n))return!1;var l=typeof t;return!!("number"==l?o(n)&&i(t,n.length):"string"==l&&t in n)&&r(n[t],e)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(20),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[l]=n:delete e[l]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(79),o=1/0,i=1.7976931348623157e308;e.exports=function(e){return e?(e=r(e))===o||e===-o?(e<0?-1:1)*i:e==e?e:0:0===e?e:0}},function(e,t,n){var r=n(3),o=n(80),i=NaN,a=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return i;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=c.test(e);return n||s.test(e)?u(e.slice(2),n?2:8):l.test(e)?i:+e}},function(e,t,n){var r=n(8),o=n(7),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t,n){var r=n(38),o=n(39);e.exports=function(e){return o(r(e))}},function(e,t){var n=Math.floor,r=Math.random;e.exports=function(e,t){return e+n(r()*(t-e+1))}},function(e,t,n){var r=n(39),o=n(84);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(85),o=n(9);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,t,n){var r=n(86);e.exports=function(e,t){return r(t,function(t){return e[t]})}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(89),o=n(7),i=Object.prototype,a=i.hasOwnProperty,l=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!l.call(e,"callee")};e.exports=c},function(e,t,n){var r=n(8),o=n(7),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(92),o=n(22),i=n(23),a=i&&i.isTypedArray,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(8),o=n(36),i=n(7),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(24),o=n(94),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(42)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(96);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".buttonsContainer {\n  text-justify: center; }\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r=n(99);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".l, .Unowned {\n  fill: #FFFFDD;\n  stroke: black;\n  stroke-linejoin: round;\n  fill-opacity: 0.2;\n  stroke-width: 0.8; }\n\n.w {\n  fill: #99CCFF;\n  stroke: #222;\n  stroke-linejoin: round;\n  fill-opacity: 0.45;\n  stroke-width: 0.8; }\n\n.w:hover {\n  fill: #AADDFF; }\n\n.l:hover ~ text, .w:hover ~ text {\n  font-size: 10px; }\n\n.l:hover {\n  fill-opacity: 0.5; }\n\n.s {\n  fill: url(#diagonalHatch);\n  stroke: #220;\n  stroke-linejoin: round;\n  opacity: 0.5; }\n\n.sc {\n  fill: #DDDDDD;\n  stroke: black; }\n\n#A, #F, #sc {\n  pointer-events: none;\n  stroke: black; }\n\ntext {\n  font-family: Palatino;\n  fill: #222;\n  font-size: 9px;\n  transform: translate(-5px, 0px);\n  pointer-events: none; }\n\n.empire1 {\n  fill: #FFFF88; }\n\n.empire2 {\n  fill: #FFFF00; }\n\n.empire3 {\n  fill: #FF88FF; }\n\n.empire4 {\n  fill: #FF8888; }\n\n.empire5 {\n  fill: #FF8800; }\n\n.empire6 {\n  fill: #FF00FF; }\n\n.empire7 {\n  fill: #FF0088; }\n\n.empire8 {\n  fill: #FF0000; }\n\n.empire9 {\n  fill: #88FFFF; }\n\n.empire10 {\n  fill: #88FF88; }\n\n.empire11 {\n  fill: #88FF00; }\n\n.empire12 {\n  fill: #8888FF; }\n\n.empire13 {\n  fill: #888888; }\n\n.empire14 {\n  fill: #888800; }\n\n.empire15 {\n  fill: #8800FF; }\n\n.empire16 {\n  fill: #880088; }\n\n.empire17 {\n  fill: #880000; }\n\n.empire18 {\n  fill: #00FFFF; }\n\n.empire19 {\n  fill: #00FF88; }\n\n.empire20 {\n  fill: #00FF00; }\n\n.empire21 {\n  fill: #0088FF; }\n\n.empire22 {\n  fill: #008888; }\n\n.empire23 {\n  fill: #008800; }\n\n.empire24 {\n  fill: #0000FF; }\n\n.empire25 {\n  fill: #000088; }\n\n.success {\n  stroke: #1C1; }\n\n.bounce {\n  stroke: #D50; }\n\n.move {\n  stroke: #000; }\n\n/* .light {fill:#06B559;}\n.medium{fill:#0B9B53;}\n.shadow{fill:#088443;} */\nsvg text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\nsvg text::selection {\n  background: none; }\n\n.e01-light {\n  fill: #00007f; }\n\n.e01-medium {\n  fill: #000065; }\n\n.e01-shadow {\n  fill: #00004c; }\n\n.e02-light {\n  fill: #0000ff; }\n\n.e02-medium {\n  fill: #0000cc; }\n\n.e02-shadow {\n  fill: #000099; }\n\n.e03-light {\n  fill: #007f00; }\n\n.e03-medium {\n  fill: #006500; }\n\n.e03-shadow {\n  fill: #004c00; }\n\n.e04-light {\n  fill: #007f7f; }\n\n.e04-medium {\n  fill: #006565; }\n\n.e04-shadow {\n  fill: #004c4c; }\n\n.e05-light {\n  fill: #007fff; }\n\n.e05-medium {\n  fill: #0065cc; }\n\n.e05-shadow {\n  fill: #004c99; }\n\n.e06-light {\n  fill: #00ff00; }\n\n.e06-medium {\n  fill: #00cc00; }\n\n.e06-shadow {\n  fill: #009900; }\n\n.e07-light {\n  fill: #00ff7f; }\n\n.e07-medium {\n  fill: #00cc65; }\n\n.e07-shadow {\n  fill: #00994c; }\n\n.e08-light {\n  fill: #00ffff; }\n\n.e08-medium {\n  fill: #00cccc; }\n\n.e08-shadow {\n  fill: #009999; }\n\n.e09-light {\n  fill: #7f0000; }\n\n.e09-medium {\n  fill: #650000; }\n\n.e09-shadow {\n  fill: #4c0000; }\n\n.e10-light {\n  fill: #7f007f; }\n\n.e10-medium {\n  fill: #650065; }\n\n.e10-shadow {\n  fill: #4c004c; }\n\n.e11-light {\n  fill: #7f00ff; }\n\n.e11-medium {\n  fill: #6500cc; }\n\n.e11-shadow {\n  fill: #4c0099; }\n\n.e12-light {\n  fill: #7f7f00; }\n\n.e12-medium {\n  fill: #656500; }\n\n.e12-shadow {\n  fill: #4c4c00; }\n\n.e13-light {\n  fill: #7f7f7f; }\n\n.e13-medium {\n  fill: #656565; }\n\n.e13-shadow {\n  fill: #4c4c4c; }\n\n.e14-light {\n  fill: #7f7fff; }\n\n.e14-medium {\n  fill: #6565cc; }\n\n.e14-shadow {\n  fill: #4c4c99; }\n\n.e15-light {\n  fill: #7fff00; }\n\n.e15-medium {\n  fill: #65cc00; }\n\n.e15-shadow {\n  fill: #4c9900; }\n\n.e16-light {\n  fill: #7fff7f; }\n\n.e16-medium {\n  fill: #65cc65; }\n\n.e16-shadow {\n  fill: #4c994c; }\n\n.e17-light {\n  fill: #7fffff; }\n\n.e17-medium {\n  fill: #65cccc; }\n\n.e17-shadow {\n  fill: #4c9999; }\n\n.e18-light {\n  fill: #ff0000; }\n\n.e18-medium {\n  fill: #cc0000; }\n\n.e18-shadow {\n  fill: #990000; }\n\n.e19-light {\n  fill: #ff007f; }\n\n.e19-medium {\n  fill: #cc0065; }\n\n.e19-shadow {\n  fill: #99004c; }\n\n.e20-light {\n  fill: #ff00ff; }\n\n.e20-medium {\n  fill: #cc00cc; }\n\n.e20-shadow {\n  fill: #990099; }\n\n.e21-light {\n  fill: #ff7f00; }\n\n.e21-medium {\n  fill: #cc6500; }\n\n.e21-shadow {\n  fill: #994c00; }\n\n.e22-light {\n  fill: #ff7f7f; }\n\n.e22-medium {\n  fill: #cc6565; }\n\n.e22-shadow {\n  fill: #994c4c; }\n\n.e23-light {\n  fill: #ff7fff; }\n\n.e23-medium {\n  fill: #cc65cc; }\n\n.e23-shadow {\n  fill: #994c99; }\n\n.e24-light {\n  fill: #ffff00; }\n\n.e24-medium {\n  fill: #cccc00; }\n\n.e24-shadow {\n  fill: #999900; }\n\n.e25-light {\n  fill: #ffff7f; }\n\n.e25-medium {\n  fill: #cccc65; }\n\n.e25-shadow {\n  fill: #99994c; }\n",""])},function(e,t,n){var r=n(101);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".gameBoard {\n  border: 2px solid #102542;\n  border-radius: 4px;\n  height: 80vmin;\n  background-image: url(/assets/paperTexture.jpg);\n  background-size: contain; }\n\n.unit {\n  pointer-events: none; }\n",""])},function(e,t,n){var r=n(103),o=n(131),i=n(44),a=n(133),l=n(134),c=n(137),s=n(38),u=n(138),L=n(140),f=n(141),p=n(142),d=n(27),h=n(147),y=n(148),m=n(154),_=n(10),v=n(41),g=n(156),x=n(3),b=n(158),S=n(9),w=1,T=2,A=4,B="[object Arguments]",M="[object Function]",k="[object GeneratorFunction]",j="[object Object]",C={};C[B]=C["[object Array]"]=C["[object ArrayBuffer]"]=C["[object DataView]"]=C["[object Boolean]"]=C["[object Date]"]=C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Map]"]=C["[object Number]"]=C[j]=C["[object RegExp]"]=C["[object Set]"]=C["[object String]"]=C["[object Symbol]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C["[object Error]"]=C[M]=C["[object WeakMap]"]=!1,e.exports=function e(t,n,O,N,P,E){var F,I=n&w,R=n&T,U=n&A;if(O&&(F=P?O(t,N,P,E):O(t)),void 0!==F)return F;if(!x(t))return t;var G=_(t);if(G){if(F=h(t),!I)return s(t,F)}else{var D=d(t),W=D==M||D==k;if(v(t))return c(t,I);if(D==j||D==B||W&&!P){if(F=R||W?{}:m(t),!I)return R?L(t,l(F,t)):u(t,a(F,t))}else{if(!C[D])return P?t:{};F=y(t,D,I)}}E||(E=new r);var V=E.get(t);if(V)return V;E.set(t,F),b(t)?t.forEach(function(r){F.add(e(r,n,O,r,t,E))}):g(t)&&t.forEach(function(r,o){F.set(o,e(r,n,O,o,t,E))});var H=U?R?p:f:R?keysIn:S,z=G?void 0:H(t);return o(z||t,function(r,o){z&&(r=t[o=r]),i(F,o,e(r,n,O,o,t,E))}),F}},function(e,t,n){var r=n(11),o=n(109),i=n(110),a=n(111),l=n(112),c=n(113);function s(e){var t=this.__data__=new r(e);this.size=t.size}s.prototype.clear=o,s.prototype.delete=i,s.prototype.get=a,s.prototype.has=l,s.prototype.set=c,e.exports=s},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(12),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},function(e,t,n){var r=n(12);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(12);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(12);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(11);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(11),o=n(25),i=n(118),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var l=n.__data__;if(!o||l.length<a-1)return l.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(l)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(34),o=n(115),i=n(3),a=n(43),l=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,u=c.toString,L=s.hasOwnProperty,f=RegExp("^"+u.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?f:l).test(a(e))}},function(e,t,n){var r,o=n(116),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(2)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(119),o=n(126),i=n(128),a=n(129),l=n(130);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(120),o=n(11),i=n(25);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(121),o=n(122),i=n(123),a=n(124),l=n(125);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(13);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(13),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(14);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(14);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(6),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(15),o=n(9);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(15),o=n(46);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(3),o=n(24),i=n(136),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var l in e)("constructor"!=l||!t&&a.call(e,l))&&n.push(l);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(2),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,l=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=l?l(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(21)(e))},function(e,t,n){var r=n(15),o=n(26);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t,n){var r=n(15),o=n(48);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(51),o=n(26),i=n(9);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(51),o=n(48),i=n(46);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(6)(n(2),"DataView");e.exports=r},function(e,t,n){var r=n(6)(n(2),"Promise");e.exports=r},function(e,t,n){var r=n(6)(n(2),"Set");e.exports=r},function(e,t,n){var r=n(6)(n(2),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(28),o=n(150),i=n(151),a=n(152),l=n(153),c="[object Boolean]",s="[object Date]",u="[object Map]",L="[object Number]",f="[object RegExp]",p="[object Set]",d="[object String]",h="[object Symbol]",y="[object ArrayBuffer]",m="[object DataView]",_="[object Float32Array]",v="[object Float64Array]",g="[object Int8Array]",x="[object Int16Array]",b="[object Int32Array]",S="[object Uint8Array]",w="[object Uint8ClampedArray]",T="[object Uint16Array]",A="[object Uint32Array]";e.exports=function(e,t,n){var B=e.constructor;switch(t){case y:return r(e);case c:case s:return new B(+e);case m:return o(e,n);case _:case v:case g:case x:case b:case S:case w:case T:case A:return l(e,n);case u:return new B;case L:case d:return new B(e);case f:return i(e);case p:return new B;case h:return a(e)}}},function(e,t,n){var r=n(2).Uint8Array;e.exports=r},function(e,t,n){var r=n(28);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(20),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var r=n(28);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(155),o=n(50),i=n(24);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(3),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var r=n(157),o=n(22),i=n(23),a=i&&i.isMap,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(27),o=n(7),i="[object Map]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(159),o=n(22),i=n(23),a=i&&i.isSet,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(27),o=n(7),i="[object Set]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(161);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"h1 {\n  color: #102542;\n  font-size: 84px;\n  text-shadow: 5px 5px 0px #546A7B;\n  text-align: center; }\n",""])},function(e,t,n){var r=n(163);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(4)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Notable|Arvo&display=swap);",""]),t.push([e.i,".formBox {\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 20px;\n  padding: 24px;\n  background-color: #4972AB;\n  color: #EFEFEF;\n  letter-spacing: 2px;\n  box-shadow: 5px 5px 0px #102542;\n  margin: auto; }\n  .formBox input[type=submit] {\n    width: 50%;\n    font-size: 12px;\n    font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    letter-spacing: 1px; }\n\na {\n  color: #EFEFEF; }\n",""])},function(e,t,n){var r=n(165);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"body {\n  background-color: #EFEFEF; }\n\n.page {\n  display: flex;\n  align-items: center;\n  align-content: flex-start;\n  flex-direction: column;\n  padding: 56px;\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif; }\n\ninput, button {\n  font-family: 'Arvo', Calibri, sans-serif;\n  color: #102542;\n  font-size: 18px;\n  height: 24px;\n  border-radius: 3px;\n  background-color: #EFEFEF;\n  margin: 10px 0px;\n  box-sizing: border-box;\n  text-align: center; }\n",""])},function(e,t,n){var r=n(167);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"",""])},function(e,t,n){"use strict";n.r(t);var r=function(){},o={},i=[],a=[];function l(e,t){var n,l,c,s,u=a;for(s=arguments.length;s-- >2;)i.push(arguments[s]);for(t&&null!=t.children&&(i.length||i.push(t.children),delete t.children);i.length;)if((l=i.pop())&&void 0!==l.pop)for(s=l.length;s--;)i.push(l[s]);else"boolean"==typeof l&&(l=null),(c="function"!=typeof e)&&(null==l?l="":"number"==typeof l?l=String(l):"string"!=typeof l&&(c=!1)),c&&n?u[u.length-1]+=l:u===a?u=[l]:u.push(l),n=c;var L=new r;return L.nodeName=e,L.children=u,L.attributes=null==t?void 0:t,L.key=null==t?void 0:t.key,void 0!==o.vnode&&o.vnode(L),L}function c(e,t){for(var n in t)e[n]=t[n];return e}function s(e,t){null!=e&&("function"==typeof e?e(t):e.current=t)}var u="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;function L(e,t){return l(e.nodeName,c(c({},e.attributes),t),arguments.length>2?[].slice.call(arguments,2):e.children)}var f=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,p=[];function d(e){!e._dirty&&(e._dirty=!0)&&1==p.push(e)&&(o.debounceRendering||u)(h)}function h(){for(var e;e=p.pop();)e._dirty&&P(e)}function y(e,t){return e.normalizedNodeName===t||e.nodeName.toLowerCase()===t.toLowerCase()}function m(e){var t=c({},e.attributes);t.children=e.children;var n=e.nodeName.defaultProps;if(void 0!==n)for(var r in n)void 0===t[r]&&(t[r]=n[r]);return t}function _(e){var t=e.parentNode;t&&t.removeChild(e)}function v(e,t,n,r,o){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)s(n,null),s(r,e);else if("class"!==t||o)if("style"===t){if(r&&"string"!=typeof r&&"string"!=typeof n||(e.style.cssText=r||""),r&&"object"==typeof r){if("string"!=typeof n)for(var i in n)i in r||(e.style[i]="");for(var i in r)e.style[i]="number"==typeof r[i]&&!1===f.test(i)?r[i]+"px":r[i]}}else if("dangerouslySetInnerHTML"===t)r&&(e.innerHTML=r.__html||"");else if("o"==t[0]&&"n"==t[1]){var a=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),r?n||e.addEventListener(t,g,a):e.removeEventListener(t,g,a),(e._listeners||(e._listeners={}))[t]=r}else if("list"!==t&&"type"!==t&&!o&&t in e){try{e[t]=null==r?"":r}catch(e){}null!=r&&!1!==r||"spellcheck"==t||e.removeAttribute(t)}else{var l=o&&t!==(t=t.replace(/^xlink:?/,""));null==r||!1===r?l?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.removeAttribute(t):"function"!=typeof r&&(l?e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),r):e.setAttribute(t,r))}else e.className=r||""}function g(e){return this._listeners[e.type](o.event&&o.event(e)||e)}var x=[],b=0,S=!1,w=!1;function T(){for(var e;e=x.shift();)o.afterMount&&o.afterMount(e),e.componentDidMount&&e.componentDidMount()}function A(e,t,n,r,o,i){b++||(S=null!=o&&void 0!==o.ownerSVGElement,w=null!=e&&!("__preactattr_"in e));var a=B(e,t,n,r,i);return o&&a.parentNode!==o&&o.appendChild(a),--b||(w=!1,i||T()),a}function B(e,t,n,r,o){var i=e,a=S;if(null!=t&&"boolean"!=typeof t||(t=""),"string"==typeof t||"number"==typeof t)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=t&&(e.nodeValue=t):(i=document.createTextNode(t),e&&(e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0))),i.__preactattr_=!0,i;var l,c,s=t.nodeName;if("function"==typeof s)return function(e,t,n,r){var o=e&&e._component,i=o,a=e,l=o&&e._componentConstructor===t.nodeName,c=l,s=m(t);for(;o&&!c&&(o=o._parentComponent);)c=o.constructor===t.nodeName;o&&c&&(!r||o._component)?(N(o,s,3,n,r),e=o.base):(i&&!l&&(E(i),e=a=null),o=C(t.nodeName,s,n),e&&!o.nextBase&&(o.nextBase=e,a=null),N(o,s,1,n,r),e=o.base,a&&e!==a&&(a._component=null,M(a,!1)));return e}(e,t,n,r);if(S="svg"===s||"foreignObject"!==s&&S,s=String(s),(!e||!y(e,s))&&(l=s,(c=S?document.createElementNS("http://www.w3.org/2000/svg",l):document.createElement(l)).normalizedNodeName=l,i=c,e)){for(;e.firstChild;)i.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0)}var u=i.firstChild,L=i.__preactattr_,f=t.children;if(null==L){L=i.__preactattr_={};for(var p=i.attributes,d=p.length;d--;)L[p[d].name]=p[d].value}return!w&&f&&1===f.length&&"string"==typeof f[0]&&null!=u&&void 0!==u.splitText&&null==u.nextSibling?u.nodeValue!=f[0]&&(u.nodeValue=f[0]):(f&&f.length||null!=u)&&function(e,t,n,r,o){var i,a,l,c,s,u=e.childNodes,L=[],f={},p=0,d=0,h=u.length,m=0,v=t?t.length:0;if(0!==h)for(var g=0;g<h;g++){var x=u[g],b=x.__preactattr_,S=v&&b?x._component?x._component.__key:b.key:null;null!=S?(p++,f[S]=x):(b||(void 0!==x.splitText?!o||x.nodeValue.trim():o))&&(L[m++]=x)}if(0!==v)for(var g=0;g<v;g++){c=t[g],s=null;var S=c.key;if(null!=S)p&&void 0!==f[S]&&(s=f[S],f[S]=void 0,p--);else if(d<m)for(i=d;i<m;i++)if(void 0!==L[i]&&(w=a=L[i],A=o,"string"==typeof(T=c)||"number"==typeof T?void 0!==w.splitText:"string"==typeof T.nodeName?!w._componentConstructor&&y(w,T.nodeName):A||w._componentConstructor===T.nodeName)){s=a,L[i]=void 0,i===m-1&&m--,i===d&&d++;break}s=B(s,c,n,r),l=u[g],s&&s!==e&&s!==l&&(null==l?e.appendChild(s):s===l.nextSibling?_(l):e.insertBefore(s,l))}var w,T,A;if(p)for(var g in f)void 0!==f[g]&&M(f[g],!1);for(;d<=m;)void 0!==(s=L[m--])&&M(s,!1)}(i,f,n,r,w||null!=L.dangerouslySetInnerHTML),function(e,t,n){var r;for(r in n)t&&null!=t[r]||null==n[r]||v(e,r,n[r],n[r]=void 0,S);for(r in t)"children"===r||"innerHTML"===r||r in n&&t[r]===("value"===r||"checked"===r?e[r]:n[r])||v(e,r,n[r],n[r]=t[r],S)}(i,t.attributes,L),S=a,i}function M(e,t){var n=e._component;n?E(n):(null!=e.__preactattr_&&s(e.__preactattr_.ref,null),!1!==t&&null!=e.__preactattr_||_(e),k(e))}function k(e){for(e=e.lastChild;e;){var t=e.previousSibling;M(e,!0),e=t}}var j=[];function C(e,t,n){var r,o=j.length;for(e.prototype&&e.prototype.render?(r=new e(t,n),F.call(r,t,n)):((r=new F(t,n)).constructor=e,r.render=O);o--;)if(j[o].constructor===e)return r.nextBase=j[o].nextBase,j.splice(o,1),r;return r}function O(e,t,n){return this.constructor(e,n)}function N(e,t,n,r,i){e._disable||(e._disable=!0,e.__ref=t.ref,e.__key=t.key,delete t.ref,delete t.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||i?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(t,r)),r&&r!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=r),e.prevProps||(e.prevProps=e.props),e.props=t,e._disable=!1,0!==n&&(1!==n&&!1===o.syncComponentUpdates&&e.base?d(e):P(e,1,i)),s(e.__ref,e))}function P(e,t,n,r){if(!e._disable){var i,a,l,s=e.props,u=e.state,L=e.context,f=e.prevProps||s,p=e.prevState||u,d=e.prevContext||L,h=e.base,y=e.nextBase,_=h||y,v=e._component,g=!1,S=d;if(e.constructor.getDerivedStateFromProps&&(u=c(c({},u),e.constructor.getDerivedStateFromProps(s,u)),e.state=u),h&&(e.props=f,e.state=p,e.context=d,2!==t&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(s,u,L)?g=!0:e.componentWillUpdate&&e.componentWillUpdate(s,u,L),e.props=s,e.state=u,e.context=L),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!g){i=e.render(s,u,L),e.getChildContext&&(L=c(c({},L),e.getChildContext())),h&&e.getSnapshotBeforeUpdate&&(S=e.getSnapshotBeforeUpdate(f,p));var w,B,k=i&&i.nodeName;if("function"==typeof k){var j=m(i);(a=v)&&a.constructor===k&&j.key==a.__key?N(a,j,1,L,!1):(w=a,e._component=a=C(k,j,L),a.nextBase=a.nextBase||y,a._parentComponent=e,N(a,j,0,L,!1),P(a,1,n,!0)),B=a.base}else l=_,(w=v)&&(l=e._component=null),(_||1===t)&&(l&&(l._component=null),B=A(l,i,L,n||!h,_&&_.parentNode,!0));if(_&&B!==_&&a!==v){var O=_.parentNode;O&&B!==O&&(O.replaceChild(B,_),w||(_._component=null,M(_,!1)))}if(w&&E(w),e.base=B,B&&!r){for(var F=e,I=e;I=I._parentComponent;)(F=I).base=B;B._component=F,B._componentConstructor=F.constructor}}for(!h||n?x.push(e):g||(e.componentDidUpdate&&e.componentDidUpdate(f,p,S),o.afterUpdate&&o.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);b||r||T()}}function E(e){o.beforeUnmount&&o.beforeUnmount(e);var t=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var n=e._component;n?E(n):t&&(null!=t.__preactattr_&&s(t.__preactattr_.ref,null),e.nextBase=t,_(t),j.push(e),k(t)),s(e.__ref,null)}function F(e,t){this._dirty=!0,this.context=t,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function I(e,t,n){return A(n,e,{},!1,t,!1)}c(F.prototype,{setState:function(e,t){this.prevState||(this.prevState=this.state),this.state=c(c({},this.state),"function"==typeof e?e(this.state,this.props):e),t&&this._renderCallbacks.push(t),d(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),P(this,2)},render:function(){}});var R={};function U(e,t){for(var n in t)e[n]=t[n];return e}function G(e,t){return e.rank<t.rank?1:e.rank>t.rank?-1:e.index-t.index}function D(e,t){return e.index=t,e.rank=function(e){return e.attributes.default?0:(t=e.attributes.path,W(t).map(V).join(""));var t}(e),e.attributes}function W(e){return e.replace(/(^\/+|\/+$)/g,"").split("/")}function V(e){return":"==e.charAt(0)?1+"*+?".indexOf(e.charAt(e.length-1))||4:5}var H=null,z=[],$=[],K={};function q(){var e;return""+((e=H&&H.location?H.location:H&&H.getCurrentLocation?H.getCurrentLocation():"undefined"!=typeof location?location:K).pathname||"")+(e.search||"")}function Y(e,t){return void 0===t&&(t=!1),"string"!=typeof e&&e.url&&(t=e.replace,e=e.url),function(e){for(var t=z.length;t--;)if(z[t].canRoute(e))return!0;return!1}(e)&&function(e,t){void 0===t&&(t="push"),H&&H[t]?H[t](e):"undefined"!=typeof history&&history[t+"State"]&&history[t+"State"](null,null,e)}(e,t?"replace":"push"),J(e)}function J(e){for(var t=!1,n=0;n<z.length;n++)!0===z[n].routeTo(e)&&(t=!0);for(var r=$.length;r--;)$[r](e);return t}function X(e){if(e&&e.getAttribute){var t=e.getAttribute("href"),n=e.getAttribute("target");if(t&&t.match(/^\//g)&&(!n||n.match(/^_?self$/i)))return Y(t)}}function Q(e){if(0==e.button)return X(e.currentTarget||e.target||this),Z(e)}function Z(e){return e&&(e.stopImmediatePropagation&&e.stopImmediatePropagation(),e.stopPropagation&&e.stopPropagation(),e.preventDefault()),!1}function ee(e){if(!(e.ctrlKey||e.metaKey||e.altKey||e.shiftKey||0!==e.button)){var t,n=e.target;do{if("A"===String(n.nodeName).toUpperCase()&&n.getAttribute("href")&&(null!=(t=n).__preactattr_||"undefined"!=typeof Symbol&&null!=t[Symbol.for("preactattr")])){if(n.hasAttribute("native"))return;if(X(n))return Z(e)}}while(n=n.parentNode)}}var te=!1;var ne=function(e){function t(t){e.call(this,t),t.history&&(H=t.history),this.state={url:t.url||q()},te||("function"==typeof addEventListener&&(H||addEventListener("popstate",function(){J(q())}),addEventListener("click",ee)),te=!0)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.shouldComponentUpdate=function(e){return!0!==e.static||(e.url!==this.props.url||e.onChange!==this.props.onChange)},t.prototype.canRoute=function(e){return this.getMatchingChildren(this.props.children,e,!1).length>0},t.prototype.routeTo=function(e){return this._didRoute=!1,this.setState({url:e}),this.updating?this.canRoute(e):(this.forceUpdate(),this._didRoute)},t.prototype.componentWillMount=function(){z.push(this),this.updating=!0},t.prototype.componentDidMount=function(){var e=this;H&&(this.unlisten=H.listen(function(t){e.routeTo(""+(t.pathname||"")+(t.search||""))})),this.updating=!1},t.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),z.splice(z.indexOf(this),1)},t.prototype.componentWillUpdate=function(){this.updating=!0},t.prototype.componentDidUpdate=function(){this.updating=!1},t.prototype.getMatchingChildren=function(e,t,n){return e.filter(D).sort(G).map(function(e){var r=function(e,t,n){var r,o=/(?:\?([^#]*))?(#.*)?$/,i=e.match(o),a={};if(i&&i[1])for(var l=i[1].split("&"),c=0;c<l.length;c++){var s=l[c].split("=");a[decodeURIComponent(s[0])]=decodeURIComponent(s.slice(1).join("="))}e=W(e.replace(o,"")),t=W(t||"");for(var u=Math.max(e.length,t.length),L=0;L<u;L++)if(t[L]&&":"===t[L].charAt(0)){var f=t[L].replace(/(^\:|[+*?]+$)/g,""),p=(t[L].match(/[+*?]+$/)||R)[0]||"",d=~p.indexOf("+"),h=~p.indexOf("*"),y=e[L]||"";if(!y&&!h&&(p.indexOf("?")<0||d)){r=!1;break}if(a[f]=decodeURIComponent(y),d||h){a[f]=e.slice(L).map(decodeURIComponent).join("/");break}}else if(t[L]!==e[L]){r=!1;break}return(!0===n.default||!1!==r)&&a}(t,e.attributes.path,e.attributes);if(r){if(!1!==n){var o={url:t,matches:r};return U(o,r),delete o.ref,delete o.key,L(e,o)}return e}}).filter(Boolean)},t.prototype.render=function(e,t){var n=e.children,r=e.onChange,o=t.url,i=this.getMatchingChildren(n,o,!0),a=i[0]||null;this._didRoute=!!a;var l=this.previousUrl;return o!==l&&(this.previousUrl=o,"function"==typeof r&&r({router:this,url:o,previous:l,active:i,current:a})),a},t}(F),re=function(e){return l("a",U({onClick:Q},e))};ne.subscribers=$,ne.getCurrentUrl=q,ne.route=Y,ne.Router=ne,ne.Route=function(e){return l(e.component,e)},ne.Link=re;var oe=ne,ie=n(0),ae=n.n(ie);var le,ce=function(e,t){return e.then(function(e){return[null,e]}).catch(function(e){return t&&Object.assign(e,t),[e,void 0]})},se=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},ue=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Le=function(){return se(void 0,void 0,void 0,function(){var e,t,n;return ue(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.get("/api/auth"))];case 1:return e=r.sent(),t=e[0],n=e[1],console.log(n),t?[2,null]:[2,n.data.userID]}})})},fe=n(52),pe=n.n(fe),de=n(53),he=n.n(de),ye=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},me=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},_e=function(){return ye(void 0,void 0,void 0,function(){var e,t,n,r,o;return me(this,function(i){switch(i.label){case 0:return console.log("Creating a new game..."),[4,ce(ae.a.post("/api/game"))];case 1:return e=i.sent(),t=e[0],n=e[1],t?[2,t]:(r=n.data,o=he()(pe()(1,25)).map(function(e){return e.toString().padStart(2,"0")}),[4,Promise.all([ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd85783c26513e12f695ce2",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd8988c463115ffdbc672b3",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c5b63ca37c488983f92",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c7563ca37c488983f93",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c9663ca37c488983f94",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cbd63ca37c488983f95",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cd263ca37c488983f96",colour:"e"+o.pop()})])]);case 2:return i.sent(),[4,ae.a.post("/api/game/"+r.id+"/start")];case 3:return i.sent(),[4,ae.a.get("/api/game/"+r.id)];case 4:return[2,i.sent()]}})})},ve=function(){function e(e,t,n,r,o){Object.assign(this,{unit:e,from:t,to:n,moveType:r,supportFrom:o})}return e.from=function(t){return new e("",t.from,t.to,t.moveType,t.supportFrom)},e.prototype.toObject=function(){return{unit:this.unit,moveType:this.moveType,from:this.from,to:this.to,supportFrom:this.supportFrom,wasSuccessful:this.wasSuccessful}},e}(),ge={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},xe=function(){function e(e,t,n,r){var o=this;this.draw=function(e){e&&(o.turn=e),o.turn.players.forEach(function(e){o.colourTerritories(e.ownedTerritories,e.empire,e.colour),o.drawMoves(e.moves.map(ve.from)),o.drawUnits(e.ownedUnits,e.empire,e.colour)})},this.reset=function(){o.turn.players.forEach(function(e){return o.colourTerritories(e.ownedTerritories,"unowned")}),o.removeOrders(),o.removeUnits()},this.redraw=function(){o.reset(),o.draw()},this.redrawOrders=function(e){o.removeOrders(),o.drawMoves(e)},this.colourTerritories=function(e,t,n){e.forEach(function(e){return o.setOwnership(e,t,n)})},this.drawMoves=function(e){e.forEach(function(e){return o.drawOrder(e)})},this.setOwnership=function(e,t,n){Array.from(o.board.getElementsByClassName(e)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(n+"-light")})},this.drawUnit=function(e,t,n){var r=("Army"===e.unitType?o.army:o.fleet).cloneNode(!0),i=ge[e.location];r.setAttribute("class","unit "+e.unitType+" "+e.location+" "+t),r.setAttribute("x",(i.x-13).toString()),r.setAttribute("y",(i.y-18).toString());["light","medium","shadow"].forEach(function(e){Array.from(r.getElementsByClassName(e)).forEach(function(t){t.setAttribute("class",n+"-"+e)})}),o.board.appendChild(r)},this.drawOrder=function(e){o.drawLine(ge[e.from],ge[e.to])},this.drawLine=function(e,t){var n=document.createElementNS("http://www.w3.org/2000/svg","path");n.setAttribute("d","M "+e.x+" "+e.y+" L "+t.x+" "+t.y),n.setAttribute("stroke","green"),n.setAttribute("class","order"),n.style.strokeWidth="2px",n.style.markerEnd="url(#triangle)",o.board.appendChild(n)},this.removeOrders=function(){Array.from(o.board.getElementsByClassName("order")).forEach(function(e){return e.remove()})},this.removeUnits=function(){Array.from(o.board.getElementsByClassName("unit")).forEach(function(e){return e.remove()})},this.board=e,this.turn=t,this.army=n,this.fleet=r,this.draw()}return e.prototype.drawUnits=function(e,t,n){var r=this;e.forEach(function(e){return r.drawUnit(e,t,n)})},e}(),be={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Serbia","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople","Smyrna"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Rome","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna","Syria"],Belgium:["English_Channel","North_Sea","Burgundy","Holland","Picardy","Ruhr"],Berlin:["Baltic_Sea","Kiel","Munich","Prussia","Silesia"],Bohemia:["Galicia","Munich","Silesia","Tyrolia","Vienna"],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Paris","Picardy"],Budapest:["Galicia","Rumania","Serbia","Trieste","Vienna"],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece","Serbia"],Burgundy:["Belgium","Gascony","Marseilles","Munich","Paris","Picardy","Ruhr"],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Liverpool","Yorkshire"],Finland:["Gulf_of_Bothnia","Norway","St_Petersburg__nc","St_Petersburg__sc","Sweden"],Galicia:["Bohemia","Budapest","Rumania","Silesia","Ukraine","Vienna","Warsaw"],Gascony:["Mid_Atlantic_Ocean","Brest","Burgundy","Marseilles","Paris","Spain__nc","Spain__sc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc","Serbia"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Munich","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Edinburgh","Wales","Yorkshire"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Moscow","Prussia","St_Petersburg__sc","Warsaw"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Burgundy","Gascony","Piedmont","Spain__sc"],Moscow:["Livonia","Sevastopol","St_Petersburg__nc","St_Petersburg__sc","Ukraine","Warsaw"],Munich:["Berlin","Bohemia","Burgundy","Kiel","Ruhr","Silesia","Tyrolia"],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden"],Paris:["Brest","Burgundy","Gascony","Picardy"],Picardy:["English_Channel","Belgium","Brest","Burgundy","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Tyrolia","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia","Silesia","Warsaw"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Burgundy","Holland","Kiel","Munich"],Rumania:["Black_Sea","Budapest","Galicia","Serbia","Sevastopol","Ukraine"],Serbia:["Albania","Budapest","Bulgaria__sc","Greece","Rumania","Trieste"],Sevastopol:["Black_Sea","Armenia","Moscow","Rumania","Ukraine"],Silesia:["Berlin","Bohemia","Galicia","Munich","Prussia","Warsaw"],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal","Spain__sc"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal","Spain__nc"],St_Petersburg__nc:["Barents_Sea","Finland","Moscow","St_Petersburg__sc"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia","Moscow","St_Petersburg__nc"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Budapest","Serbia","Tyrolia","Venice","Vienna"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:["Bohemia","Munich","Piedmont","Trieste","Venice","Vienna"],Ukraine:["Galicia","Moscow","Rumania","Sevastopol","Warsaw"],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany","Tyrolia"],Vienna:["Bohemia","Budapest","Galicia","Trieste","Tyrolia"],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:["Galicia","Livonia","Moscow","Prussia","Silesia","Ukraine"],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},Se={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna"],Belgium:["English_Channel","North_Sea","Holland","Picardy"],Berlin:["Baltic_Sea","Kiel","Prussia"],Bohemia:[],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Picardy"],Budapest:[],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece"],Burgundy:[],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Yorkshire"],Finland:["Gulf_of_Bothnia","St_Petersburg__sc","Sweden"],Galicia:[],Gascony:["Mid_Atlantic_Ocean","Brest","Spain__nc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Wales"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Prussia","St_Petersburg__sc"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Gascony","Piedmont","Spain__sc"],Moscow:[],Munich:[],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden","St_Petersburg__nc"],Paris:[],Picardy:["English_Channel","Belgium","Brest","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Holland","Kiel"],Rumania:["Black_Sea","Sevastopol"],Serbia:[],Sevastopol:["Black_Sea","Armenia","Rumania"],Silesia:[],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal"],St_Petersburg__nc:["Barents_Sea","Norway"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Venice"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:[],Ukraine:[],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany"],Vienna:[],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:[],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},we={movement:["Move","support","hold"],retreat:["retreat"],build:["build","disband"]},Te=function(e,t,n){var r,o=function(e){return function(t){return e.players.find(function(e){return e.playerID===t})}}(e)(n);if(!o)return console.log("Player not found"),!1;if(!(r=o,function(e){return r.ownedUnits.find(function(t){return t.location===e})})(t.from))return console.log("Unit not found"),!1;if(!(we[e.info.phase]||[]).includes(t.moveType))return console.log("not included",t.moveType),console.log("turn.info.phase: "+e.info.phase),!1;var i,a=(i=t.unit,function(e){return function(t){var n="Army"===i?be:Se;return console.log("inside areAdjacent..."),console.log(i,n),n[e].includes(t)}})(t.to);switch(t.moveType){case"Move":return!!a(t.from)||(console.log("is not adjacent"),!1);case"support":return!!a(t.from)&&!!a(t.supportFrom);case"retreat":return!!a(t.from);case"hold":case"disband":return!0}return!1},Ae=new(function(){return function(){var e=this;this.orders=[],this.units={},this.run=function(){},this.setup=function(t,n,r){e.mapSvg=t.map,e.armySvg=t.army,e.fleetSvg=t.fleet,e.turn=n,e.playerID=r,e.playerEmpire=e.turn.players.find(function(e){return e.playerID===r}).empire,console.log("playing as ",e.playerEmpire),e.turn.players.forEach(function(t){return e.units[t.empire]=t.ownedUnits}),e.boardPainter=new xe(e.mapSvg,n,e.armySvg,e.fleetSvg),e.orders=e.turn.players.find(function(e){return e.playerID===r}).moves.map(ve.from),e.boardPainter.redraw();var o=Array.from(e.mapSvg.getElementsByClassName("seaTile"));o.push.apply(o,Array.from(e.mapSvg.getElementsByClassName("landTile"))),o.forEach(function(t){t.addEventListener("click",function(n){e.onClick(t.getAttribute("title"))})}),Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(t){t.addEventListener("click",function(n){return e.onClick(t.classList[2])})})},this.clearMap=function(){e.mapSvg&&(Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(e){return e.remove()}),Array.from(e.mapSvg.getElementsByClassName("order")).forEach(function(e){return e.remove()}))},this.onClick=function(t){e.tileSelected&&be[e.tileSelected].includes(t)?(e.finishOrder(t),console.log("finishingOrder")):(console.log("startingOrder"),e.startOrder(t))},this.finishOrder=function(t){console.log(e.units[e.playerEmpire],e.tileSelected);var n=e.units[e.playerEmpire].find(function(t){return t.location===e.tileSelected});e.orders=e.orders.filter(function(t){return t.from!==e.tileSelected}),console.log(e.turn);var r=new ve(n.unitType,e.tileSelected,t,"Move");console.log(Te(e.turn,r.toObject(),e.playerID)),Te(e.turn,r.toObject(),e.playerID)&&(e.orders.push(r),e.boardPainter.redrawOrders(e.orders),e.tileSelected=null)},this.startOrder=function(t){e.playerHasUnitAt(t)&&(e.tileSelected=t)},this.playerHasUnitAt=function(t){return!!e.units[e.playerEmpire].find(function(e){return e.location===t})}}}()),Be=(n(95),{mapTitle:"Classic",viewBox:"0 0 609 559",territories:[{title:"Adriatic_Sea",tileType:"seaTile",id:"w",path:"M 322 480 L 297 456 L 300 453 L 290 453 L 278 443 L 272 424 L 260 417 L 261 401 L 270 398 L 276 399 L 275 403 L 278 410 L 282 401 L 286 402 L 289 418 L 306 436 L 331 454 L 331 477 L 335 480 L 322 480",textLocation:{x:"280",y:"427"}},{title:"Aegean_Sea",tileType:"seaTile",id:"w",path:"M 376 537 L 371 520 L 378 521 L 377 513 L 386 516 L 385 509 L 370 494 L 371 491 L 378 494 L 368 483 L 371 477 L 379 484 L 382 483 L 381 477 L 386 478 L 380 472 L 392 472 L 400 468 L 408 470 L 410 473 L 414 475       L 410 482 L 409 487 L 417 486 L 417 489 L 420 495 L 417 498 L 417 507 L 423 510 L 427 524 L 435 523 L 435 530 L 416 549 L 412 547 L 387 546 L 383 544 L 376 537",textLocation:{x:"394",y:"510"}},{title:"Baltic_Sea",tileType:"seaTile",id:"w",path:"M 266 255 L 271 260 L 278 254 L 277 250 L 280 248 L 279 243 L 282 253 L 289 254 L 294 245 L 305 244 L 312 229 L 311 220 L 359 220 L 349 229 L 347 243 L 347 248 L 348 254 L 344 262 L 337 264 L 334 273 L 328 274       L 326 265 L 314 266 L 307 273 L 294 275 L 286 274 L 287 267 L 280 266 L 266 275 L 261 274 L 260 269 L 256 266 L 256 263 L 254 255 L 266 255",textLocation:{x:"300",y:"257"}},{title:"Barents_Sea",tileType:"seaTile",id:"w",path:"M 540 0 L 535 9 L 530 6 L 517 19 L 516 33 L 513 38 L 513 23 L 507 20 L 505 26 L 499 33 L 492 48 L 495 58 L 488 60 L 479 57 L 477 55 L 481 50 L 473 43 L 466 45 L 472 62 L 478 66 L 478 74 L 472 72 L 468 74 L 457 91       L 469 100 L 467 106 L 462 109 L 444 101 L 442 110 L 447 115 L 454 119 L 452 122 L 434 118 L 426 103 L 426 94 L 414 88 L 412 83 L 445 84 L 457 79 L 459 66 L 453 61 L 417 47 L 405 49 L 401 45 L 397 48 L 391 47 L 395 41 L 394 38 L 384 33 L 382 40       L 380 33 L 377 31 L 374 38 L 371 33 L 366 42 L 366 33 L 362 33 L 362 0 L 540 0",textLocation:{x:"440",y:"15"}},{title:"Black_Sea",tileType:"seaTile",id:"w",path:"M 440 458 L 430 455 L 426 450 L 422 441 L 425 427 L 429 426 L 430 423 L 432 409 L 439 404 L 438 397 L 446 378 L 459 375 L 461 377 L 459 379 L 465 383 L 476 381 L 478 383 L 472 385 L 468 392 L 477 396 L 477 401       L 486 404 L 488 397 L 494 396 L 497 392 L 507 389 L 506 384 L 494 387 L 485 378 L 503 364 L 526 351 L 527 354 L 514 365 L 517 371 L 520 371 L 515 384 L 511 383 L 510 386 L 517 393 L 528 394 L 554 406 L 567 408 L 573 417 L 570 427 L 555 438       L 551 437 L 520 441 L 514 438 L 511 440 L 502 433 L 481 438 L 470 447 L 464 457 L 442 460 L 440 458",textLocation:{x:"480",y:"420"}},{title:"Eastern_Mediterranean",tileType:"seaTile",id:"w",path:"M 435 530 L 441 526 L 447 528 L 453 534 L 464 531 L 466 521 L 475 520 L 485 528 L 491 530 L 505 526 L 511 514 L 520 517 L 527 508 L 530 509 L 525 518 L 526 530 L 532 535 L 528 559 L 400 559 L 400 554 L 414 552 L 416 549 L 435 530",textLocation:{x:"435",y:"548"}},{title:"English_Channel",tileType:"seaTile",id:"w",path:"M 173 301 L 169 311 L 153 315 L 155 320 L 150 319 L 144 318 L 142 312 L 136 310 L 136 326 L 124 323 L 122 318 L 102 317 L 88 303 L 100 291 L 110 292 L 120 295 L 124 291 L 134 294 L 147 295 L 160 298 L 168 296 L 173 301",textLocation:{x:"105",y:"308"}},{title:"Gulf_of_Lyon",tileType:"seaTile",id:"w",path:"M 115 469 L 110 461 L 124 444 L 131 439 L 146 438 L 157 432 L 158 425 L 158 418 L 169 412 L 176 417 L 188 422 L 198 421 L 211 416 L 222 410 L 233 415 L 238 431 L 224 431 L 221 434 L 211 436 L 213 451 L 218 454       L 218 458 L 214 461 L 206 462 L 205 466 L 154 466 L 148 463 L 142 469 L 115 469",textLocation:{x:"160",y:"450"}},{title:"Gulf_of_Bothnia",tileType:"seaTile",id:"w",path:"M 311 220 L 314 209 L 322 206 L 328 203 L 331 193 L 326 183 L 320 182 L 321 161 L 330 146 L 343 138 L 351 128 L 347 121 L 349 112 L 355 104 L 362 107 L 368 108 L 372 120 L 366 121 L 359 136 L 345 151 L 347 160       L 350 165 L 348 178 L 349 184 L 357 186 L 365 191 L 384 185 L 402 177 L 403 183 L 411 184 L 414 187 L 408 187 L 400 192 L 399 197 L 387 196 L 371 198 L 369 202 L 365 204 L 368 210 L 372 213 L 373 221 L 377 227 L 373 229 L 366 228 L 359 220 L 311 220",textLocation:{x:"328",y:"175"}},{title:"Helgoland_Bight",tileType:"seaTile",id:"w",path:"M 245 237 L 243 247 L 244 254 L 243 257 L 245 263 L 244 270 L 244 273 L 235 277 L 234 274 L 230 273 L 226 275 L 211 274 L 211 237 L 245 237",textLocation:{x:"220",y:"265"}},{title:"Ionian_Sea",tileType:"seaTile",id:"w",path:"M 289 511 L 290 514 L 295 515 L 308 500 L 311 491 L 304 484 L 310 480 L 318 485 L 322 485 L 322 480 L 335 480 L 339 487 L 346 498 L 350 498 L 347 500 L 352 508 L 367 507 L 371 511 L 355 510 L 350 514 L 357 521       L 359 533 L 360 528 L 367 536 L 368 531 L 376 537 L 383 544 L 380 547 L 383 550 L 400 554 L 400 559 L 232 559 L 234 551 L 232 544 L 225 535 L 231 531 L 236 524 L 247 513 L 258 519 L 273 531 L 281 532 L 282 521 L 285 513 L 285 511 L 289 511",textLocation:{x:"305",y:"535"}},{title:"Irish_Sea",tileType:"seaTile",id:"w",path:"M 100 291 L 112 287 L 122 281 L 130 282 L 127 276 L 119 272 L 116 272 L 115 265 L 128 262 L 126 256 L 121 257 L 132 250 L 135 250 L 139 240 L 136 229 L 130 227 L 120 227 L 110 232 L 109 246 L 98 259 L 87 257       L 70 261 L 58 273 L 88 303 L 100 291",textLocation:{x:"80",y:"275"}},{title:"Mid_Atlantic_Ocean",tileType:"seaTile",id:"w",path:"M 102 317 L 100 322 L 103 328 L 109 329 L 123 344 L 122 350 L 123 357 L 128 363 L 121 382 L 122 384 L 112 399 L 101 396 L 96 397 L 72 384 L 59 381 L 54 375 L 48 374 L 46 378 L 39 375 L 33 381 L 35 384 L 32 396       L 30 406 L 17 427 L 14 427 L 10 433 L 13 440 L 15 441 L 12 450 L 13 454 L 8 462 L 19 469 L 27 468 L 33 475 L 34 484 L 37 490 L 37 495 L 33 496 L 17 518 L 0 520 L 0 273 L 58 273 L 102 317",textLocation:{x:"25",y:"345"}},{title:"North_Atlantic_Ocean",tileType:"seaTile",id:"w",path:"M 70 261 L 64 250 L 67 242 L 71 245 L 81 234 L 74 228 L 80 225 L 78 218 L 82 217 L 89 220 L 94 220 L 95 218 L 94 216 L 97 216 L 101 212 L 110 212 L 119 217 L 120 227 L 130 227 L 130 223 L 138 217 L 138 214       L 130 208 L 129 197 L 139 189 L 140 182 L 148 177 L 148 0 L 0 0 L 0 273 L 58 273 L 70 261",textLocation:{x:"40",y:"120"}},{title:"North_Sea",tileType:"seaTile",id:"w",path:"M 168 296 L 172 294 L 165 293 L 176 283 L 178 274 L 177 270 L 171 268 L 168 270 L 166 269 L 169 265 L 170 252 L 168 246 L 163 239 L 163 226 L 161 218 L 157 216 L 151 215 L 158 214 L 165 210 L 170 202 L 171 197 L 171 181       L 198 154 L 236 154 L 237 160 L 233 167 L 231 180 L 233 186 L 229 192 L 231 201 L 241 209 L 241 224 L 248 224 L 245 237 L 211 237 L 211 274 L 207 279 L 205 279 L 205 276 L 198 289 L 191 299 L 173 301 L 168 296",textLocation:{x:"190",y:"230"}},{title:"Norwegian_Sea",tileType:"seaTile",id:"w",path:"M 362 33 L 357 39 L 343 44 L 324 54 L 320 64 L 310 75 L 309 84 L 303 86 L 292 111 L 277 132 L 269 134 L 264 142 L 258 141 L 236 154 L 198 154 L 171 181 L 171 197 L 158 193 L 152 194 L 154 188 L 161 185 L 162 181       L 148 177 L 148 0 L 362 0 L 362 33",textLocation:{x:"220",y:"70"}},{title:"Skagerrak",tileType:"seaTile",id:"w",path:"M 241 209 L 246 210 L 266 201 L 270 193 L 275 203 L 277 218 L 276 224 L 282 236 L 279 240 L 279 243 L 275 242 L 269 243 L 266 240 L 267 234 L 266 221 L 263 223 L 248 224 L 241 224 L 241 209",textLocation:{x:"255",y:"220"}},{title:"Tyrrhenian_Sea",tileType:"seaTile",id:"w",path:"M 238 431 L 247 442 L 248 447 L 256 458 L 271 464 L 276 474 L 290 487 L 294 502 L 289 511 L 285 511 L 285 508 L 276 510 L 263 510 L 257 507 L 252 508 L 247 513 L 236 524 L 233 523 L 224 527 L 223 518       L 218 516 L 218 490 L 220 490 L 224 468 L 222 458 L 218 458 L 218 454 L 223 450 L 225 444 L 225 436 L 224 431 L 238 431",textLocation:{x:"230",y:"495"}},{title:"Western_Mediterranean",tileType:"seaTile",id:"w",path:"M 37 490 L 47 488 L 52 489 L 60 486 L 78 491 L 83 494 L 86 485 L 90 483 L 98 484 L 107 474 L 113 473 L 115 469 L 142 469 L 150 471 L 154 466 L 205 466 L 206 476 L 204 485 L 208 492 L 212 492 L 217 489 L 218 490       L 218 516 L 212 517 L 208 521 L 203 520 L 179 515 L 169 518 L 150 511 L 117 509 L 106 511 L 99 515 L 89 512 L 84 518 L 79 520 L 68 516 L 68 511 L 64 514 L 46 509 L 42 502 L 41 494 L 37 495 L 37 490",textLocation:{x:"110",y:"495"}},{title:"Switzerland",tileType:"landTile",id:"s",path:"M 209 363 L 208 367 L 194 382 L 197 385 L 203 379 L 207 386 L 213 387 L 221 385 L 227 390 L 229 385 L 243 388 L 245 384 L 241 378 L 234 374 L 234 366 L 232 363 L 225 362 L 222 365 L 209 363",textLocation:{x:"215",y:"378"}},{title:"Ireland",tileType:"landTile",id:"s",path:"M 70 261 L 64 250 L 67 242 L 71 245 L 81 234 L 74 228 L 80 225 L 78 218 L 82 217 L 89 220 L 94 220 L 95 218 L 94 216 L 97 216 L 101 212 L 110 212 L 119 217 L 120 227 L 120 227 L 110 232 L 109 246 L 98 259 L 87 257 L 70 261",textLocation:{x:"215",y:"378"}},{title:"Corsica",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Sardinia",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Mallorca",tileType:"landTile",id:"s",path:"M 154 466 L 148 463 L 142 469 L 150 471 L 154 466",textLocation:{x:"215",y:"378"}},{title:"Sicily",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Crete",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Albania",tileType:"landTile",id:"l Albania",path:"M 331 454 L 331 477 L 335 480 L 339 487 L 350 477 L 350 471 L 346 466 L 346 452 L 337 446 L 330 445 L 331 454",textLocation:{x:"337",y:"469"}},{title:"Ankara",tileType:"landTile",id:"l Ankara",path:"M 555 438 L 551 437 L 520 441 L 514 438 L 511 440 L 502 433 L 481 438 L 470 447 L 464 457 L 468 461 L 468 479 L 466 491 L 473 491 L 490 480 L 501 482 L 508 480 L 531 460 L 546 462 L 555 460 L 557 449 L 555 438",textLocation:{x:"510",y:"455"}},{title:"Apulia",tileType:"landTile",id:"l Apulia",path:"M 304 484 L 310 480 L 318 485 L 322 485 L 322 480 L 297 456 L 300 453 L 290 453 L 278 443 L 274 447 L 279 451 L 280 455 L 279 458 L 293 481 L 304 484",textLocation:{x:"282",y:"467"}},{title:"Armenia",tileType:"landTile",id:"l Armenia",path:"M 609 493 L 584 478 L 563 479 L 562 471 L 556 467 L 555 460 L 557 449 L 555 438 L 570 427 L 589 442 L 594 439 L 603 441 L 609 440 L 609 493",textLocation:{x:"572",y:"463"}},{title:"Belgium",tileType:"landTile",id:"l Belgium",path:"M 191 299 L 194 303 L 206 306 L 205 311 L 208 315 L 210 326 L 205 331 L 192 323 L 184 315 L 169 311 L 173 301 L 191 299",textLocation:{x:"192",y:"316"}},{title:"Berlin",tileType:"landTile",id:"l Berlin",path:"M 294 275 L 286 274 L 287 267 L 280 266 L 266 275 L 266 283 L 262 287 L 264 293 L 261 296 L 263 310 L 288 305 L 296 300 L 297 296 L 292 290 L 294 275",textLocation:{x:"272",y:"292"}},{title:"Bohemia",tileType:"landTile",id:"l Bohemia",path:"M 281 356 L 276 346 L 268 343 L 264 329 L 266 325 L 278 326 L 288 321 L 297 322 L 311 334 L 314 332 L 321 339 L 322 347 L 316 348 L 303 346 L 295 349 L 292 357 L 281 356",textLocation:{x:"278",y:"338"}},{title:"Brest",tileType:"landTile",id:"l Brest",path:"M 150 319 L 144 318 L 142 312 L 136 310 L 136 326 L 124 323 L 122 318 L 102 317 L 100 322 L 103 328 L 109 329 L 123 344 L 122 350 L 123 357 L 128 363 L 146 365 L 146 337 L 148 329 L 150 319",textLocation:{x:"130",y:"345"}},{title:"Budapest",tileType:"landTile",id:"l Budapest",path:"M 394 376 L 395 382 L 401 385 L 406 396 L 401 402 L 387 402 L 367 406 L 365 412 L 360 413 L 342 410 L 338 412 L 335 410 L 332 410 L 323 408 L 321 398 L 311 394 L 308 383 L 311 375 L 322 370 L 335 354 L 337 350       L 350 347 L 360 351 L 368 353 L 377 360 L 378 363 L 384 365 L 394 376",textLocation:{x:"350",y:"390"}},{title:"Bulgaria__ec",tileType:"landTile",id:"l",path:"M 413 464 L 412 454 L 420 451 L 426 450 L 422 441 L 425 427 L 429 426 L 430 423 L 422 420 L 410 420 L 404 422 L 398 427 L 390 425 L 382 427 L 375 423 L 370 425 L 367 421 L 365 425 L 368 433 L 371 438 L 413 464",textLocation:{x:"395",y:"443"}},{title:"Bulgaria__sc",tileType:"landTile",id:"l",path:"M 371 438 L 366 439 L 371 456 L 365 461 L 369 464 L 376 464 L 388 460 L 392 472 L 400 468 L 408 470 L 413 464 L 371 438"},{title:"Burgundy",tileType:"landTile",id:"l Burgundy",path:"M 192 323 L 205 331 L 204 338 L 211 346 L 213 352 L 209 363 L 208 367 L 194 382 L 178 381 L 178 390 L 173 396 L 168 395 L 163 387 L 165 383 L 158 380 L 156 374 L 165 365 L 185 344 L 188 332 L 192 323",textLocation:{x:"171",y:"371"}},{title:"Clyde",tileType:"landTile",id:"l Clyde",path:"M 138 214 L 130 208 L 129 197 L 139 189 L 140 182 L 148 177 L 162 181 L 161 185 L 154 188 L 152 194 L 146 200 L 144 213 L 138 214",textLocation:{x:"133",y:"201"}},{title:"Constantinople",tileType:"landTile",id:"l Constantinople",path:"M 408 470 L 410 473 L 414 475 L 410 482 L 409 487 L 417 486 L 417 489 L 423 487 L 432 493 L 452 495 L 466 491 L 468 479 L 468 461 L 464 457 L 442 460 L 440 458 L 430 455 L 426 450 L 420 451 L 412 454 L 413 464 L 408 470",textLocation:{x:"410",y:"483"}},{title:"Denmark",tileType:"landTile",id:"l Denmark",path:"M 279 243 L 275 242 L 269 243 L 266 240 L 267 234 L 266 221 L 263 223 L 248 224 L 245 237 L 243 247 L 244 254 L 254 255 L 266 255 L 271 260 L 278 254 L 277 250 L 280 248  L 279 243",textLocation:{x:"252",y:"235"}},{title:"Edinburgh",tileType:"landTile",id:"l Edinburgh",path:"M 152 194 L 158 193 L 171 197 L 170 202 L 165 210 L 158 214 L 151 215 L 157 216 L 161 218 L 163 226 L 155 228 L 145 217 L 144 213 L 146 200 L 152 194",textLocation:{x:"158",y:"209"}},{title:"Finland",tileType:"landTile",id:"l Finland",path:"M 362 107 L 368 108 L 372 120 L 366 121 L 359 136 L 345 151 L 347 160 L 350 165 L 348 178 L 349 184 L 357 186 L 365 191 L 384 185 L 402 177 L 412 161 L 410 152 L 414 147 L 410 130 L 402 118 L 401 110 L 392 92       L 393 73 L 387 68 L 388 61 L 386 58 L 388 54 L 379 48 L 370 49 L 369 61 L 355 62 L 346 54 L 342 61 L 356 71 L 362 107",textLocation:{x:"375",y:"160"}},{title:"Galicia",tileType:"landTile",id:"l Galicia",path:"M 333 330 L 341 330 L 344 332 L 353 327 L 356 323 L 361 324 L 367 329 L 374 327 L 379 324 L 383 327 L 385 332 L 399 338 L 404 354 L 403 360 L 404 371 L 394 376 L 384 365 L 378 363 L 377 360 L 368 353 L 360 351       L 350 347 L 337 350 L 329 346 L 322 347 L 321 339 L 322 347 L 321 339 L 325 340 L 329 338 L 333 330",textLocation:{x:"355",y:"343"}},{title:"Gascony",tileType:"landTile",id:"l Gascony",path:"M 128 363 L 121 382 L 122 384 L 112 399 L 113 407 L 123 412 L 134 417 L 135 414 L 142 417 L 149 403 L 157 397 L 168 395 L 163 387 L 165 383 L 158 380 L 156 374 L 149 372 L 146 365 L 128 363",textLocation:{x:"130",y:"390"}},{title:"Greece",tileType:"landTile",id:"l Greece",path:"M 339 487 L 346 498 L 350 498 L 347 500 L 352 508 L 367 507 L 371 511 L 355 510 L 350 514 L 357 521 L 359 533 L 360 528 L 367 536 L 368 531 L 376 537 L 371 520 L 378 521 L 377 513 L 386 516 L 385 509 L 370 494       L 371 491 L 378 494 L 368 483 L 371 477 L 379 484 L 382 483 L 381 477 L 386 478 L 380 472 L 392 472 L 388 460 L 376 464 L 369 464 L 361 467 L 356 471 L 350 471 L 350 477 L 339 487",textLocation:{x:"346",y:"491"}},{title:"Holland",tileType:"landTile",id:"l Holland",path:"M 226 275 L 227 280 L 225 292 L 220 298 L 215 297 L 213 302 L 210 313 L 208 315 L 205 311 L 206 306 L 194 303 L 191 299 L 198 289 L 205 276 L 205 279 L 207 279 L 211 274 L 226 275",textLocation:{x:"210",y:"295"}},{title:"Kiel",tileType:"landTile",id:"l Kiel",path:"M 244 254 L 243 257 L 245 263 L 244 270 L 244 273 L 235 277 L 234 274 L 230 273 L 226 275 L 227 280 L 225 292 L 220 298 L 215 297 L 213 302 L 232 308 L 241 316 L 243 322 L 263 310 L 261 296 L 264 293       L 262 287 L 266 283 L 266 275 L 261 274 L 260 269 L 256 266 L 256 263 L 254 255 L 244 254",textLocation:{x:"237",y:"285"}},{title:"Liverpool",tileType:"landTile",id:"l Liverpool",path:"M 128 262 L 126 256 L 121 257 L 132 250 L 135 250 L 139 240 L 136 229 L 130 227 L 130 223 L 138 217 L 138 214 L 144 213 L 145 217 L 155 228 L 155 239 L 151 248 L 150 264 L 143 262 L 128 262",textLocation:{x:"140",y:"230"}},{title:"Livonia",tileType:"landTile",id:"l Livonia",path:"M 369 202 L 365 204 L 368 210 L 372 213 L 373 221 L 377 227 L 373 229 L 366 228 L 359 220 L 349 229 L 347 243 L 354 251 L 356 261 L 362 260 L 367 265 L 365 281 L 372 283 L 379 290 L 389 285 L 392 278       L 404 275 L 405 239 L 409 228 L 405 217 L 394 205 L 382 206 L 372 205 L 369 202",textLocation:{x:"370",y:"250"}},{title:"London",tileType:"landTile",id:"l London",path:"M 166 269 L 168 270 L 171 268 L 177 270 L 178 274 L 176 283 L 165 293 L 172 294 L 168 296 L 160 298 L 147 295 L 145 281 L 150 277 L 153 271 L 166 269",textLocation:{x:"160",y:"280"}},{title:"Marseilles",tileType:"landTile",id:"l Marseilles",path:"M 142 417 L 149 403 L 157 397 L 168 395 L 173 396 L 178 390 L 178 381 L 194 382 L 197 385 L 203 379 L 207 386 L 204 390 L 207 396 L 201 399 L 204 402 L 203 410 L 211 416 L 198 421 L 188 422 L 176 417       L 169 412 L 158 418 L 158 425 L 154 427 L 142 417",textLocation:{x:"165",y:"410"}},{title:"Moscow",tileType:"landTile",id:"l Moscow",path:"M 609 117 L 598 132 L 573 143 L 564 159 L 534 164 L 515 169 L 489 184 L 476 183 L 458 194 L 456 207 L 457 210 L 451 213 L 447 209 L 439 211 L 428 225 L 421 229 L 409 228 L 405 239 L 404 275 L 392 278       L 389 285 L 379 290 L 386 309 L 390 306 L 456 292 L 468 295 L 477 289 L 494 295 L 505 280 L 516 286 L 526 287 L 533 283 L 549 284 L 554 304 L 564 305 L 569 321 L 597 330 L 609 330 L 609 117",textLocation:{x:"460",y:"265"}},{title:"Munich",tileType:"landTile",id:"l Munich",path:"M 234 366 L 243 370 L 246 369 L 250 371 L 267 368 L 271 370 L 269 362 L 275 362 L 281 356 L 276 346 L 268 343 L 264 329 L 266 325 L 278 326 L 288 321 L 284 314 L 288 305 L 263 310 L 243 322 L 237 322       L 219 344 L 211 346 L 213 352 L 209 363 L 222 365 L 225 362 L 232 363 L 234 366",textLocation:{x:"235",y:"350"}},{title:"Naples",tileType:"landTile",id:"l Naples",path:"M 271 464 L 276 474 L 290 487 L 294 502 L 289 511 L 290 514 L 295 515 L 308 500 L 311 491 L 304 484 L 293 481 L 279 458 L 271 464",textLocation:{x:"293",y:"493"}},{title:"North_Africa",tileType:"landTile",id:"l North Africa",path:"M 203 520 L 179 515 L 169 518 L 150 511 L 117 509 L 106 511 L 99 515 L 89 512 L 84 518 L 79 520 L 68 516 L 68 511 L 64 514 L 46 509 L 42 502 L 41 494 L 37 495 L 33 496 L 17 518 L 0 520 L 0 559 L 195 559 L 197 527 L 203 520",textLocation:{x:"100",y:"540"}},{title:"Norway",tileType:"landTile",id:"l Norway",path:"M 397 48 L 391 47 L 395 41 L 394 38 L 384 33 L 382 40 L 380 33 L 377 31 L 374 38 L 371 33 L 366 42 L 366 33 L 362 33 L 357 39 L 343 44 L 324 54 L 320 64 L 310 75 L 309 84 L 303 86 L 292 111 L 277 132 L 269 134       L 264 142 L 258 141 L 236 154 L 237 160 L 233 167 L 231 180 L 233 186 L 229 192 L 231 201 L 241 209 L 246 210 L 266 201 L 270 193 L 275 203 L 279 204 L 287 177 L 285 170 L 290 164 L 292 133 L 301 132 L 300 126 L 309 115 L 308 104 L 311 101       L 324 71 L 332 74 L 330 64 L 341 65 L 342 61 L 346 54 L 355 62 L 369 61 L 370 49 L 379 48 L 388 54 L 386 58 L 388 61 L 397 48",textLocation:{x:"250",y:"175"}},{title:"Paris",tileType:"landTile",id:"l Paris",path:"M 146 365 L 149 372 L 156 374 L 165 365 L 185 344 L 188 332 L 172 328 L 165 331 L 159 331 L 148 329 L 146 337 L 146 365",textLocation:{x:"155",y:"358"}},{title:"Picardy",tileType:"landTile",id:"l Picardy",path:"M 169 311 L 153 315 L 155 320 L 150 319 L 148 329 L 159 331 L 165 331 L 172 328 L 188 332 L 192 323 L 184 315 L 169 311",textLocation:{x:"160",y:"326"}},{title:"Piedmont",tileType:"landTile",id:"l Piedmont",path:"M 207 386 L 204 390 L 207 396 L 201 399 L 204 402 L 203 410 L 211 416 L 222 410 L 233 415 L 236 411 L 233 404 L 246 392 L 243 388 L 229 385 L 227 390 L 221 385 L 213 387 L 207 386",textLocation:{x:"215",y:"408"}},{title:"Portugal",tileType:"landTile",id:"l Portugal",path:"M 32 396 L 30 406 L 17 427 L 14 427 L 10 433 L 13 440 L 15 441 L 12 450 L 13 454 L 8 462 L 19 469 L 27 468 L 36 457 L 34 447 L 40 441 L 37 431 L 42 432 L 52 412 L 61 411 L 62 407 L 55 400 L 42 399 L 43 395 L 32 396",textLocation:{x:"15",y:"420"}},{title:"Prussia",tileType:"landTile",id:"l Prussia",path:"M 347 243 L 347 248 L 348 254 L 344 262 L 337 264 L 334 273 L 328 274 L 326 265 L 314 266 L 307 273 L 294 275 L 292 290 L 297 296 L 296 300 L 320 303 L 324 299 L 326 292 L 341 287 L 345 289 L 359 286       L 365 281 L 367 265 L 362 260 L 356 261 L 354 251 L 347 243",textLocation:{x:"320",y:"283"}},{title:"Rome",tileType:"landTile",id:"l Rome",path:"M 247 442 L 248 447 L 256 458 L 271 464 L 279 458 L 280 455 L 279 451 L 274 447 L 263 434 L 250 438 L 247 442",textLocation:{x:"257",y:"452"}},{title:"Ruhr",tileType:"landTile",id:"l Ruhr",path:"M 213 302 L 210 313 L 208 315 L 210 326 L 205 331 L 204 338 L 211 346 L 219 344 L 237 322 L 243 322 L 241 316 L 232 308 L 213 302",textLocation:{x:"215",y:"330"}},{title:"Rumania",tileType:"landTile",id:"l Rumania",path:"M 403 360 L 404 371 L 394 376 L 395 382 L 401 385 L 406 396 L 401 402 L 387 402 L 367 406 L 365 412 L 367 421 L 370 425 L 375 423 L 382 427 L 390 425 L 398 427 L 404 422 L 410 420 L 422 420 L 430 423 L 432 409       L 439 404 L 438 397 L 427 399 L 422 382 L 423 376 L 414 372 L 411 361 L 403 360",textLocation:{x:"390",y:"410"}},{title:"Serbia",tileType:"landTile",id:"l Serbia",path:"M 365 412 L 360 413 L 342 410 L 338 412 L 335 410 L 332 410 L 330 416 L 331 424 L 327 429 L 330 437 L 337 446 L 346 452 L 346 466 L 350 471 L 356 471 L 361 467 L 369 464 L 365 461 L 371 456 L 366 439 L 371 438       L 368 433 L 365 425 L 367 421 L 365 412",textLocation:{x:"340",y:"440"}},{title:"Sevastopol",tileType:"landTile",id:"l Sevastopol",path:"M 438 397 L 446 378 L 459 375 L 461 377 L 459 379 L 465 383 L 476 381 L 478 383 L 472 385 L 468 392 L 477 396 L 477 401 L 486 404 L 488 397 L 494 396 L 497 392 L 507 389 L 506 384 L 494 387 L 485 378 L 503 364       L 526 351 L 527 354 L 514 365 L 517 371 L 520 371 L 515 384 L 511 383 L 510 386 L 517 393 L 528 394 L 554 406 L 567 408 L 573 417 L 570 427 L 589 442 L 594 439 L 603 441 L 609 440 L 609 330 L 597 330 L 569 321 L 564 305 L 554 304 L 549 284       L 533 283 L 526 287 L 516 286 L 505 280 L 494 295 L 477 289 L 468 295 L 470 303 L 466 307 L 460 345 L 445 350 L 434 360 L 432 372 L 423 376 L 422 382 L 427 399 L 438 397",textLocation:{x:"540",y:"350"}},{title:"Silesia",tileType:"landTile",id:"l Silesia",path:"M 288 321 L 297 322 L 311 334 L 314 332 L 321 339 L 325 340 L 329 338 L 333 330 L 326 327 L 323 322 L 320 303 L 296 300 L 288 305 L 284 314 L 288 321",textLocation:{x:"298",y:"318"}},{title:"Smyrna",tileType:"landTile",id:"l Smyrna",path:"M 417 489 L 420 495 L 417 498 L 417 507 L 423 510 L 427 524 L 435 523 L 435 530 L 441 526 L 447 528 L 453 534 L 464 531 L 466 521 L 475 520 L 485 528 L 491 530 L 505 526 L 511 514 L 520 517 L 527 508 L 530 509       L 536 494 L 545 486 L 555 484 L 563 479 L 562 471 L 556 467 L 555 460 L 546 462 L 531 460 L 508 480 L 501 482 L 490 480 L 473 491 L 466 491 L 452 495 L 432 493 L 423 487 L 417 489",textLocation:{x:"460",y:"510"}},{title:"Spain__nc",tileType:"landTile",id:"l",path:"M 134 417 L 123 412 L 113 407 L 112 399 L 101 396 L 96 397 L 72 384 L 59 381 L 54 375 L 48 374 L 46 378 L 39 375 L 33 381 L 35 384 L 32 396 L 43 395 L 42 399 L 55 400 L 62 407 L 61 411 L 52 412 L 42 432 L 37 431 L 40 441 L 134 417"},{title:"Spain__sc",tileType:"landTile",id:"l",path:"M 40 441 L 34 447 L 36 457 L 27 468 L 33 475 L 34 484 L 37 490 L 47 488 L 52 489 L 60 486 L 78 491 L 83 494 L 86 485 L 90 483 L 98 484 L 107 474 L 113 473 L 115 469 L 110 461 L 124 444 L 131 439 L 146 438       L 157 432 L 158 425 L 154 427 L 142 417 L 135 414 L 134 417 L 40 441",textLocation:{x:"85",y:"450"}},{title:"St_Petersburg__nc",tileType:"landTile",id:"l St_Petersburg",path:"M 534 164 L 564 159 L 573 143 L 598 132 L 609 117 L 609 0 540 0 L 535 9 L 530 6 L 517 19 L 516 33 L 513 38 L 513 23 L 507 20 L 505 26 L 499 33 L 492 48 L 495 58 L 488 60 L 479 57 L 477 55 L 481 50 L 473 43 L 466 45 L 472 62       L 478 66 L 478 74 L 472 72 L 468 74 L 457 91 L 469 100 L 467 106 L 462 109 L 444 101 L 442 110 L 447 115 L 454 119 L 452 122 L 434 118 L 426 103 L 426 94 L 414 88 L 412 83 L 445 84 L 457 79 L 459 66 L 453 61 L 417 47 L 405 49 L 401 45 L 397 48       L 388 61 L 387 68 L 393 73 L 392 92 L 401 110 L 402 118 L 410 130 L 414 147 L 534 164",textLocation:{x:"460",y:"149"}},{title:"St_Petersburg__sc",tileType:"landTile",id:"l St_Petersburg",path:"M 414 147 L 410 152 L 412 161 L 402 177 L 403 183 L 411 184 L 414 187 L 408 187 L 400 192 L 399 197 L 387 196 L 371 198 L 369 202 L 372 205 L 382 206 L 394 205 L 405 217 L 409 228 L 421 229 L 428 225 L 439 211       L 447 209 L 451 213 L 457 210 L 456 207 L 458 194 L 476 183 L 489 184 L 515 169 L 534 164 L 414 147",textLocation:{x:"408",y:"200"}},{title:"Sweden",tileType:"landTile",id:"l Sweden",path:"M 275 203 L 277 218 L 276 224 L 282 236 L 279 240 L 279 243 L 282 253 L 289 254 L 294 245 L 305 244 L 312 229 L 311 220 L 314 209 L 322 206 L 328 203 L 331 193 L 326 183 L 320 182 L 321 161 L 330 146 L 343 138       L 351 128 L 347 121 L 349 112 L 355 104 L 362 107 L 356 71 L 342 61 L 341 65 L 330 64 L 332 74 L 324 71 L 311 101 L 308 104 L 309 115 L 300 126 L 301 132 L 292 133 L 290 164 L 285 170 L 287 177 L 279 204 L 275 203",textLocation:{x:"300",y:"145"}},{title:"Syria",tileType:"landTile",id:"l Syria",path:"M 530 509 L 536 494 L 545 486 L 555 484 L 563 479 L 584 478 L 609 493 L 609 559 L 528 559 L 532 535 L 526 530 L 525 518 L 530 509",textLocation:{x:"570",y:"535"}},{title:"Trieste",tileType:"landTile",id:"l Trieste",path:"M 276 399 L 275 403 L 278 410 L 282 401 L 286 402 L 289 418 L 306 436 L 331 454 L 330 445 L 337 446 L 330 437 L 327 429 L 331 424 L 330 416 L 332 410 L 323 408 L 321 398 L 311 394 L 308 383 L 299 385 L 294 380       L 289 385 L 276 386 L 279 389 L 276 399",textLocation:{x:"305",y:"425"}},{title:"Tunis",tileType:"landTile",id:"l Tunis",path:"M 232 559 L 234 551 L 232 544 L 225 535 L 231 531 L 236 524 L 233 523 L 224 527 L 223 518 L 218 516 L 212 517 L 208 521 L 203 520 L 197 527 L 195 559 L 232 559",textLocation:{x:"208",y:"550"}},{title:"Tuscany",tileType:"landTile",id:"l Tuscany",path:"M 233 415 L 238 431 L 247 442 L 250 438 L 263 434 L 253 418 L 246 416 L 240 415 L 236 411 L 233 415",textLocation:{x:"240",y:"425"}},{title:"Tyrolia",tileType:"landTile",id:"l Tyrolia",path:"M 234 366 L 243 370 L 246 369 L 250 371 L 267 368 L 271 370 L 269 362 L 275 362 L 281 356 L 292 357 L 295 362 L 294 380 L 289 385 L 276 386 L 268 385 L 259 388 L 255 394 L 250 397 L 246 392 L 243 388 L 245 384       L 241 378 L 234 374 L 234 366",textLocation:{x:"255",y:"380"}},{title:"Ukraine",tileType:"landTile",id:"l Ukraine",path:"M 383 327 L 385 332 L 399 338 L 404 354 L 403 360 L 411 361 L 414 372 L 423 376 L 432 372 L 434 360 L 445 350 L 460 345 L 466 307 L 470 303 L 468 295 L 456 292 L 390 306 L 386 309 L 383 327",textLocation:{x:"420",y:"340"}},{title:"Venice",tileType:"landTile",id:"l Venice",path:"M 278 443 L 272 424 L 260 417 L 261 401 L 270 398 L 276 399 L 279 389 L 276 386 L 268 385 L 259 388 L 255 394 L 250 397 L 246 392 L 233 404 L 236 411 L 240 415 L 246 416 L 253 418 L 263 434 L 274 447 L 278 443",textLocation:{x:"245",y:"407"}},{title:"Vienna",tileType:"landTile",id:"l Vienna",path:"M 292 357 L 295 349 L 303 346 L 316 348 L 322 347 L 329 346 L 337 350 L 335 354 L 322 370 L 311 375 L 308 383 L 299 385 L 294 380 L 295 362 L 292 357",textLocation:{x:"305",y:"356"}},{title:"Wales",tileType:"landTile",id:"l Wales",path:"M 100 291 L 112 287 L 122 281 L 130 282 L 127 276 L 119 272 L 116 272 L 115 265 L 128 262 L 143 262 L 150 264 L 153 271 L 150 277 L 145 281 L 147 295 L 134 294 L 124 291 L 120 295 L 110 292 L 100 291",textLocation:{x:"130",y:"275"}},{title:"Warsaw",tileType:"landTile",id:"l Warsaw",path:"M 333 330 L 326 327 L 323 322 L 320 303 L 324 299 L 326 292 L 341 287 L 345 289 L 359 286 L 365 281 L 372 283 L 379 290 L 386 309 L 383 327 L 379 324 L 374 327 L 367 329 L 361 324 L 356 323 L 353 327       L 344 332 L 341 330 L 333 330",textLocation:{x:"345",y:"316"}},{title:"Yorkshire",tileType:"landTile",id:"l Yorkshire",path:"M 163 226 L 163 239 L 168 246 L 170 252 L 169 265 L 166 269 L 153 271 L 150 264 L 151 248 L 155 239 L 155 228 L 163 226",textLocation:{x:"160",y:"248"}}]}),Me=(n(98),le=function(e,t){return(le=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}le(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ke=function(){return(ke=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},je=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.doSomething=function(e){return function(){console.log(e)}},t}return Me(t,e),t.prototype.render=function(e,t){return l("g",{title:e.tile.title,class:e.tile.tileType},l("path",{class:e.tile.id,d:e.tile.path,onClick:this.doSomething(e.tile.title)}),e.tile.textLocation&&l("text",ke({},e.tile.textLocation,{className:"countryText"}),e.tile.title))},t}(F),Ce=(n(100),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ce(t,e),t.prototype.render=function(e,t){return l("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:Be.viewBox,className:"gameBoard",id:"gameBoard"},Be.territories.map(function(e){return l(je,{tile:e})}))},t}(F),Ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pe=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Ee=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Fe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={gameIsRunning:!1},t.setupGame=function(){return Pe(t,void 0,void 0,function(){var e,t,n=this;return Ee(this,function(r){switch(r.label){case 0:return[4,_e()];case 1:return e=r.sent().data,[4,ae.a.get("api/turn/"+e.currentTurn)];case 2:return t=r.sent().data,this.setState({game:e,turn:t},function(){n.runGame()}),[2]}})})},t.getLatestGame=function(){return Pe(t,void 0,void 0,function(){var e,t;return Ee(this,function(n){switch(n.label){case 0:return[4,ae.a.get("/api/game/latest")];case 1:return e=n.sent().data,[4,ae.a.get("/api/turn/"+e.currentTurn)];case 2:return t=n.sent().data,this.setState({game:e,turn:t},this.refresh),[2]}})})},t.refresh=function(){Ae.clearMap(),t.runGame()},t.fetchGame=function(e){return Pe(t,void 0,void 0,function(){var t,n;return Ee(this,function(r){switch(r.label){case 0:return[4,ae.a.get("/api/game/"+e)];case 1:return t=r.sent().data,[4,ae.a.get("/api/turn/"+t.currentTurn)];case 2:return n=r.sent().data,this.setState({game:t,turn:n}),[2]}})})},t.submitOrders=function(){return Pe(t,void 0,void 0,function(){return Ee(this,function(e){switch(e.label){case 0:return[4,ae.a.patch("/api/turn/"+this.state.game.currentTurn,{moves:Ae.orders.map(function(e){return e.toObject()}),turnID:this.state.game.currentTurn})];case 1:return e.sent(),console.log("sent!"),[2]}})})},t.nextTurn=function(){return Pe(t,void 0,void 0,function(){var e,t,n;return Ee(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.post("/api/game/"+this.state.game._id+"/next"))];case 1:return e=r.sent(),t=e[0],n=e[1],t&&console.log(t),n&&this.getLatestGame(),[2]}})})},t.getSvg=function(e){var t=document.getElementById(e);return console.log(t,e),t.contentDocument.getElementById(e+"Svg")},t}return Ne(t,e),t.prototype.render=function(e,t){return l("div",{className:"page"},l("div",{className:"buttonsContainer"},l("button",{onClick:this.setupGame},"Set Up Game"),l("button",{onClick:this.getLatestGame},"Load Game"),l("button",{onClick:this.submitOrders},"Submit Orders"),l("button",{onClick:this.props.logOut},"Log out"),l("button",{onClick:this.nextTurn},"Next Turn"),l("br",null)),l("br",null),l("div",null,l("object",{id:"army",type:"image/svg+xml",data:"assets/svg/001-tank-1.svg",width:"0"}),l("object",{id:"fleet",type:"image/svg+xml",data:"assets/svg/002-cruiser.svg",width:"0"}),l(Oe,null)))},t.prototype.runGame=function(){var e=["army","fleet"].map(this.getSvg),t=e[0],n=e[1],r=document.getElementById("gameBoard");Ae.setup({map:r,army:t,fleet:n},this.state.turn,this.props.userID),Ae.run()},t}(F),Ie=n(16),Re=n.n(Ie),Ue=(n(160),n(162),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ue(t,e),t.prototype.render=function(){return l("div",{className:"formBox"},this.props.children)},t}(F),De=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),We=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Ve=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},He=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={formFields:{}},t.login=function(e){return We(t,void 0,void 0,function(){var t,n,r;return Ve(this,function(o){switch(o.label){case 0:return e.preventDefault(),console.log("attempting to log in"),console.log(this.state.formFields),[4,ce(ae.a.post("api/login",this.state.formFields))];case 1:return t=o.sent(),n=t[0],r=t[1],n&&(console.log("logging an err"),console.log(n)),r?(console.log("success!"),console.log(r.data),[4,this.props.toggleLogIn(!0)]):[3,3];case 2:o.sent(),Y("/game"),o.label=3;case 3:return[2]}})})},t.handleChange=function(e){return function(n){var r=Re()(t.state.formFields);r[e]=n.target.value,t.setState({formFields:r})}},t}return De(t,e),t.prototype.componentDidMount=function(){this.setState({formFields:{username:this.usernameInput.value,password:this.passwordInput.value}})},t.prototype.render=function(e,t){var n=this;return l("div",{className:"page"},l("h1",null,"Diplomacy"),l("br",null),l(Ge,null,l("form",{action:"api/user/authenticate",method:"post",onSubmit:this.login},"Username",l("br",null),l("input",{ref:function(e){return n.usernameInput=e},type:"text",name:"username",onChange:this.handleChange("username")}),l("br",null),"Password",l("br",null),l("input",{ref:function(e){return n.passwordInput=e},type:"text",name:"password",onChange:this.handleChange("password")}),l("br",null),l("input",{type:"submit",value:"Submit"})),"New? Register ",l(re,{href:"/register"},"here")))},t}(F),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$e=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Ke=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},qe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={formFields:{}},t.handleSubmit=function(e){return $e(t,void 0,void 0,function(){var t,n,r;return Ke(this,function(o){switch(o.label){case 0:return e.preventDefault(),[4,ce(ae.a.post("/api/user/register",this.state.formFields))];case 1:return t=o.sent(),n=t[0],r=t[1],n&&console.log(n),r&&Y("/",!0),[2]}})})},t.handleChange=function(e){return function(n){var r=Re()(t.state.formFields);r[e]=n.target.value,t.setState({formFields:r})}},t}return ze(t,e),t.prototype.render=function(e,t){return l("div",{className:"page"},l(Ge,null,l("form",{action:"/user/register",method:"post",onSubmit:this.handleSubmit},"Username:",l("br",null),l("input",{type:"text",name:"username",value:t.formFields.username,onChange:this.handleChange("username")}),l("br",null),"Name:",l("br",null),l("input",{type:"text",name:"name",value:t.formFields.name,onChange:this.handleChange("name")}),l("br",null),"Email:",l("br",null),l("input",{type:"text",name:"email",value:t.formFields.email,onChange:this.handleChange("email")}),l("br",null),"Password:",l("br",null),l("input",{type:"password",name:"password",value:t.formFields.password,onChange:this.handleChange("password")}),l("br",null),l("input",{type:"submit",value:"Submit"}))))},t}(F),Ye=(n(164),n(166),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Je=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Xe=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Qe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={isLoggedIn:!1,userID:null},t.handleRoute=function(e){return Je(t,void 0,void 0,function(){return Xe(this,function(t){switch(t.label){case 0:switch(e.url){case"/game":return[3,1]}return[3,3];case 1:return console.log("attempting to route to /game"),[4,this.checkAuthentication()];case 2:t.sent()||Y("/",!0),t.label=3;case 3:return[2]}})})},t.toggleLogIn=function(e){return e&&t.setState({isLoggedIn:e},t.checkAuthentication),t.setState({isLoggedIn:!t.state.isLoggedIn})},t.checkAuthentication=function(){return Je(t,void 0,void 0,function(){var e;return Xe(this,function(t){switch(t.label){case 0:return[4,Le()];case 1:return e=t.sent(),console.log("authID: "+e),e?(this.setState({userID:e}),[2,!0]):[2,!1]}})})},t.logOut=function(){return Je(t,void 0,void 0,function(){return Xe(this,function(e){switch(e.label){case 0:return[4,ae.a.get("/logout")];case 1:return e.sent(),Y("/",!0),this.setState({userID:null,isLoggedIn:!1}),[2]}})})},t}return Ye(t,e),t.prototype.render=function(e,t){return l(oe,{onChange:this.handleRoute},l(Fe,{path:"/game",userID:t.userID,logOut:this.logOut}),l(qe,{path:"/register"}),l(He,{path:"/",toggleLogIn:this.toggleLogIn}))},t}(F);I(l(Qe,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,