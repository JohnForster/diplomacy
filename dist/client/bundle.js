!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=165)}([function(e,t,n){e.exports=n(54)},function(e,t,n){"use strict";var r=n(29),o=n(55),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function l(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){var r=n(35),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(111),o=n(114);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(20),o=n(77),i=n(78),a="[object Null]",l="[object Undefined]",c=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?l:a:c&&c in Object(e)?o(e):i(e)}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),i=r.sources.map(function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")});return[n].concat(i).concat([o]).join("\n")}var a,l,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<e.length;a++){var l=e[a];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),c=null,s=0,u=[],L=n(98);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(_(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(_(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function d(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,n);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),d(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function _(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=c||(c=y(t)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=L(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&f(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete i[l.id]}}}};var v,g=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){var r=n(40),o=n(94),i=n(19);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(101),o=n(102),i=n(103),a=n(104),l=n(105);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(18);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(4)(Object,"create");e.exports=r},function(e,t,n){var r=n(124);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(44),o=n(45);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var l=-1,c=t.length;++l<c;){var s=t[l],u=i?i(n[s],e[s],s,n,e):void 0;void 0===u&&(u=e[s]),a?o(n,s,u):r(n,s,u)}return n}},function(e,t,n){var r=n(99),o=4;e.exports=function(e){return r(e,o)}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(58),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,c={adapter:("undefined"!=typeof XMLHttpRequest?l=n(30):void 0!==t&&(l=n(30)),l),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){c.headers[e]={}}),r.forEach(["post","put","patch"],function(e){c.headers[e]=r.merge(i)}),e.exports=c}).call(this,n(57))},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(34),o=n(36);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(2).Symbol;e.exports=r},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(35),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,l=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=l}).call(this,n(21)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(4)(n(2),"Map");e.exports=r},function(e,t,n){var r=n(136),o=n(47),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,l=a?function(e){return null==e?[]:(e=Object(e),r(a(e),function(t){return i.call(e,t)}))}:o;e.exports=l},function(e,t,n){var r=n(140),o=n(25),i=n(141),a=n(142),l=n(143),c=n(6),s=n(43),u=s(r),L=s(o),f=s(i),p=s(a),d=s(l),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||i&&"[object Promise]"!=h(i.resolve())||a&&"[object Set]"!=h(new a)||l&&"[object WeakMap]"!=h(new l))&&(h=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?s(n):"";if(r)switch(r){case u:return"[object DataView]";case L:return"[object Map]";case f:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return t}),e.exports=h},function(e,t,n){var r=n(146);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(1),o=n(59),i=n(61),a=n(62),l=n(63),c=n(31),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(64);e.exports=function(e){return new Promise(function(t,u){var L=e.data,f=e.headers;r.isFormData(L)&&delete f["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||l(e.url)||(p=new window.XDomainRequest,d="onload",h=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var y=e.auth.username||"",m=e.auth.password||"";f.Authorization="Basic "+s(y+":"+m)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[d]=function(){if(p&&(4===p.readyState||h)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,u,r),p=null}},p.onerror=function(){u(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var _=n(65),v=(e.withCredentials||l(e.url))&&e.xsrfCookieName?_.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(f,function(e,t){void 0===L&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),u(e),p=null)}),void 0===L&&(L=null),p.send(L)})}},function(e,t,n){"use strict";var r=n(60);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){var r=n(6),o=n(3),i="[object AsyncFunction]",a="[object Function]",l="[object GeneratorFunction]",c="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==a||t==l||t==i||t==c}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(76))},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(83);e.exports=function(e,t){var n=-1,o=e.length,i=o-1;for(t=void 0===t?o:t;++n<t;){var a=r(n,i),l=e[a];e[a]=e[n],e[n]=l}return e.length=t,e}},function(e,t,n){var r=n(88),o=n(89),i=n(10),a=n(41),l=n(37),c=n(92),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),u=!n&&o(e),L=!n&&!u&&a(e),f=!n&&!u&&!L&&c(e),p=n||u||L||f,d=p?r(e.length,String):[],h=d.length;for(var y in e)!t&&!s.call(e,y)||p&&("length"==y||L&&("offset"==y||"parent"==y)||f&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||l(y,h))||d.push(y);return d}},function(e,t,n){(function(e){var r=n(2),o=n(91),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,l=a&&a.exports===i?r.Buffer:void 0,c=(l?l.isBuffer:void 0)||o;e.exports=c}).call(this,n(21)(e))},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(45),o=n(18),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(129);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(40),o=n(132),i=n(19);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(49),o=n(50),i=n(26),a=n(47),l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=l},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(42)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(49),o=n(10);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t,n){var r=n(73)();e.exports=r},function(e,t,n){var r=n(82),o=n(84),i=n(10);e.exports=function(e){return(i(e)?r:o)(e)}},function(e,t,n){"use strict";var r=n(1),o=n(29),i=n(56),a=n(17);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=l(a);c.Axios=i,c.create=function(e){return l(r.merge(a,e))},c.Cancel=n(33),c.CancelToken=n(71),c.isCancel=n(32),c.all=function(e){return Promise.all(e)},c.spread=n(72),e.exports=c,e.exports.default=c},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(17),o=n(1),i=n(66),a=n(67);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){l.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){l.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=l},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,s=[],u=!1,L=-1;function f(){u&&c&&(u=!1,c.length?s=c.concat(s):L=-1,s.length&&p())}function p(){if(!u){var e=l(f);u=!0;for(var t=s.length;t;){for(c=s,s=[];++L<t;)c&&c[L].run();L=-1,t=s.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||u||l(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(31);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(1);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",l=0,c=r;i.charAt(0|l)||(c="=",l%1);a+=c.charAt(63&t>>8-l%1*8)){if((n=i.charCodeAt(l+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(1);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(68),i=n(32),a=n(17),l=n(69),c=n(70);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!l(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(33);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r=n(74),o=n(75),i=n(79);e.exports=function(e){return function(t,n,a){return a&&"number"!=typeof a&&o(t,n,a)&&(n=a=void 0),t=i(t),void 0===n?(n=t,t=0):n=i(n),a=void 0===a?t<n?1:-1:i(a),r(t,n,a,e)}}},function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,i){for(var a=-1,l=r(n((t-e)/(o||1)),0),c=Array(l);l--;)c[i?l:++a]=e,e+=o;return c}},function(e,t,n){var r=n(18),o=n(19),i=n(37),a=n(3);e.exports=function(e,t,n){if(!a(n))return!1;var l=typeof t;return!!("number"==l?o(n)&&i(t,n.length):"string"==l&&t in n)&&r(n[t],e)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(20),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[l]=n:delete e[l]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(80),o=1/0,i=1.7976931348623157e308;e.exports=function(e){return e?(e=r(e))===o||e===-o?(e<0?-1:1)*i:e==e?e:0:0===e?e:0}},function(e,t,n){var r=n(3),o=n(81),i=NaN,a=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return i;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=c.test(e);return n||s.test(e)?u(e.slice(2),n?2:8):l.test(e)?i:+e}},function(e,t,n){var r=n(6),o=n(5),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t,n){var r=n(38),o=n(39);e.exports=function(e){return o(r(e))}},function(e,t){var n=Math.floor,r=Math.random;e.exports=function(e,t){return e+n(r()*(t-e+1))}},function(e,t,n){var r=n(39),o=n(85);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(86),o=n(9);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,t,n){var r=n(87);e.exports=function(e,t){return r(t,function(t){return e[t]})}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(90),o=n(5),i=Object.prototype,a=i.hasOwnProperty,l=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!l.call(e,"callee")};e.exports=c},function(e,t,n){var r=n(6),o=n(5),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(93),o=n(22),i=n(23),a=i&&i.isTypedArray,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(6),o=n(36),i=n(5),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(24),o=n(95),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(42)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(97);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,".buttonsContainer {\n  text-justify: center; }\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r=n(100),o=n(128),i=n(44),a=n(130),l=n(131),c=n(134),s=n(38),u=n(135),L=n(137),f=n(138),p=n(139),d=n(27),h=n(144),y=n(145),m=n(151),_=n(10),v=n(41),g=n(153),x=n(3),b=n(155),S=n(9),w=1,T=2,A=4,B="[object Arguments]",M="[object Function]",k="[object GeneratorFunction]",j="[object Object]",C={};C[B]=C["[object Array]"]=C["[object ArrayBuffer]"]=C["[object DataView]"]=C["[object Boolean]"]=C["[object Date]"]=C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Map]"]=C["[object Number]"]=C[j]=C["[object RegExp]"]=C["[object Set]"]=C["[object String]"]=C["[object Symbol]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C["[object Error]"]=C[M]=C["[object WeakMap]"]=!1,e.exports=function e(t,n,O,N,P,E){var F,I=n&w,R=n&T,U=n&A;if(O&&(F=P?O(t,N,P,E):O(t)),void 0!==F)return F;if(!x(t))return t;var G=_(t);if(G){if(F=h(t),!I)return s(t,F)}else{var D=d(t),W=D==M||D==k;if(v(t))return c(t,I);if(D==j||D==B||W&&!P){if(F=R||W?{}:m(t),!I)return R?L(t,l(F,t)):u(t,a(F,t))}else{if(!C[D])return P?t:{};F=y(t,D,I)}}E||(E=new r);var V=E.get(t);if(V)return V;if(E.set(t,F),b(t))return t.forEach(function(r){F.add(e(r,n,O,r,t,E))}),F;if(g(t))return t.forEach(function(r,o){F.set(o,e(r,n,O,o,t,E))}),F;var H=U?R?p:f:R?keysIn:S,z=G?void 0:H(t);return o(z||t,function(r,o){z&&(r=t[o=r]),i(F,o,e(r,n,O,o,t,E))}),F}},function(e,t,n){var r=n(11),o=n(106),i=n(107),a=n(108),l=n(109),c=n(110);function s(e){var t=this.__data__=new r(e);this.size=t.size}s.prototype.clear=o,s.prototype.delete=i,s.prototype.get=a,s.prototype.has=l,s.prototype.set=c,e.exports=s},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(12),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},function(e,t,n){var r=n(12);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(12);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(12);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(11);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(11),o=n(25),i=n(115),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var l=n.__data__;if(!o||l.length<a-1)return l.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(l)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(34),o=n(112),i=n(3),a=n(43),l=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,u=c.toString,L=s.hasOwnProperty,f=RegExp("^"+u.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?f:l).test(a(e))}},function(e,t,n){var r,o=n(113),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(2)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(116),o=n(123),i=n(125),a=n(126),l=n(127);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(117),o=n(11),i=n(25);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(118),o=n(119),i=n(120),a=n(121),l=n(122);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(13);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(13),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(14);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(14);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(4),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(15),o=n(9);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(15),o=n(46);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(3),o=n(24),i=n(133),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var l in e)("constructor"!=l||!t&&a.call(e,l))&&n.push(l);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(2),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,l=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=l?l(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(21)(e))},function(e,t,n){var r=n(15),o=n(26);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t,n){var r=n(15),o=n(48);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(51),o=n(26),i=n(9);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(51),o=n(48),i=n(46);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(4)(n(2),"DataView");e.exports=r},function(e,t,n){var r=n(4)(n(2),"Promise");e.exports=r},function(e,t,n){var r=n(4)(n(2),"Set");e.exports=r},function(e,t,n){var r=n(4)(n(2),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(28),o=n(147),i=n(148),a=n(149),l=n(150),c="[object Boolean]",s="[object Date]",u="[object Map]",L="[object Number]",f="[object RegExp]",p="[object Set]",d="[object String]",h="[object Symbol]",y="[object ArrayBuffer]",m="[object DataView]",_="[object Float32Array]",v="[object Float64Array]",g="[object Int8Array]",x="[object Int16Array]",b="[object Int32Array]",S="[object Uint8Array]",w="[object Uint8ClampedArray]",T="[object Uint16Array]",A="[object Uint32Array]";e.exports=function(e,t,n){var B=e.constructor;switch(t){case y:return r(e);case c:case s:return new B(+e);case m:return o(e,n);case _:case v:case g:case x:case b:case S:case w:case T:case A:return l(e,n);case u:return new B;case L:case d:return new B(e);case f:return i(e);case p:return new B;case h:return a(e)}}},function(e,t,n){var r=n(2).Uint8Array;e.exports=r},function(e,t,n){var r=n(28);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(20),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var r=n(28);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(152),o=n(50),i=n(24);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(3),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var r=n(154),o=n(22),i=n(23),a=i&&i.isMap,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(27),o=n(5),i="[object Map]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(156),o=n(22),i=n(23),a=i&&i.isSet,l=a?o(a):r;e.exports=l},function(e,t,n){var r=n(27),o=n(5),i="[object Set]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(158);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"h1 {\n  color: #102542;\n  font-size: 84px;\n  text-shadow: 5px 5px 0px #546A7B;\n  text-align: center; }\n",""])},function(e,t,n){var r=n(160);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(7)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Notable|Arvo&display=swap);",""]),t.push([e.i,".formBox {\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 20px;\n  padding: 24px;\n  background-color: #4972AB;\n  color: #EFEFEF;\n  letter-spacing: 2px;\n  box-shadow: 5px 5px 0px #102542;\n  margin: auto; }\n  .formBox input[type=submit] {\n    width: 50%;\n    font-size: 12px;\n    font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    letter-spacing: 1px; }\n\na {\n  color: #EFEFEF; }\n",""])},function(e,t,n){var r=n(162);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"body {\n  background-color: #EFEFEF; }\n\n.page {\n  display: flex;\n  align-items: center;\n  align-content: flex-start;\n  flex-direction: column;\n  padding: 56px;\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif; }\n\ninput, button {\n  font-family: 'Arvo', Calibri, sans-serif;\n  color: #102542;\n  font-size: 18px;\n  height: 24px;\n  border-radius: 3px;\n  background-color: #EFEFEF;\n  margin: 10px 0px;\n  box-sizing: border-box;\n  text-align: center; }\n",""])},function(e,t,n){var r=n(164);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"",""])},function(e,t,n){"use strict";n.r(t);var r=function(){},o={},i=[],a=[];function l(e,t){var n,l,c,s,u=a;for(s=arguments.length;s-- >2;)i.push(arguments[s]);for(t&&null!=t.children&&(i.length||i.push(t.children),delete t.children);i.length;)if((l=i.pop())&&void 0!==l.pop)for(s=l.length;s--;)i.push(l[s]);else"boolean"==typeof l&&(l=null),(c="function"!=typeof e)&&(null==l?l="":"number"==typeof l?l=String(l):"string"!=typeof l&&(c=!1)),c&&n?u[u.length-1]+=l:u===a?u=[l]:u.push(l),n=c;var L=new r;return L.nodeName=e,L.children=u,L.attributes=null==t?void 0:t,L.key=null==t?void 0:t.key,void 0!==o.vnode&&o.vnode(L),L}function c(e,t){for(var n in t)e[n]=t[n];return e}function s(e,t){null!=e&&("function"==typeof e?e(t):e.current=t)}var u="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;function L(e,t){return l(e.nodeName,c(c({},e.attributes),t),arguments.length>2?[].slice.call(arguments,2):e.children)}var f=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,p=[];function d(e){!e._dirty&&(e._dirty=!0)&&1==p.push(e)&&(o.debounceRendering||u)(h)}function h(){for(var e;e=p.pop();)e._dirty&&P(e)}function y(e,t){return e.normalizedNodeName===t||e.nodeName.toLowerCase()===t.toLowerCase()}function m(e){var t=c({},e.attributes);t.children=e.children;var n=e.nodeName.defaultProps;if(void 0!==n)for(var r in n)void 0===t[r]&&(t[r]=n[r]);return t}function _(e){var t=e.parentNode;t&&t.removeChild(e)}function v(e,t,n,r,o){if("className"===t&&(t="class"),"key"===t);else if("ref"===t)s(n,null),s(r,e);else if("class"!==t||o)if("style"===t){if(r&&"string"!=typeof r&&"string"!=typeof n||(e.style.cssText=r||""),r&&"object"==typeof r){if("string"!=typeof n)for(var i in n)i in r||(e.style[i]="");for(var i in r)e.style[i]="number"==typeof r[i]&&!1===f.test(i)?r[i]+"px":r[i]}}else if("dangerouslySetInnerHTML"===t)r&&(e.innerHTML=r.__html||"");else if("o"==t[0]&&"n"==t[1]){var a=t!==(t=t.replace(/Capture$/,""));t=t.toLowerCase().substring(2),r?n||e.addEventListener(t,g,a):e.removeEventListener(t,g,a),(e._listeners||(e._listeners={}))[t]=r}else if("list"!==t&&"type"!==t&&!o&&t in e){try{e[t]=null==r?"":r}catch(e){}null!=r&&!1!==r||"spellcheck"==t||e.removeAttribute(t)}else{var l=o&&t!==(t=t.replace(/^xlink:?/,""));null==r||!1===r?l?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.removeAttribute(t):"function"!=typeof r&&(l?e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),r):e.setAttribute(t,r))}else e.className=r||""}function g(e){return this._listeners[e.type](o.event&&o.event(e)||e)}var x=[],b=0,S=!1,w=!1;function T(){for(var e;e=x.shift();)o.afterMount&&o.afterMount(e),e.componentDidMount&&e.componentDidMount()}function A(e,t,n,r,o,i){b++||(S=null!=o&&void 0!==o.ownerSVGElement,w=null!=e&&!("__preactattr_"in e));var a=B(e,t,n,r,i);return o&&a.parentNode!==o&&o.appendChild(a),--b||(w=!1,i||T()),a}function B(e,t,n,r,o){var i=e,a=S;if(null!=t&&"boolean"!=typeof t||(t=""),"string"==typeof t||"number"==typeof t)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=t&&(e.nodeValue=t):(i=document.createTextNode(t),e&&(e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0))),i.__preactattr_=!0,i;var l,c,s=t.nodeName;if("function"==typeof s)return function(e,t,n,r){var o=e&&e._component,i=o,a=e,l=o&&e._componentConstructor===t.nodeName,c=l,s=m(t);for(;o&&!c&&(o=o._parentComponent);)c=o.constructor===t.nodeName;o&&c&&(!r||o._component)?(N(o,s,3,n,r),e=o.base):(i&&!l&&(E(i),e=a=null),o=C(t.nodeName,s,n),e&&!o.nextBase&&(o.nextBase=e,a=null),N(o,s,1,n,r),e=o.base,a&&e!==a&&(a._component=null,M(a,!1)));return e}(e,t,n,r);if(S="svg"===s||"foreignObject"!==s&&S,s=String(s),(!e||!y(e,s))&&(l=s,(c=S?document.createElementNS("http://www.w3.org/2000/svg",l):document.createElement(l)).normalizedNodeName=l,i=c,e)){for(;e.firstChild;)i.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(i,e),M(e,!0)}var u=i.firstChild,L=i.__preactattr_,f=t.children;if(null==L){L=i.__preactattr_={};for(var p=i.attributes,d=p.length;d--;)L[p[d].name]=p[d].value}return!w&&f&&1===f.length&&"string"==typeof f[0]&&null!=u&&void 0!==u.splitText&&null==u.nextSibling?u.nodeValue!=f[0]&&(u.nodeValue=f[0]):(f&&f.length||null!=u)&&function(e,t,n,r,o){var i,a,l,c,s,u=e.childNodes,L=[],f={},p=0,d=0,h=u.length,m=0,v=t?t.length:0;if(0!==h)for(var g=0;g<h;g++){var x=u[g],b=x.__preactattr_,S=v&&b?x._component?x._component.__key:b.key:null;null!=S?(p++,f[S]=x):(b||(void 0!==x.splitText?!o||x.nodeValue.trim():o))&&(L[m++]=x)}if(0!==v)for(var g=0;g<v;g++){c=t[g],s=null;var S=c.key;if(null!=S)p&&void 0!==f[S]&&(s=f[S],f[S]=void 0,p--);else if(d<m)for(i=d;i<m;i++)if(void 0!==L[i]&&(w=a=L[i],A=o,"string"==typeof(T=c)||"number"==typeof T?void 0!==w.splitText:"string"==typeof T.nodeName?!w._componentConstructor&&y(w,T.nodeName):A||w._componentConstructor===T.nodeName)){s=a,L[i]=void 0,i===m-1&&m--,i===d&&d++;break}s=B(s,c,n,r),l=u[g],s&&s!==e&&s!==l&&(null==l?e.appendChild(s):s===l.nextSibling?_(l):e.insertBefore(s,l))}var w,T,A;if(p)for(var g in f)void 0!==f[g]&&M(f[g],!1);for(;d<=m;)void 0!==(s=L[m--])&&M(s,!1)}(i,f,n,r,w||null!=L.dangerouslySetInnerHTML),function(e,t,n){var r;for(r in n)t&&null!=t[r]||null==n[r]||v(e,r,n[r],n[r]=void 0,S);for(r in t)"children"===r||"innerHTML"===r||r in n&&t[r]===("value"===r||"checked"===r?e[r]:n[r])||v(e,r,n[r],n[r]=t[r],S)}(i,t.attributes,L),S=a,i}function M(e,t){var n=e._component;n?E(n):(null!=e.__preactattr_&&s(e.__preactattr_.ref,null),!1!==t&&null!=e.__preactattr_||_(e),k(e))}function k(e){for(e=e.lastChild;e;){var t=e.previousSibling;M(e,!0),e=t}}var j=[];function C(e,t,n){var r,o=j.length;for(e.prototype&&e.prototype.render?(r=new e(t,n),F.call(r,t,n)):((r=new F(t,n)).constructor=e,r.render=O);o--;)if(j[o].constructor===e)return r.nextBase=j[o].nextBase,j.splice(o,1),r;return r}function O(e,t,n){return this.constructor(e,n)}function N(e,t,n,r,i){e._disable||(e._disable=!0,e.__ref=t.ref,e.__key=t.key,delete t.ref,delete t.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||i?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(t,r)),r&&r!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=r),e.prevProps||(e.prevProps=e.props),e.props=t,e._disable=!1,0!==n&&(1!==n&&!1===o.syncComponentUpdates&&e.base?d(e):P(e,1,i)),s(e.__ref,e))}function P(e,t,n,r){if(!e._disable){var i,a,l,s=e.props,u=e.state,L=e.context,f=e.prevProps||s,p=e.prevState||u,d=e.prevContext||L,h=e.base,y=e.nextBase,_=h||y,v=e._component,g=!1,S=d;if(e.constructor.getDerivedStateFromProps&&(u=c(c({},u),e.constructor.getDerivedStateFromProps(s,u)),e.state=u),h&&(e.props=f,e.state=p,e.context=d,2!==t&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(s,u,L)?g=!0:e.componentWillUpdate&&e.componentWillUpdate(s,u,L),e.props=s,e.state=u,e.context=L),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!g){i=e.render(s,u,L),e.getChildContext&&(L=c(c({},L),e.getChildContext())),h&&e.getSnapshotBeforeUpdate&&(S=e.getSnapshotBeforeUpdate(f,p));var w,B,k=i&&i.nodeName;if("function"==typeof k){var j=m(i);(a=v)&&a.constructor===k&&j.key==a.__key?N(a,j,1,L,!1):(w=a,e._component=a=C(k,j,L),a.nextBase=a.nextBase||y,a._parentComponent=e,N(a,j,0,L,!1),P(a,1,n,!0)),B=a.base}else l=_,(w=v)&&(l=e._component=null),(_||1===t)&&(l&&(l._component=null),B=A(l,i,L,n||!h,_&&_.parentNode,!0));if(_&&B!==_&&a!==v){var O=_.parentNode;O&&B!==O&&(O.replaceChild(B,_),w||(_._component=null,M(_,!1)))}if(w&&E(w),e.base=B,B&&!r){for(var F=e,I=e;I=I._parentComponent;)(F=I).base=B;B._component=F,B._componentConstructor=F.constructor}}for(!h||n?x.push(e):g||(e.componentDidUpdate&&e.componentDidUpdate(f,p,S),o.afterUpdate&&o.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);b||r||T()}}function E(e){o.beforeUnmount&&o.beforeUnmount(e);var t=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var n=e._component;n?E(n):t&&(null!=t.__preactattr_&&s(t.__preactattr_.ref,null),e.nextBase=t,_(t),j.push(e),k(t)),s(e.__ref,null)}function F(e,t){this._dirty=!0,this.context=t,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function I(e,t,n){return A(n,e,{},!1,t,!1)}c(F.prototype,{setState:function(e,t){this.prevState||(this.prevState=this.state),this.state=c(c({},this.state),"function"==typeof e?e(this.state,this.props):e),t&&this._renderCallbacks.push(t),d(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),P(this,2)},render:function(){}});var R={};function U(e,t){for(var n in t)e[n]=t[n];return e}function G(e,t){return e.rank<t.rank?1:e.rank>t.rank?-1:e.index-t.index}function D(e,t){return e.index=t,e.rank=function(e){return e.attributes.default?0:(t=e.attributes.path,W(t).map(V).join(""));var t}(e),e.attributes}function W(e){return e.replace(/(^\/+|\/+$)/g,"").split("/")}function V(e){return":"==e.charAt(0)?1+"*+?".indexOf(e.charAt(e.length-1))||4:5}var H=null,z=[],$=[],q={};function K(){var e;return""+((e=H&&H.location?H.location:H&&H.getCurrentLocation?H.getCurrentLocation():"undefined"!=typeof location?location:q).pathname||"")+(e.search||"")}function Y(e,t){return void 0===t&&(t=!1),"string"!=typeof e&&e.url&&(t=e.replace,e=e.url),function(e){for(var t=z.length;t--;)if(z[t].canRoute(e))return!0;return!1}(e)&&function(e,t){void 0===t&&(t="push"),H&&H[t]?H[t](e):"undefined"!=typeof history&&history[t+"State"]&&history[t+"State"](null,null,e)}(e,t?"replace":"push"),X(e)}function X(e){for(var t=!1,n=0;n<z.length;n++)!0===z[n].routeTo(e)&&(t=!0);for(var r=$.length;r--;)$[r](e);return t}function J(e){if(e&&e.getAttribute){var t=e.getAttribute("href"),n=e.getAttribute("target");if(t&&t.match(/^\//g)&&(!n||n.match(/^_?self$/i)))return Y(t)}}function Q(e){if(0==e.button)return J(e.currentTarget||e.target||this),Z(e)}function Z(e){return e&&(e.stopImmediatePropagation&&e.stopImmediatePropagation(),e.stopPropagation&&e.stopPropagation(),e.preventDefault()),!1}function ee(e){if(!(e.ctrlKey||e.metaKey||e.altKey||e.shiftKey||0!==e.button)){var t,n=e.target;do{if("A"===String(n.nodeName).toUpperCase()&&n.getAttribute("href")&&(null!=(t=n).__preactattr_||"undefined"!=typeof Symbol&&null!=t[Symbol.for("preactattr")])){if(n.hasAttribute("native"))return;if(J(n))return Z(e)}}while(n=n.parentNode)}}var te=!1;var ne=function(e){function t(t){e.call(this,t),t.history&&(H=t.history),this.state={url:t.url||K()},te||("function"==typeof addEventListener&&(H||addEventListener("popstate",function(){X(K())}),addEventListener("click",ee)),te=!0)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.shouldComponentUpdate=function(e){return!0!==e.static||(e.url!==this.props.url||e.onChange!==this.props.onChange)},t.prototype.canRoute=function(e){return this.getMatchingChildren(this.props.children,e,!1).length>0},t.prototype.routeTo=function(e){return this._didRoute=!1,this.setState({url:e}),this.updating?this.canRoute(e):(this.forceUpdate(),this._didRoute)},t.prototype.componentWillMount=function(){z.push(this),this.updating=!0},t.prototype.componentDidMount=function(){var e=this;H&&(this.unlisten=H.listen(function(t){e.routeTo(""+(t.pathname||"")+(t.search||""))})),this.updating=!1},t.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),z.splice(z.indexOf(this),1)},t.prototype.componentWillUpdate=function(){this.updating=!0},t.prototype.componentDidUpdate=function(){this.updating=!1},t.prototype.getMatchingChildren=function(e,t,n){return e.filter(D).sort(G).map(function(e){var r=function(e,t,n){var r,o=/(?:\?([^#]*))?(#.*)?$/,i=e.match(o),a={};if(i&&i[1])for(var l=i[1].split("&"),c=0;c<l.length;c++){var s=l[c].split("=");a[decodeURIComponent(s[0])]=decodeURIComponent(s.slice(1).join("="))}e=W(e.replace(o,"")),t=W(t||"");for(var u=Math.max(e.length,t.length),L=0;L<u;L++)if(t[L]&&":"===t[L].charAt(0)){var f=t[L].replace(/(^\:|[+*?]+$)/g,""),p=(t[L].match(/[+*?]+$/)||R)[0]||"",d=~p.indexOf("+"),h=~p.indexOf("*"),y=e[L]||"";if(!y&&!h&&(p.indexOf("?")<0||d)){r=!1;break}if(a[f]=decodeURIComponent(y),d||h){a[f]=e.slice(L).map(decodeURIComponent).join("/");break}}else if(t[L]!==e[L]){r=!1;break}return(!0===n.default||!1!==r)&&a}(t,e.attributes.path,e.attributes);if(r){if(!1!==n){var o={url:t,matches:r};return U(o,r),delete o.ref,delete o.key,L(e,o)}return e}}).filter(Boolean)},t.prototype.render=function(e,t){var n=e.children,r=e.onChange,o=t.url,i=this.getMatchingChildren(n,o,!0),a=i[0]||null;this._didRoute=!!a;var l=this.previousUrl;return o!==l&&(this.previousUrl=o,"function"==typeof r&&r({router:this,url:o,previous:l,active:i,current:a})),a},t}(F),re=function(e){return l("a",U({onClick:Q},e))};ne.subscribers=$,ne.getCurrentUrl=K,ne.route=Y,ne.Router=ne,ne.Route=function(e){return l(e.component,e)},ne.Link=re;var oe=ne,ie=n(0),ae=n.n(ie);var le,ce=function(e,t){return e.then(function(e){return[null,e]}).catch(function(e){return t&&Object.assign(e,t),[e,void 0]})},se=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},ue=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Le=function(){return se(void 0,void 0,void 0,function(){var e,t,n;return ue(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.get("/api/auth"))];case 1:return e=r.sent(),t=e[0],n=e[1],console.log(n),t?[2,null]:[2,n.data.userID]}})})},fe=n(52),pe=n.n(fe),de=n(53),he=n.n(de),ye=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},me=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},_e=function(){return ye(void 0,void 0,void 0,function(){var e,t,n,r,o;return me(this,function(i){switch(i.label){case 0:return console.log("Creating a new game..."),[4,ce(ae.a.post("/api/game"))];case 1:return e=i.sent(),t=e[0],n=e[1],t?[2,t]:(r=n.data,o=he()(pe()(1,25)).map(function(e){return e.toString().padStart(2,"0")}),[4,Promise.all([ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd85783c26513e12f695ce2",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5cd8988c463115ffdbc672b3",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c5b63ca37c488983f92",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c7563ca37c488983f93",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28c9663ca37c488983f94",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cbd63ca37c488983f95",colour:"e"+o.pop()}),ae.a.post("/api/game/join",{gameID:r.id,playerID:"5ce28cd263ca37c488983f96",colour:"e"+o.pop()})])]);case 2:return i.sent(),[4,ae.a.post("/api/game/"+r.id+"/start")];case 3:return i.sent(),[4,ae.a.get("/api/game/"+r.id)];case 4:return[2,i.sent()]}})})},ve=function(){function e(e,t,n,r,o){Object.assign(this,{unit:e,from:t,to:n,moveType:r,supportFrom:o})}return e.from=function(t){return new e("",t.from,t.to,t.moveType,t.supportFrom)},e.prototype.toObject=function(){return{unit:this.unit,moveType:this.moveType,from:this.from,to:this.to,supportFrom:this.supportFrom,wasSuccessful:this.wasSuccessful}},e}(),ge={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},xe=function(){function e(e,t,n,r){var o=this;this.draw=function(e){e&&(o.turn=e),o.turn.players.forEach(function(e){o.colourTerritories(e.ownedTerritories,e.empire,e.colour),o.drawMoves(e.moves.map(ve.from)),o.drawUnits(e.ownedUnits,e.empire,e.colour)})},this.reset=function(){o.turn.players.forEach(function(e){return o.colourTerritories(e.ownedTerritories,"unowned")}),o.removeOrders(),o.removeUnits()},this.redraw=function(){o.reset(),o.draw()},this.redrawOrders=function(e){o.removeOrders(),o.drawMoves(e)},this.colourTerritories=function(e,t,n){e.forEach(function(e){return o.setOwnership(e,t,n)})},this.drawMoves=function(e){e.forEach(function(e){return o.drawOrder(e)})},this.setOwnership=function(e,t,n){Array.from(o.board.getElementsByClassName(e)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(n+"-light")})},this.drawUnit=function(e,t,n){var r=("Army"===e.unitType?o.army:o.fleet).cloneNode(!0),i=ge[e.location];r.setAttribute("class","unit "+e.unitType+" "+e.location+" "+t),r.setAttribute("x",(i.x-13).toString()),r.setAttribute("y",(i.y-18).toString());["light","medium","shadow"].forEach(function(e){Array.from(r.getElementsByClassName(e)).forEach(function(t){t.setAttribute("class",n+"-"+e)})}),o.board.appendChild(r)},this.drawOrder=function(e){o.drawLine(ge[e.from],ge[e.to])},this.drawLine=function(e,t){var n=document.createElementNS("http://www.w3.org/2000/svg","path");n.setAttribute("d","M "+e.x+" "+e.y+" L "+t.x+" "+t.y),n.setAttribute("stroke","green"),n.setAttribute("class","order"),n.style.strokeWidth="2px",n.style.markerEnd="url(#triangle)",o.board.appendChild(n)},this.removeOrders=function(){Array.from(o.board.getElementsByClassName("order")).forEach(function(e){return e.remove()})},this.removeUnits=function(){Array.from(o.board.getElementsByClassName("unit")).forEach(function(e){return e.remove()})},this.board=e,this.turn=t,this.army=n,this.fleet=r,this.draw()}return e.prototype.drawUnits=function(e,t,n){var r=this;e.forEach(function(e){return r.drawUnit(e,t,n)})},e}(),be={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Serbia","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople","Smyrna"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Rome","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna","Syria"],Belgium:["English_Channel","North_Sea","Burgundy","Holland","Picardy","Ruhr"],Berlin:["Baltic_Sea","Kiel","Munich","Prussia","Silesia"],Bohemia:["Galicia","Munich","Silesia","Tyrolia","Vienna"],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Paris","Picardy"],Budapest:["Galicia","Rumania","Serbia","Trieste","Vienna"],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece","Serbia"],Burgundy:["Belgium","Gascony","Marseilles","Munich","Paris","Picardy","Ruhr"],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Liverpool","Yorkshire"],Finland:["Gulf_of_Bothnia","Norway","St_Petersburg__nc","St_Petersburg__sc","Sweden"],Galicia:["Bohemia","Budapest","Rumania","Silesia","Ukraine","Vienna","Warsaw"],Gascony:["Mid_Atlantic_Ocean","Brest","Burgundy","Marseilles","Paris","Spain__nc","Spain__sc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc","Serbia"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Munich","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Edinburgh","Wales","Yorkshire"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Moscow","Prussia","St_Petersburg__sc","Warsaw"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Burgundy","Gascony","Piedmont","Spain__sc"],Moscow:["Livonia","Sevastopol","St_Petersburg__nc","St_Petersburg__sc","Ukraine","Warsaw"],Munich:["Berlin","Bohemia","Burgundy","Kiel","Ruhr","Silesia","Tyrolia"],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden"],Paris:["Brest","Burgundy","Gascony","Picardy"],Picardy:["English_Channel","Belgium","Brest","Burgundy","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Tyrolia","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia","Silesia","Warsaw"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Burgundy","Holland","Kiel","Munich"],Rumania:["Black_Sea","Budapest","Galicia","Serbia","Sevastopol","Ukraine"],Serbia:["Albania","Budapest","Bulgaria__sc","Greece","Rumania","Trieste"],Sevastopol:["Black_Sea","Armenia","Moscow","Rumania","Ukraine"],Silesia:["Berlin","Bohemia","Galicia","Munich","Prussia","Warsaw"],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal","Spain__sc"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal","Spain__nc"],St_Petersburg__nc:["Barents_Sea","Finland","Moscow","St_Petersburg__sc"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia","Moscow","St_Petersburg__nc"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Budapest","Serbia","Tyrolia","Venice","Vienna"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:["Bohemia","Munich","Piedmont","Trieste","Venice","Vienna"],Ukraine:["Galicia","Moscow","Rumania","Sevastopol","Warsaw"],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany","Tyrolia"],Vienna:["Bohemia","Budapest","Galicia","Trieste","Tyrolia"],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:["Galicia","Livonia","Moscow","Prussia","Silesia","Ukraine"],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},Se={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany","Western_Mediterranean"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis","Tyrrhenian_Sea"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna"],Belgium:["English_Channel","North_Sea","Holland","Picardy"],Berlin:["Baltic_Sea","Kiel","Prussia"],Bohemia:[],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Picardy"],Budapest:[],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece"],Burgundy:[],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Yorkshire"],Finland:["Gulf_of_Bothnia","St_Petersburg__sc","Sweden"],Galicia:[],Gascony:["Mid_Atlantic_Ocean","Brest","Spain__nc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Wales"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Prussia","St_Petersburg__sc"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Gascony","Piedmont","Spain__sc"],Moscow:[],Munich:[],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden","St_Petersburg__nc"],Paris:[],Picardy:["English_Channel","Belgium","Brest","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Holland","Kiel"],Rumania:["Black_Sea","Sevastopol"],Serbia:[],Sevastopol:["Black_Sea","Armenia","Rumania"],Silesia:[],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal"],St_Petersburg__nc:["Barents_Sea","Norway"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Venice"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:[],Ukraine:[],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany"],Vienna:[],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:[],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},we={movement:["Move","support","hold"],retreat:["retreat"],build:["build","disband"]},Te=function(e,t,n){var r,o=function(e){return function(t){return e.players.find(function(e){return e.playerID===t})}}(e)(n);if(!o)return console.log("Player not found"),!1;if(!(r=o,function(e){return r.ownedUnits.find(function(t){return t.location===e})})(t.from))return console.log("Unit not found"),!1;if(!(we[e.info.phase]||[]).includes(t.moveType))return console.log("not included",t.moveType),console.log("turn.info.phase: "+e.info.phase),!1;var i,a=(i=t.unit,function(e){return function(t){var n="Army"===i?be:Se;return console.log("inside areAdjacent..."),console.log(i,n),n[e].includes(t)}})(t.to);switch(t.moveType){case"Move":return!!a(t.from)||(console.log("is not adjacent"),!1);case"support":return!!a(t.from)&&!!a(t.supportFrom);case"retreat":return!!a(t.from);case"hold":case"disband":return!0}return!1},Ae=new(function(){return function(){var e=this;this.orders=[],this.units={},this.run=function(){},this.setup=function(t,n,r){e.mapSvg=t.map,e.armySvg=t.army,e.fleetSvg=t.fleet,e.turn=n,e.playerID=r,e.playerEmpire=e.turn.players.find(function(e){return e.playerID===r}).empire,console.log("playing as ",e.playerEmpire),e.turn.players.forEach(function(t){return e.units[t.empire]=t.ownedUnits}),e.boardPainter=new xe(e.mapSvg,n,e.armySvg,e.fleetSvg),e.orders=e.turn.players.find(function(e){return e.playerID===r}).moves.map(ve.from),e.boardPainter.redraw();var o=Array.from(e.mapSvg.getElementsByClassName("seaTile"));o.push.apply(o,Array.from(e.mapSvg.getElementsByClassName("landTile"))),o.forEach(function(t){t.addEventListener("click",function(n){e.onClick(t.getAttribute("title"))})}),Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(t){t.addEventListener("click",function(n){return e.onClick(t.classList[2])})})},this.clearMap=function(){e.mapSvg&&(Array.from(e.mapSvg.getElementsByClassName("unit")).forEach(function(e){return e.remove()}),Array.from(e.mapSvg.getElementsByClassName("order")).forEach(function(e){return e.remove()}))},this.onClick=function(t){e.tileSelected&&be[e.tileSelected].includes(t)?(e.finishOrder(t),console.log("finishingOrder")):(console.log("startingOrder"),e.startOrder(t))},this.finishOrder=function(t){console.log(e.units[e.playerEmpire],e.tileSelected);var n=e.units[e.playerEmpire].find(function(t){return t.location===e.tileSelected});e.orders=e.orders.filter(function(t){return t.from!==e.tileSelected}),console.log(e.turn);var r=new ve(n.unitType,e.tileSelected,t,"Move");console.log(Te(e.turn,r.toObject(),e.playerID)),Te(e.turn,r.toObject(),e.playerID)&&(e.orders.push(r),e.boardPainter.redrawOrders(e.orders),e.tileSelected=null)},this.startOrder=function(t){e.playerHasUnitAt(t)&&(e.tileSelected=t)},this.playerHasUnitAt=function(t){return!!e.units[e.playerEmpire].find(function(e){return e.location===t})}}}()),Be=(n(96),{mapTitle:"Classic",viewBox:"0 0 609 559",territories:[{title:"Adriatic_Sea",tileType:"seaTile",id:"w",path:"M 322 480 L 297 456 L 300 453 L 290 453 L 278 443 L 272 424 L 260 417 L 261 401 L 270 398 L 276 399 L 275 403 L 278 410 L 282 401 L 286 402 L 289 418 L 306 436 L 331 454 L 331 477 L 335 480 L 322 480",textLocation:{x:"280",y:"427"}},{title:"Aegean_Sea",tileType:"seaTile",id:"w",path:"M 376 537 L 371 520 L 378 521 L 377 513 L 386 516 L 385 509 L 370 494 L 371 491 L 378 494 L 368 483 L 371 477 L 379 484 L 382 483 L 381 477 L 386 478 L 380 472 L 392 472 L 400 468 L 408 470 L 410 473 L 414 475       L 410 482 L 409 487 L 417 486 L 417 489 L 420 495 L 417 498 L 417 507 L 423 510 L 427 524 L 435 523 L 435 530 L 416 549 L 412 547 L 387 546 L 383 544 L 376 537",textLocation:{x:"394",y:"510"}},{title:"Baltic_Sea",tileType:"seaTile",id:"w",path:"M 266 255 L 271 260 L 278 254 L 277 250 L 280 248 L 279 243 L 282 253 L 289 254 L 294 245 L 305 244 L 312 229 L 311 220 L 359 220 L 349 229 L 347 243 L 347 248 L 348 254 L 344 262 L 337 264 L 334 273 L 328 274       L 326 265 L 314 266 L 307 273 L 294 275 L 286 274 L 287 267 L 280 266 L 266 275 L 261 274 L 260 269 L 256 266 L 256 263 L 254 255 L 266 255",textLocation:{x:"300",y:"257"}},{title:"Barents_Sea",tileType:"seaTile",id:"w",path:"M 540 0 L 535 9 L 530 6 L 517 19 L 516 33 L 513 38 L 513 23 L 507 20 L 505 26 L 499 33 L 492 48 L 495 58 L 488 60 L 479 57 L 477 55 L 481 50 L 473 43 L 466 45 L 472 62 L 478 66 L 478 74 L 472 72 L 468 74 L 457 91       L 469 100 L 467 106 L 462 109 L 444 101 L 442 110 L 447 115 L 454 119 L 452 122 L 434 118 L 426 103 L 426 94 L 414 88 L 412 83 L 445 84 L 457 79 L 459 66 L 453 61 L 417 47 L 405 49 L 401 45 L 397 48 L 391 47 L 395 41 L 394 38 L 384 33 L 382 40       L 380 33 L 377 31 L 374 38 L 371 33 L 366 42 L 366 33 L 362 33 L 362 0 L 540 0",textLocation:{x:"440",y:"15"}},{title:"Black_Sea",tileType:"seaTile",id:"w",path:"M 440 458 L 430 455 L 426 450 L 422 441 L 425 427 L 429 426 L 430 423 L 432 409 L 439 404 L 438 397 L 446 378 L 459 375 L 461 377 L 459 379 L 465 383 L 476 381 L 478 383 L 472 385 L 468 392 L 477 396 L 477 401       L 486 404 L 488 397 L 494 396 L 497 392 L 507 389 L 506 384 L 494 387 L 485 378 L 503 364 L 526 351 L 527 354 L 514 365 L 517 371 L 520 371 L 515 384 L 511 383 L 510 386 L 517 393 L 528 394 L 554 406 L 567 408 L 573 417 L 570 427 L 555 438       L 551 437 L 520 441 L 514 438 L 511 440 L 502 433 L 481 438 L 470 447 L 464 457 L 442 460 L 440 458",textLocation:{x:"480",y:"420"}},{title:"Eastern_Mediterranean",tileType:"seaTile",id:"w",path:"M 435 530 L 441 526 L 447 528 L 453 534 L 464 531 L 466 521 L 475 520 L 485 528 L 491 530 L 505 526 L 511 514 L 520 517 L 527 508 L 530 509 L 525 518 L 526 530 L 532 535 L 528 559 L 400 559 L 400 554 L 414 552 L 416 549 L 435 530",textLocation:{x:"435",y:"548"}},{title:"English_Channel",tileType:"seaTile",id:"w",path:"M 173 301 L 169 311 L 153 315 L 155 320 L 150 319 L 144 318 L 142 312 L 136 310 L 136 326 L 124 323 L 122 318 L 102 317 L 88 303 L 100 291 L 110 292 L 120 295 L 124 291 L 134 294 L 147 295 L 160 298 L 168 296 L 173 301",textLocation:{x:"105",y:"308"}},{title:"Gulf_of_Lyon",tileType:"seaTile",id:"w",path:"M 115 469 L 110 461 L 124 444 L 131 439 L 146 438 L 157 432 L 158 425 L 158 418 L 169 412 L 176 417 L 188 422 L 198 421 L 211 416 L 222 410 L 233 415 L 238 431 L 224 431 L 221 434 L 211 436 L 213 451 L 218 454       L 218 458 L 214 461 L 206 462 L 205 466 L 154 466 L 148 463 L 142 469 L 115 469",textLocation:{x:"160",y:"450"}},{title:"Gulf_of_Bothnia",tileType:"seaTile",id:"w",path:"M 311 220 L 314 209 L 322 206 L 328 203 L 331 193 L 326 183 L 320 182 L 321 161 L 330 146 L 343 138 L 351 128 L 347 121 L 349 112 L 355 104 L 362 107 L 368 108 L 372 120 L 366 121 L 359 136 L 345 151 L 347 160       L 350 165 L 348 178 L 349 184 L 357 186 L 365 191 L 384 185 L 402 177 L 403 183 L 411 184 L 414 187 L 408 187 L 400 192 L 399 197 L 387 196 L 371 198 L 369 202 L 365 204 L 368 210 L 372 213 L 373 221 L 377 227 L 373 229 L 366 228 L 359 220 L 311 220",textLocation:{x:"328",y:"175"}},{title:"Helgoland_Bight",tileType:"seaTile",id:"w",path:"M 245 237 L 243 247 L 244 254 L 243 257 L 245 263 L 244 270 L 244 273 L 235 277 L 234 274 L 230 273 L 226 275 L 211 274 L 211 237 L 245 237",textLocation:{x:"220",y:"265"}},{title:"Ionian_Sea",tileType:"seaTile",id:"w",path:"M 289 511 L 290 514 L 295 515 L 308 500 L 311 491 L 304 484 L 310 480 L 318 485 L 322 485 L 322 480 L 335 480 L 339 487 L 346 498 L 350 498 L 347 500 L 352 508 L 367 507 L 371 511 L 355 510 L 350 514 L 357 521       L 359 533 L 360 528 L 367 536 L 368 531 L 376 537 L 383 544 L 380 547 L 383 550 L 400 554 L 400 559 L 232 559 L 234 551 L 232 544 L 225 535 L 231 531 L 236 524 L 247 513 L 258 519 L 273 531 L 281 532 L 282 521 L 285 513 L 285 511 L 289 511",textLocation:{x:"305",y:"535"}},{title:"Irish_Sea",tileType:"seaTile",id:"w",path:"M 100 291 L 112 287 L 122 281 L 130 282 L 127 276 L 119 272 L 116 272 L 115 265 L 128 262 L 126 256 L 121 257 L 132 250 L 135 250 L 139 240 L 136 229 L 130 227 L 120 227 L 110 232 L 109 246 L 98 259 L 87 257       L 70 261 L 58 273 L 88 303 L 100 291",textLocation:{x:"80",y:"275"}},{title:"Mid_Atlantic_Ocean",tileType:"seaTile",id:"w",path:"M 102 317 L 100 322 L 103 328 L 109 329 L 123 344 L 122 350 L 123 357 L 128 363 L 121 382 L 122 384 L 112 399 L 101 396 L 96 397 L 72 384 L 59 381 L 54 375 L 48 374 L 46 378 L 39 375 L 33 381 L 35 384 L 32 396       L 30 406 L 17 427 L 14 427 L 10 433 L 13 440 L 15 441 L 12 450 L 13 454 L 8 462 L 19 469 L 27 468 L 33 475 L 34 484 L 37 490 L 37 495 L 33 496 L 17 518 L 0 520 L 0 273 L 58 273 L 102 317",textLocation:{x:"25",y:"345"}},{title:"North_Atlantic_Ocean",tileType:"seaTile",id:"w",path:"M 70 261 L 64 250 L 67 242 L 71 245 L 81 234 L 74 228 L 80 225 L 78 218 L 82 217 L 89 220 L 94 220 L 95 218 L 94 216 L 97 216 L 101 212 L 110 212 L 119 217 L 120 227 L 130 227 L 130 223 L 138 217 L 138 214       L 130 208 L 129 197 L 139 189 L 140 182 L 148 177 L 148 0 L 0 0 L 0 273 L 58 273 L 70 261",textLocation:{x:"40",y:"120"}},{title:"North_Sea",tileType:"seaTile",id:"w",path:"M 168 296 L 172 294 L 165 293 L 176 283 L 178 274 L 177 270 L 171 268 L 168 270 L 166 269 L 169 265 L 170 252 L 168 246 L 163 239 L 163 226 L 161 218 L 157 216 L 151 215 L 158 214 L 165 210 L 170 202 L 171 197 L 171 181       L 198 154 L 236 154 L 237 160 L 233 167 L 231 180 L 233 186 L 229 192 L 231 201 L 241 209 L 241 224 L 248 224 L 245 237 L 211 237 L 211 274 L 207 279 L 205 279 L 205 276 L 198 289 L 191 299 L 173 301 L 168 296",textLocation:{x:"190",y:"230"}},{title:"Norwegian_Sea",tileType:"seaTile",id:"w",path:"M 362 33 L 357 39 L 343 44 L 324 54 L 320 64 L 310 75 L 309 84 L 303 86 L 292 111 L 277 132 L 269 134 L 264 142 L 258 141 L 236 154 L 198 154 L 171 181 L 171 197 L 158 193 L 152 194 L 154 188 L 161 185 L 162 181       L 148 177 L 148 0 L 362 0 L 362 33",textLocation:{x:"220",y:"70"}},{title:"Skagerrak",tileType:"seaTile",id:"w",path:"M 241 209 L 246 210 L 266 201 L 270 193 L 275 203 L 277 218 L 276 224 L 282 236 L 279 240 L 279 243 L 275 242 L 269 243 L 266 240 L 267 234 L 266 221 L 263 223 L 248 224 L 241 224 L 241 209",textLocation:{x:"255",y:"220"}},{title:"Tyrrhenian_Sea",tileType:"seaTile",id:"w",path:"M 238 431 L 247 442 L 248 447 L 256 458 L 271 464 L 276 474 L 290 487 L 294 502 L 289 511 L 285 511 L 285 508 L 276 510 L 263 510 L 257 507 L 252 508 L 247 513 L 236 524 L 233 523 L 224 527 L 223 518       L 218 516 L 218 490 L 220 490 L 224 468 L 222 458 L 218 458 L 218 454 L 223 450 L 225 444 L 225 436 L 224 431 L 238 431",textLocation:{x:"230",y:"495"}},{title:"Western_Mediterranean",tileType:"seaTile",id:"w",path:"M 37 490 L 47 488 L 52 489 L 60 486 L 78 491 L 83 494 L 86 485 L 90 483 L 98 484 L 107 474 L 113 473 L 115 469 L 142 469 L 150 471 L 154 466 L 205 466 L 206 476 L 204 485 L 208 492 L 212 492 L 217 489 L 218 490       L 218 516 L 212 517 L 208 521 L 203 520 L 179 515 L 169 518 L 150 511 L 117 509 L 106 511 L 99 515 L 89 512 L 84 518 L 79 520 L 68 516 L 68 511 L 64 514 L 46 509 L 42 502 L 41 494 L 37 495 L 37 490",textLocation:{x:"110",y:"495"}},{title:"Switzerland",tileType:"landTile",id:"s",path:"M 209 363 L 208 367 L 194 382 L 197 385 L 203 379 L 207 386 L 213 387 L 221 385 L 227 390 L 229 385 L 243 388 L 245 384 L 241 378 L 234 374 L 234 366 L 232 363 L 225 362 L 222 365 L 209 363",textLocation:{x:"215",y:"378"}},{title:"Ireland",tileType:"landTile",id:"s",path:"M 70 261 L 64 250 L 67 242 L 71 245 L 81 234 L 74 228 L 80 225 L 78 218 L 82 217 L 89 220 L 94 220 L 95 218 L 94 216 L 97 216 L 101 212 L 110 212 L 119 217 L 120 227 L 120 227 L 110 232 L 109 246 L 98 259 L 87 257 L 70 261",textLocation:{x:"215",y:"378"}},{title:"Corsica",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Sardinia",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Mallorca",tileType:"landTile",id:"s",path:"M 154 466 L 148 463 L 142 469 L 150 471 L 154 466",textLocation:{x:"215",y:"378"}},{title:"Sicily",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Crete",tileType:"landTile",id:"s",path:"",textLocation:{x:"215",y:"378"}},{title:"Albania",tileType:"landTile",id:"l Albania",path:"M 331 454 L 331 477 L 335 480 L 339 487 L 350 477 L 350 471 L 346 466 L 346 452 L 337 446 L 330 445 L 331 454",textLocation:{x:"337",y:"469"}},{title:"Ankara",tileType:"landTile",id:"l Ankara",path:"M 555 438 L 551 437 L 520 441 L 514 438 L 511 440 L 502 433 L 481 438 L 470 447 L 464 457 L 468 461 L 468 479 L 466 491 L 473 491 L 490 480 L 501 482 L 508 480 L 531 460 L 546 462 L 555 460 L 557 449 L 555 438",textLocation:{x:"510",y:"455"}},{title:"Apulia",tileType:"landTile",id:"l Apulia",path:"M 304 484 L 310 480 L 318 485 L 322 485 L 322 480 L 297 456 L 300 453 L 290 453 L 278 443 L 274 447 L 279 451 L 280 455 L 279 458 L 293 481 L 304 484",textLocation:{x:"282",y:"467"}},{title:"Armenia",tileType:"landTile",id:"l Armenia",path:"M 609 493 L 584 478 L 563 479 L 562 471 L 556 467 L 555 460 L 557 449 L 555 438 L 570 427 L 589 442 L 594 439 L 603 441 L 609 440 L 609 493",textLocation:{x:"572",y:"463"}},{title:"Belgium",tileType:"landTile",id:"l Belgium",path:"M 191 299 L 194 303 L 206 306 L 205 311 L 208 315 L 210 326 L 205 331 L 192 323 L 184 315 L 169 311 L 173 301 L 191 299",textLocation:{x:"192",y:"316"}},{title:"Berlin",tileType:"landTile",id:"l Berlin",path:"M 294 275 L 286 274 L 287 267 L 280 266 L 266 275 L 266 283 L 262 287 L 264 293 L 261 296 L 263 310 L 288 305 L 296 300 L 297 296 L 292 290 L 294 275",textLocation:{x:"272",y:"292"}},{title:"Bohemia",tileType:"landTile",id:"l Bohemia",path:"M 281 356 L 276 346 L 268 343 L 264 329 L 266 325 L 278 326 L 288 321 L 297 322 L 311 334 L 314 332 L 321 339 L 322 347 L 316 348 L 303 346 L 295 349 L 292 357 L 281 356",textLocation:{x:"278",y:"338"}},{title:"Brest",tileType:"landTile",id:"l Brest",path:"M 150 319 L 144 318 L 142 312 L 136 310 L 136 326 L 124 323 L 122 318 L 102 317 L 100 322 L 103 328 L 109 329 L 123 344 L 122 350 L 123 357 L 128 363 L 146 365 L 146 337 L 148 329 L 150 319",textLocation:{x:"130",y:"345"}},{title:"Budapest",tileType:"landTile",id:"l Budapest",path:"M 394 376 L 395 382 L 401 385 L 406 396 L 401 402 L 387 402 L 367 406 L 365 412 L 360 413 L 342 410 L 338 412 L 335 410 L 332 410 L 323 408 L 321 398 L 311 394 L 308 383 L 311 375 L 322 370 L 335 354 L 337 350       L 350 347 L 360 351 L 368 353 L 377 360 L 378 363 L 384 365 L 394 376",textLocation:{x:"350",y:"390"}},{title:"Bulgaria__ec",tileType:"landTile",id:"l",path:"M 413 464 L 412 454 L 420 451 L 426 450 L 422 441 L 425 427 L 429 426 L 430 423 L 422 420 L 410 420 L 404 422 L 398 427 L 390 425 L 382 427 L 375 423 L 370 425 L 367 421 L 365 425 L 368 433 L 371 438 L 413 464",textLocation:{x:"395",y:"443"}},{title:"Bulgaria__sc",tileType:"landTile",id:"l",path:"M 371 438 L 366 439 L 371 456 L 365 461 L 369 464 L 376 464 L 388 460 L 392 472 L 400 468 L 408 470 L 413 464 L 371 438"},{title:"Burgundy",tileType:"landTile",id:"l Burgundy",path:"M 192 323 L 205 331 L 204 338 L 211 346 L 213 352 L 209 363 L 208 367 L 194 382 L 178 381 L 178 390 L 173 396 L 168 395 L 163 387 L 165 383 L 158 380 L 156 374 L 165 365 L 185 344 L 188 332 L 192 323",textLocation:{x:"171",y:"371"}},{title:"Clyde",tileType:"landTile",id:"l Clyde",path:"M 138 214 L 130 208 L 129 197 L 139 189 L 140 182 L 148 177 L 162 181 L 161 185 L 154 188 L 152 194 L 146 200 L 144 213 L 138 214",textLocation:{x:"133",y:"201"}},{title:"Constantinople",tileType:"landTile",id:"l Constantinople",path:"M 408 470 L 410 473 L 414 475 L 410 482 L 409 487 L 417 486 L 417 489 L 423 487 L 432 493 L 452 495 L 466 491 L 468 479 L 468 461 L 464 457 L 442 460 L 440 458 L 430 455 L 426 450 L 420 451 L 412 454 L 413 464 L 408 470",textLocation:{x:"410",y:"483"}},{title:"Denmark",tileType:"landTile",id:"l Denmark",path:"M 279 243 L 275 242 L 269 243 L 266 240 L 267 234 L 266 221 L 263 223 L 248 224 L 245 237 L 243 247 L 244 254 L 254 255 L 266 255 L 271 260 L 278 254 L 277 250 L 280 248  L 279 243",textLocation:{x:"252",y:"235"}},{title:"Edinburgh",tileType:"landTile",id:"l Edinburgh",path:"M 152 194 L 158 193 L 171 197 L 170 202 L 165 210 L 158 214 L 151 215 L 157 216 L 161 218 L 163 226 L 155 228 L 145 217 L 144 213 L 146 200 L 152 194",textLocation:{x:"158",y:"209"}},{title:"Finland",tileType:"landTile",id:"l Finland",path:"M 362 107 L 368 108 L 372 120 L 366 121 L 359 136 L 345 151 L 347 160 L 350 165 L 348 178 L 349 184 L 357 186 L 365 191 L 384 185 L 402 177 L 412 161 L 410 152 L 414 147 L 410 130 L 402 118 L 401 110 L 392 92       L 393 73 L 387 68 L 388 61 L 386 58 L 388 54 L 379 48 L 370 49 L 369 61 L 355 62 L 346 54 L 342 61 L 356 71 L 362 107",textLocation:{x:"375",y:"160"}},{title:"Galicia",tileType:"landTile",id:"l Galicia",path:"M 333 330 L 341 330 L 344 332 L 353 327 L 356 323 L 361 324 L 367 329 L 374 327 L 379 324 L 383 327 L 385 332 L 399 338 L 404 354 L 403 360 L 404 371 L 394 376 L 384 365 L 378 363 L 377 360 L 368 353 L 360 351       L 350 347 L 337 350 L 329 346 L 322 347 L 321 339 L 322 347 L 321 339 L 325 340 L 329 338 L 333 330",textLocation:{x:"355",y:"343"}},{title:"Gascony",tileType:"landTile",id:"l Gascony",path:"M 128 363 L 121 382 L 122 384 L 112 399 L 113 407 L 123 412 L 134 417 L 135 414 L 142 417 L 149 403 L 157 397 L 168 395 L 163 387 L 165 383 L 158 380 L 156 374 L 149 372 L 146 365 L 128 363",textLocation:{x:"130",y:"390"}},{title:"Greece",tileType:"landTile",id:"l Greece",path:"M 339 487 L 346 498 L 350 498 L 347 500 L 352 508 L 367 507 L 371 511 L 355 510 L 350 514 L 357 521 L 359 533 L 360 528 L 367 536 L 368 531 L 376 537 L 371 520 L 378 521 L 377 513 L 386 516 L 385 509 L 370 494       L 371 491 L 378 494 L 368 483 L 371 477 L 379 484 L 382 483 L 381 477 L 386 478 L 380 472 L 392 472 L 388 460 L 376 464 L 369 464 L 361 467 L 356 471 L 350 471 L 350 477 L 339 487",textLocation:{x:"346",y:"491"}},{title:"Holland",tileType:"landTile",id:"l Holland",path:"M 226 275 L 227 280 L 225 292 L 220 298 L 215 297 L 213 302 L 210 313 L 208 315 L 205 311 L 206 306 L 194 303 L 191 299 L 198 289 L 205 276 L 205 279 L 207 279 L 211 274 L 226 275",textLocation:{x:"210",y:"295"}},{title:"Kiel",tileType:"landTile",id:"l Kiel",path:"M 244 254 L 243 257 L 245 263 L 244 270 L 244 273 L 235 277 L 234 274 L 230 273 L 226 275 L 227 280 L 225 292 L 220 298 L 215 297 L 213 302 L 232 308 L 241 316 L 243 322 L 263 310 L 261 296 L 264 293       L 262 287 L 266 283 L 266 275 L 261 274 L 260 269 L 256 266 L 256 263 L 254 255 L 244 254",textLocation:{x:"237",y:"285"}},{title:"Liverpool",tileType:"landTile",id:"l Liverpool",path:"M 128 262 L 126 256 L 121 257 L 132 250 L 135 250 L 139 240 L 136 229 L 130 227 L 130 223 L 138 217 L 138 214 L 144 213 L 145 217 L 155 228 L 155 239 L 151 248 L 150 264 L 143 262 L 128 262",textLocation:{x:"140",y:"230"}},{title:"Livonia",tileType:"landTile",id:"l Livonia",path:"M 369 202 L 365 204 L 368 210 L 372 213 L 373 221 L 377 227 L 373 229 L 366 228 L 359 220 L 349 229 L 347 243 L 354 251 L 356 261 L 362 260 L 367 265 L 365 281 L 372 283 L 379 290 L 389 285 L 392 278       L 404 275 L 405 239 L 409 228 L 405 217 L 394 205 L 382 206 L 372 205 L 369 202",textLocation:{x:"370",y:"250"}},{title:"London",tileType:"landTile",id:"l London",path:"M 166 269 L 168 270 L 171 268 L 177 270 L 178 274 L 176 283 L 165 293 L 172 294 L 168 296 L 160 298 L 147 295 L 145 281 L 150 277 L 153 271 L 166 269",textLocation:{x:"160",y:"280"}},{title:"Marseilles",tileType:"landTile",id:"l Marseilles",path:"M 142 417 L 149 403 L 157 397 L 168 395 L 173 396 L 178 390 L 178 381 L 194 382 L 197 385 L 203 379 L 207 386 L 204 390 L 207 396 L 201 399 L 204 402 L 203 410 L 211 416 L 198 421 L 188 422 L 176 417       L 169 412 L 158 418 L 158 425 L 154 427 L 142 417",textLocation:{x:"165",y:"410"}},{title:"Moscow",tileType:"landTile",id:"l Moscow",path:"M 609 117 L 598 132 L 573 143 L 564 159 L 534 164 L 515 169 L 489 184 L 476 183 L 458 194 L 456 207 L 457 210 L 451 213 L 447 209 L 439 211 L 428 225 L 421 229 L 409 228 L 405 239 L 404 275 L 392 278       L 389 285 L 379 290 L 386 309 L 390 306 L 456 292 L 468 295 L 477 289 L 494 295 L 505 280 L 516 286 L 526 287 L 533 283 L 549 284 L 554 304 L 564 305 L 569 321 L 597 330 L 609 330 L 609 117",textLocation:{x:"460",y:"265"}},{title:"Munich",tileType:"landTile",id:"l Munich",path:"M 234 366 L 243 370 L 246 369 L 250 371 L 267 368 L 271 370 L 269 362 L 275 362 L 281 356 L 276 346 L 268 343 L 264 329 L 266 325 L 278 326 L 288 321 L 284 314 L 288 305 L 263 310 L 243 322 L 237 322       L 219 344 L 211 346 L 213 352 L 209 363 L 222 365 L 225 362 L 232 363 L 234 366",textLocation:{x:"235",y:"350"}},{title:"Naples",tileType:"landTile",id:"l Naples",path:"M 271 464 L 276 474 L 290 487 L 294 502 L 289 511 L 290 514 L 295 515 L 308 500 L 311 491 L 304 484 L 293 481 L 279 458 L 271 464",textLocation:{x:"293",y:"493"}},{title:"North_Africa",tileType:"landTile",id:"l North Africa",path:"M 203 520 L 179 515 L 169 518 L 150 511 L 117 509 L 106 511 L 99 515 L 89 512 L 84 518 L 79 520 L 68 516 L 68 511 L 64 514 L 46 509 L 42 502 L 41 494 L 37 495 L 33 496 L 17 518 L 0 520 L 0 559 L 195 559 L 197 527 L 203 520",textLocation:{x:"100",y:"540"}},{title:"Norway",tileType:"landTile",id:"l Norway",path:"M 397 48 L 391 47 L 395 41 L 394 38 L 384 33 L 382 40 L 380 33 L 377 31 L 374 38 L 371 33 L 366 42 L 366 33 L 362 33 L 357 39 L 343 44 L 324 54 L 320 64 L 310 75 L 309 84 L 303 86 L 292 111 L 277 132 L 269 134       L 264 142 L 258 141 L 236 154 L 237 160 L 233 167 L 231 180 L 233 186 L 229 192 L 231 201 L 241 209 L 246 210 L 266 201 L 270 193 L 275 203 L 279 204 L 287 177 L 285 170 L 290 164 L 292 133 L 301 132 L 300 126 L 309 115 L 308 104 L 311 101       L 324 71 L 332 74 L 330 64 L 341 65 L 342 61 L 346 54 L 355 62 L 369 61 L 370 49 L 379 48 L 388 54 L 386 58 L 388 61 L 397 48",textLocation:{x:"250",y:"175"}},{title:"Paris",tileType:"landTile",id:"l Paris",path:"M 146 365 L 149 372 L 156 374 L 165 365 L 185 344 L 188 332 L 172 328 L 165 331 L 159 331 L 148 329 L 146 337 L 146 365",textLocation:{x:"155",y:"358"}},{title:"Picardy",tileType:"landTile",id:"l Picardy",path:"M 169 311 L 153 315 L 155 320 L 150 319 L 148 329 L 159 331 L 165 331 L 172 328 L 188 332 L 192 323 L 184 315 L 169 311",textLocation:{x:"160",y:"326"}},{title:"Piedmont",tileType:"landTile",id:"l Piedmont",path:"M 207 386 L 204 390 L 207 396 L 201 399 L 204 402 L 203 410 L 211 416 L 222 410 L 233 415 L 236 411 L 233 404 L 246 392 L 243 388 L 229 385 L 227 390 L 221 385 L 213 387 L 207 386",textLocation:{x:"215",y:"408"}},{title:"Portugal",tileType:"landTile",id:"l Portugal",path:"M 32 396 L 30 406 L 17 427 L 14 427 L 10 433 L 13 440 L 15 441 L 12 450 L 13 454 L 8 462 L 19 469 L 27 468 L 36 457 L 34 447 L 40 441 L 37 431 L 42 432 L 52 412 L 61 411 L 62 407 L 55 400 L 42 399 L 43 395 L 32 396",textLocation:{x:"15",y:"420"}},{title:"Prussia",tileType:"landTile",id:"l Prussia",path:"M 347 243 L 347 248 L 348 254 L 344 262 L 337 264 L 334 273 L 328 274 L 326 265 L 314 266 L 307 273 L 294 275 L 292 290 L 297 296 L 296 300 L 320 303 L 324 299 L 326 292 L 341 287 L 345 289 L 359 286       L 365 281 L 367 265 L 362 260 L 356 261 L 354 251 L 347 243",textLocation:{x:"320",y:"283"}},{title:"Rome",tileType:"landTile",id:"l Rome",path:"M 247 442 L 248 447 L 256 458 L 271 464 L 279 458 L 280 455 L 279 451 L 274 447 L 263 434 L 250 438 L 247 442",textLocation:{x:"257",y:"452"}},{title:"Ruhr",tileType:"landTile",id:"l Ruhr",path:"M 213 302 L 210 313 L 208 315 L 210 326 L 205 331 L 204 338 L 211 346 L 219 344 L 237 322 L 243 322 L 241 316 L 232 308 L 213 302",textLocation:{x:"215",y:"330"}},{title:"Rumania",tileType:"landTile",id:"l Rumania",path:"M 403 360 L 404 371 L 394 376 L 395 382 L 401 385 L 406 396 L 401 402 L 387 402 L 367 406 L 365 412 L 367 421 L 370 425 L 375 423 L 382 427 L 390 425 L 398 427 L 404 422 L 410 420 L 422 420 L 430 423 L 432 409       L 439 404 L 438 397 L 427 399 L 422 382 L 423 376 L 414 372 L 411 361 L 403 360",textLocation:{x:"390",y:"410"}},{title:"Serbia",tileType:"landTile",id:"l Serbia",path:"M 365 412 L 360 413 L 342 410 L 338 412 L 335 410 L 332 410 L 330 416 L 331 424 L 327 429 L 330 437 L 337 446 L 346 452 L 346 466 L 350 471 L 356 471 L 361 467 L 369 464 L 365 461 L 371 456 L 366 439 L 371 438       L 368 433 L 365 425 L 367 421 L 365 412",textLocation:{x:"340",y:"440"}},{title:"Sevastopol",tileType:"landTile",id:"l Sevastopol",path:"M 438 397 L 446 378 L 459 375 L 461 377 L 459 379 L 465 383 L 476 381 L 478 383 L 472 385 L 468 392 L 477 396 L 477 401 L 486 404 L 488 397 L 494 396 L 497 392 L 507 389 L 506 384 L 494 387 L 485 378 L 503 364       L 526 351 L 527 354 L 514 365 L 517 371 L 520 371 L 515 384 L 511 383 L 510 386 L 517 393 L 528 394 L 554 406 L 567 408 L 573 417 L 570 427 L 589 442 L 594 439 L 603 441 L 609 440 L 609 330 L 597 330 L 569 321 L 564 305 L 554 304 L 549 284       L 533 283 L 526 287 L 516 286 L 505 280 L 494 295 L 477 289 L 468 295 L 470 303 L 466 307 L 460 345 L 445 350 L 434 360 L 432 372 L 423 376 L 422 382 L 427 399 L 438 397",textLocation:{x:"540",y:"350"}},{title:"Silesia",tileType:"landTile",id:"l Silesia",path:"M 288 321 L 297 322 L 311 334 L 314 332 L 321 339 L 325 340 L 329 338 L 333 330 L 326 327 L 323 322 L 320 303 L 296 300 L 288 305 L 284 314 L 288 321",textLocation:{x:"298",y:"318"}},{title:"Smyrna",tileType:"landTile",id:"l Smyrna",path:"M 417 489 L 420 495 L 417 498 L 417 507 L 423 510 L 427 524 L 435 523 L 435 530 L 441 526 L 447 528 L 453 534 L 464 531 L 466 521 L 475 520 L 485 528 L 491 530 L 505 526 L 511 514 L 520 517 L 527 508 L 530 509       L 536 494 L 545 486 L 555 484 L 563 479 L 562 471 L 556 467 L 555 460 L 546 462 L 531 460 L 508 480 L 501 482 L 490 480 L 473 491 L 466 491 L 452 495 L 432 493 L 423 487 L 417 489",textLocation:{x:"460",y:"510"}},{title:"Spain__nc",tileType:"landTile",id:"l",path:"M 134 417 L 123 412 L 113 407 L 112 399 L 101 396 L 96 397 L 72 384 L 59 381 L 54 375 L 48 374 L 46 378 L 39 375 L 33 381 L 35 384 L 32 396 L 43 395 L 42 399 L 55 400 L 62 407 L 61 411 L 52 412 L 42 432 L 37 431 L 40 441 L 134 417"},{title:"Spain__sc",tileType:"landTile",id:"l",path:"M 40 441 L 34 447 L 36 457 L 27 468 L 33 475 L 34 484 L 37 490 L 47 488 L 52 489 L 60 486 L 78 491 L 83 494 L 86 485 L 90 483 L 98 484 L 107 474 L 113 473 L 115 469 L 110 461 L 124 444 L 131 439 L 146 438       L 157 432 L 158 425 L 154 427 L 142 417 L 135 414 L 134 417 L 40 441",textLocation:{x:"85",y:"450"}},{title:"St_Petersburg__nc",tileType:"landTile",id:"l St_Petersburg",path:"M 534 164 L 564 159 L 573 143 L 598 132 L 609 117 L 609 0 540 0 L 535 9 L 530 6 L 517 19 L 516 33 L 513 38 L 513 23 L 507 20 L 505 26 L 499 33 L 492 48 L 495 58 L 488 60 L 479 57 L 477 55 L 481 50 L 473 43 L 466 45 L 472 62       L 478 66 L 478 74 L 472 72 L 468 74 L 457 91 L 469 100 L 467 106 L 462 109 L 444 101 L 442 110 L 447 115 L 454 119 L 452 122 L 434 118 L 426 103 L 426 94 L 414 88 L 412 83 L 445 84 L 457 79 L 459 66 L 453 61 L 417 47 L 405 49 L 401 45 L 397 48       L 388 61 L 387 68 L 393 73 L 392 92 L 401 110 L 402 118 L 410 130 L 414 147 L 534 164",textLocation:{x:"460",y:"149"}},{title:"St_Petersburg__sc",tileType:"landTile",id:"l St_Petersburg",path:"M 414 147 L 410 152 L 412 161 L 402 177 L 403 183 L 411 184 L 414 187 L 408 187 L 400 192 L 399 197 L 387 196 L 371 198 L 369 202 L 372 205 L 382 206 L 394 205 L 405 217 L 409 228 L 421 229 L 428 225 L 439 211       L 447 209 L 451 213 L 457 210 L 456 207 L 458 194 L 476 183 L 489 184 L 515 169 L 534 164 L 414 147",textLocation:{x:"408",y:"200"}},{title:"Sweden",tileType:"landTile",id:"l Sweden",path:"M 275 203 L 277 218 L 276 224 L 282 236 L 279 240 L 279 243 L 282 253 L 289 254 L 294 245 L 305 244 L 312 229 L 311 220 L 314 209 L 322 206 L 328 203 L 331 193 L 326 183 L 320 182 L 321 161 L 330 146 L 343 138       L 351 128 L 347 121 L 349 112 L 355 104 L 362 107 L 356 71 L 342 61 L 341 65 L 330 64 L 332 74 L 324 71 L 311 101 L 308 104 L 309 115 L 300 126 L 301 132 L 292 133 L 290 164 L 285 170 L 287 177 L 279 204 L 275 203",textLocation:{x:"300",y:"145"}},{title:"Syria",tileType:"landTile",id:"l Syria",path:"M 530 509 L 536 494 L 545 486 L 555 484 L 563 479 L 584 478 L 609 493 L 609 559 L 528 559 L 532 535 L 526 530 L 525 518 L 530 509",textLocation:{x:"570",y:"535"}},{title:"Trieste",tileType:"landTile",id:"l Trieste",path:"M 276 399 L 275 403 L 278 410 L 282 401 L 286 402 L 289 418 L 306 436 L 331 454 L 330 445 L 337 446 L 330 437 L 327 429 L 331 424 L 330 416 L 332 410 L 323 408 L 321 398 L 311 394 L 308 383 L 299 385 L 294 380       L 289 385 L 276 386 L 279 389 L 276 399",textLocation:{x:"305",y:"425"}},{title:"Tunis",tileType:"landTile",id:"l Tunis",path:"M 232 559 L 234 551 L 232 544 L 225 535 L 231 531 L 236 524 L 233 523 L 224 527 L 223 518 L 218 516 L 212 517 L 208 521 L 203 520 L 197 527 L 195 559 L 232 559",textLocation:{x:"208",y:"550"}},{title:"Tuscany",tileType:"landTile",id:"l Tuscany",path:"M 233 415 L 238 431 L 247 442 L 250 438 L 263 434 L 253 418 L 246 416 L 240 415 L 236 411 L 233 415",textLocation:{x:"240",y:"425"}},{title:"Tyrolia",tileType:"landTile",id:"l Tyrolia",path:"M 234 366 L 243 370 L 246 369 L 250 371 L 267 368 L 271 370 L 269 362 L 275 362 L 281 356 L 292 357 L 295 362 L 294 380 L 289 385 L 276 386 L 268 385 L 259 388 L 255 394 L 250 397 L 246 392 L 243 388 L 245 384       L 241 378 L 234 374 L 234 366",textLocation:{x:"255",y:"380"}},{title:"Ukraine",tileType:"landTile",id:"l Ukraine",path:"M 383 327 L 385 332 L 399 338 L 404 354 L 403 360 L 411 361 L 414 372 L 423 376 L 432 372 L 434 360 L 445 350 L 460 345 L 466 307 L 470 303 L 468 295 L 456 292 L 390 306 L 386 309 L 383 327",textLocation:{x:"420",y:"340"}},{title:"Venice",tileType:"landTile",id:"l Venice",path:"M 278 443 L 272 424 L 260 417 L 261 401 L 270 398 L 276 399 L 279 389 L 276 386 L 268 385 L 259 388 L 255 394 L 250 397 L 246 392 L 233 404 L 236 411 L 240 415 L 246 416 L 253 418 L 263 434 L 274 447 L 278 443",textLocation:{x:"245",y:"407"}},{title:"Vienna",tileType:"landTile",id:"l Vienna",path:"M 292 357 L 295 349 L 303 346 L 316 348 L 322 347 L 329 346 L 337 350 L 335 354 L 322 370 L 311 375 L 308 383 L 299 385 L 294 380 L 295 362 L 292 357",textLocation:{x:"305",y:"356"}},{title:"Wales",tileType:"landTile",id:"l Wales",path:"M 100 291 L 112 287 L 122 281 L 130 282 L 127 276 L 119 272 L 116 272 L 115 265 L 128 262 L 143 262 L 150 264 L 153 271 L 150 277 L 145 281 L 147 295 L 134 294 L 124 291 L 120 295 L 110 292 L 100 291",textLocation:{x:"130",y:"275"}},{title:"Warsaw",tileType:"landTile",id:"l Warsaw",path:"M 333 330 L 326 327 L 323 322 L 320 303 L 324 299 L 326 292 L 341 287 L 345 289 L 359 286 L 365 281 L 372 283 L 379 290 L 386 309 L 383 327 L 379 324 L 374 327 L 367 329 L 361 324 L 356 323 L 353 327       L 344 332 L 341 330 L 333 330",textLocation:{x:"345",y:"316"}},{title:"Yorkshire",tileType:"landTile",id:"l Yorkshire",path:"M 163 226 L 163 239 L 168 246 L 170 252 L 169 265 L 166 269 L 153 271 L 150 264 L 151 248 L 155 239 L 155 228 L 163 226",textLocation:{x:"160",y:"248"}}]}),Me=(n(166),le=function(e,t){return(le=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}le(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ke=function(){return(ke=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},je=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.doSomething=function(e){return function(){console.log(e)}},t}return Me(t,e),t.prototype.render=function(e,t){return l("g",{title:e.tile.title,class:e.tile.tileType},l("path",{class:e.tile.id,d:e.tile.path,onClick:this.doSomething(e.tile.title)}),e.tile.textLocation&&l("text",ke({},e.tile.textLocation,{className:"countryText"}),e.tile.title))},t}(F),Ce=(n(168),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ce(t,e),t.prototype.render=function(e,t){return l("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:Be.viewBox,className:"gameBoard",id:"gameBoard"},Be.territories.map(function(e){return l(je,{tile:e})}))},t}(F),Ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pe=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Ee=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Fe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={gameIsRunning:!1},t.setupGame=function(){return Pe(t,void 0,void 0,function(){var e,t,n=this;return Ee(this,function(r){switch(r.label){case 0:return[4,_e()];case 1:return e=r.sent().data,[4,ae.a.get("api/turn/"+e.currentTurn)];case 2:return t=r.sent().data,this.setState({game:e,turn:t},function(){n.runGame()}),[2]}})})},t.getLatestGame=function(){return Pe(t,void 0,void 0,function(){var e,t;return Ee(this,function(n){switch(n.label){case 0:return[4,ae.a.get("/api/game/latest")];case 1:return e=n.sent().data,[4,ae.a.get("/api/turn/"+e.currentTurn)];case 2:return t=n.sent().data,this.setState({game:e,turn:t},this.refresh),[2]}})})},t.refresh=function(){Ae.clearMap(),t.runGame()},t.fetchGame=function(e){return Pe(t,void 0,void 0,function(){var t,n;return Ee(this,function(r){switch(r.label){case 0:return[4,ae.a.get("/api/game/"+e)];case 1:return t=r.sent().data,[4,ae.a.get("/api/turn/"+t.currentTurn)];case 2:return n=r.sent().data,this.setState({game:t,turn:n}),[2]}})})},t.submitOrders=function(){return Pe(t,void 0,void 0,function(){return Ee(this,function(e){switch(e.label){case 0:return[4,ae.a.patch("/api/turn/"+this.state.game.currentTurn,{moves:Ae.orders.map(function(e){return e.toObject()}),turnID:this.state.game.currentTurn})];case 1:return e.sent(),console.log("sent!"),[2]}})})},t.nextTurn=function(){return Pe(t,void 0,void 0,function(){var e,t,n;return Ee(this,function(r){switch(r.label){case 0:return[4,ce(ae.a.post("/api/game/"+this.state.game._id+"/next"))];case 1:return e=r.sent(),t=e[0],n=e[1],t&&console.log(t),n&&this.getLatestGame(),[2]}})})},t.getSvg=function(e){var t=document.getElementById(e);return console.log(t,e),t.contentDocument.getElementById(e+"Svg")},t}return Ne(t,e),t.prototype.render=function(e,t){return l("div",{className:"page"},l("div",{className:"buttonsContainer"},l("button",{onClick:this.setupGame},"Set Up Game"),l("button",{onClick:this.getLatestGame},"Load Game"),l("button",{onClick:this.submitOrders},"Submit Orders"),l("button",{onClick:this.props.logOut},"Log out"),l("button",{onClick:this.nextTurn},"Next Turn"),l("br",null)),l("br",null),l("div",null,l("object",{id:"army",type:"image/svg+xml",data:"assets/svg/001-tank-1.svg",width:"0"}),l("object",{id:"fleet",type:"image/svg+xml",data:"assets/svg/002-cruiser.svg",width:"0"}),l(Oe,null)))},t.prototype.runGame=function(){var e=["army","fleet"].map(this.getSvg),t=e[0],n=e[1],r=document.getElementById("gameBoard");Ae.setup({map:r,army:t,fleet:n},this.state.turn,this.props.userID),Ae.run()},t}(F),Ie=n(16),Re=n.n(Ie),Ue=(n(157),n(159),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ue(t,e),t.prototype.render=function(){return l("div",{className:"formBox"},this.props.children)},t}(F),De=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),We=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Ve=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},He=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={formFields:{}},t.login=function(e){return We(t,void 0,void 0,function(){var t,n,r;return Ve(this,function(o){switch(o.label){case 0:return e.preventDefault(),console.log("attempting to log in"),console.log(this.state.formFields),[4,ce(ae.a.post("api/login",this.state.formFields))];case 1:return t=o.sent(),n=t[0],r=t[1],n&&(console.log("logging an err"),console.log(n)),r?(console.log("success!"),console.log(r.data),[4,this.props.toggleLogIn(!0)]):[3,3];case 2:o.sent(),Y("/game"),o.label=3;case 3:return[2]}})})},t.handleChange=function(e){return function(n){var r=Re()(t.state.formFields);r[e]=n.target.value,t.setState({formFields:r})}},t}return De(t,e),t.prototype.componentDidMount=function(){this.setState({formFields:{username:this.usernameInput.value,password:this.passwordInput.value}})},t.prototype.render=function(e,t){var n=this;return l("div",{className:"page"},l("h1",null,"Diplomacy"),l("br",null),l(Ge,null,l("form",{action:"api/user/authenticate",method:"post",onSubmit:this.login},"Username",l("br",null),l("input",{ref:function(e){return n.usernameInput=e},type:"text",name:"username",onChange:this.handleChange("username")}),l("br",null),"Password",l("br",null),l("input",{ref:function(e){return n.passwordInput=e},type:"text",name:"password",onChange:this.handleChange("password")}),l("br",null),l("input",{type:"submit",value:"Submit"})),"New? Register ",l(re,{href:"/register"},"here")))},t}(F),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$e=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},qe=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Ke=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={formFields:{}},t.handleSubmit=function(e){return $e(t,void 0,void 0,function(){var t,n,r;return qe(this,function(o){switch(o.label){case 0:return e.preventDefault(),[4,ce(ae.a.post("/api/user/register",this.state.formFields))];case 1:return t=o.sent(),n=t[0],r=t[1],n&&console.log(n),r&&Y("/",!0),[2]}})})},t.handleChange=function(e){return function(n){var r=Re()(t.state.formFields);r[e]=n.target.value,t.setState({formFields:r})}},t}return ze(t,e),t.prototype.render=function(e,t){return l("div",{className:"page"},l(Ge,null,l("form",{action:"/user/register",method:"post",onSubmit:this.handleSubmit},"Username:",l("br",null),l("input",{type:"text",name:"username",value:t.formFields.username,onChange:this.handleChange("username")}),l("br",null),"Name:",l("br",null),l("input",{type:"text",name:"name",value:t.formFields.name,onChange:this.handleChange("name")}),l("br",null),"Email:",l("br",null),l("input",{type:"text",name:"email",value:t.formFields.email,onChange:this.handleChange("email")}),l("br",null),"Password:",l("br",null),l("input",{type:"password",name:"password",value:t.formFields.password,onChange:this.handleChange("password")}),l("br",null),l("input",{type:"submit",value:"Submit"}))))},t}(F),Ye=(n(161),n(163),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Xe=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,l)}c((r=r.apply(e,t||[])).next())})},Je=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},Qe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={isLoggedIn:!1,userID:null},t.handleRoute=function(e){return Xe(t,void 0,void 0,function(){return Je(this,function(t){switch(t.label){case 0:switch(e.url){case"/game":return[3,1]}return[3,3];case 1:return console.log("attempting to route to /game"),[4,this.checkAuthentication()];case 2:t.sent()||Y("/",!0),t.label=3;case 3:return[2]}})})},t.toggleLogIn=function(e){return e&&t.setState({isLoggedIn:e},t.checkAuthentication),t.setState({isLoggedIn:!t.state.isLoggedIn})},t.checkAuthentication=function(){return Xe(t,void 0,void 0,function(){var e;return Je(this,function(t){switch(t.label){case 0:return[4,Le()];case 1:return e=t.sent(),console.log("authID: "+e),e?(this.setState({userID:e}),[2,!0]):[2,!1]}})})},t.logOut=function(){return Xe(t,void 0,void 0,function(){return Je(this,function(e){switch(e.label){case 0:return[4,ae.a.get("/logout")];case 1:return e.sent(),Y("/",!0),this.setState({userID:null,isLoggedIn:!1}),[2]}})})},t}return Ye(t,e),t.prototype.render=function(e,t){return l(oe,{onChange:this.handleRoute},l(Fe,{path:"/game",userID:t.userID,logOut:this.logOut}),l(Ke,{path:"/register"}),l(He,{path:"/",toggleLogIn:this.toggleLogIn}))},t}(F);I(l(Qe,null),document.getElementById("root"))},function(e,t,n){var r=n(167);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,".l, .Unowned {\n  fill: #FFFFDD;\n  stroke: black;\n  stroke-linejoin: round;\n  fill-opacity: 0.2;\n  stroke-width: 0.8; }\n\n.w {\n  fill: #99CCFF;\n  stroke: #222;\n  stroke-linejoin: round;\n  fill-opacity: 0.45;\n  stroke-width: 0.8; }\n\n.w:hover {\n  fill: #AADDFF; }\n\n.l:hover ~ text, .w:hover ~ text {\n  font-size: 10px; }\n\n.l:hover {\n  fill-opacity: 0.5; }\n\n.s {\n  fill: url(#diagonalHatch);\n  stroke: #220;\n  stroke-linejoin: round;\n  opacity: 0.5; }\n\n.sc {\n  fill: #DDDDDD;\n  stroke: black; }\n\n#A, #F, #sc {\n  pointer-events: none;\n  stroke: black; }\n\ntext {\n  font-family: Palatino;\n  fill: #222;\n  font-size: 9px;\n  transform: translate(-5px, 0px);\n  pointer-events: none; }\n\n.empire1 {\n  fill: #FFFF88; }\n\n.empire2 {\n  fill: #FFFF00; }\n\n.empire3 {\n  fill: #FF88FF; }\n\n.empire4 {\n  fill: #FF8888; }\n\n.empire5 {\n  fill: #FF8800; }\n\n.empire6 {\n  fill: #FF00FF; }\n\n.empire7 {\n  fill: #FF0088; }\n\n.empire8 {\n  fill: #FF0000; }\n\n.empire9 {\n  fill: #88FFFF; }\n\n.empire10 {\n  fill: #88FF88; }\n\n.empire11 {\n  fill: #88FF00; }\n\n.empire12 {\n  fill: #8888FF; }\n\n.empire13 {\n  fill: #888888; }\n\n.empire14 {\n  fill: #888800; }\n\n.empire15 {\n  fill: #8800FF; }\n\n.empire16 {\n  fill: #880088; }\n\n.empire17 {\n  fill: #880000; }\n\n.empire18 {\n  fill: #00FFFF; }\n\n.empire19 {\n  fill: #00FF88; }\n\n.empire20 {\n  fill: #00FF00; }\n\n.empire21 {\n  fill: #0088FF; }\n\n.empire22 {\n  fill: #008888; }\n\n.empire23 {\n  fill: #008800; }\n\n.empire24 {\n  fill: #0000FF; }\n\n.empire25 {\n  fill: #000088; }\n\n.success {\n  stroke: #1C1; }\n\n.bounce {\n  stroke: #D50; }\n\n.move {\n  stroke: #000; }\n\nsvg text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\nsvg text::selection {\n  background: none; }\n\n.e01-light {\n  fill: #00007f; }\n\n.e01-medium {\n  fill: #000065; }\n\n.e01-shadow {\n  fill: #00004c; }\n\n.e02-light {\n  fill: #0000ff; }\n\n.e02-medium {\n  fill: #0000cc; }\n\n.e02-shadow {\n  fill: #000099; }\n\n.e03-light {\n  fill: #007f00; }\n\n.e03-medium {\n  fill: #006500; }\n\n.e03-shadow {\n  fill: #004c00; }\n\n.e04-light {\n  fill: #007f7f; }\n\n.e04-medium {\n  fill: #006565; }\n\n.e04-shadow {\n  fill: #004c4c; }\n\n.e05-light {\n  fill: #007fff; }\n\n.e05-medium {\n  fill: #0065cc; }\n\n.e05-shadow {\n  fill: #004c99; }\n\n.e06-light {\n  fill: #00ff00; }\n\n.e06-medium {\n  fill: #00cc00; }\n\n.e06-shadow {\n  fill: #009900; }\n\n.e07-light {\n  fill: #00ff7f; }\n\n.e07-medium {\n  fill: #00cc65; }\n\n.e07-shadow {\n  fill: #00994c; }\n\n.e08-light {\n  fill: #00ffff; }\n\n.e08-medium {\n  fill: #00cccc; }\n\n.e08-shadow {\n  fill: #009999; }\n\n.e09-light {\n  fill: #7f0000; }\n\n.e09-medium {\n  fill: #650000; }\n\n.e09-shadow {\n  fill: #4c0000; }\n\n.e10-light {\n  fill: #7f007f; }\n\n.e10-medium {\n  fill: #650065; }\n\n.e10-shadow {\n  fill: #4c004c; }\n\n.e11-light {\n  fill: #7f00ff; }\n\n.e11-medium {\n  fill: #6500cc; }\n\n.e11-shadow {\n  fill: #4c0099; }\n\n.e12-light {\n  fill: #7f7f00; }\n\n.e12-medium {\n  fill: #656500; }\n\n.e12-shadow {\n  fill: #4c4c00; }\n\n.e13-light {\n  fill: #7f7f7f; }\n\n.e13-medium {\n  fill: #656565; }\n\n.e13-shadow {\n  fill: #4c4c4c; }\n\n.e14-light {\n  fill: #7f7fff; }\n\n.e14-medium {\n  fill: #6565cc; }\n\n.e14-shadow {\n  fill: #4c4c99; }\n\n.e15-light {\n  fill: #7fff00; }\n\n.e15-medium {\n  fill: #65cc00; }\n\n.e15-shadow {\n  fill: #4c9900; }\n\n.e16-light {\n  fill: #7fff7f; }\n\n.e16-medium {\n  fill: #65cc65; }\n\n.e16-shadow {\n  fill: #4c994c; }\n\n.e17-light {\n  fill: #7fffff; }\n\n.e17-medium {\n  fill: #65cccc; }\n\n.e17-shadow {\n  fill: #4c9999; }\n\n.e18-light {\n  fill: #ff0000; }\n\n.e18-medium {\n  fill: #cc0000; }\n\n.e18-shadow {\n  fill: #990000; }\n\n.e19-light {\n  fill: #ff007f; }\n\n.e19-medium {\n  fill: #cc0065; }\n\n.e19-shadow {\n  fill: #99004c; }\n\n.e20-light {\n  fill: #ff00ff; }\n\n.e20-medium {\n  fill: #cc00cc; }\n\n.e20-shadow {\n  fill: #990099; }\n\n.e21-light {\n  fill: #ff7f00; }\n\n.e21-medium {\n  fill: #cc6500; }\n\n.e21-shadow {\n  fill: #994c00; }\n\n.e22-light {\n  fill: #ff7f7f; }\n\n.e22-medium {\n  fill: #cc6565; }\n\n.e22-shadow {\n  fill: #994c4c; }\n\n.e23-light {\n  fill: #ff7fff; }\n\n.e23-medium {\n  fill: #cc65cc; }\n\n.e23-shadow {\n  fill: #994c99; }\n\n.e24-light {\n  fill: #ffff00; }\n\n.e24-medium {\n  fill: #cccc00; }\n\n.e24-shadow {\n  fill: #999900; }\n\n.e25-light {\n  fill: #ffff7f; }\n\n.e25-medium {\n  fill: #cccc65; }\n\n.e25-shadow {\n  fill: #99994c; }\n",""])},function(e,t,n){var r=n(169);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,".gameBoard {\n  border: 2px solid #102542;\n  border-radius: 4px;\n  height: 80vmin;\n  background-image: url(/assets/paperTexture.jpg);\n  background-size: contain; }\n\n.unit {\n  pointer-events: none; }\n",""])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaHVmZmxlU2VsZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NodWZmbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVSYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTaHVmZmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSYW5kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNodWZmbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL3BhZ2VzL2dhbWUvZ2FtZS5zY3NzP2JjMTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvcGFnZXMvZ2FtZS9nYW1lLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvcGFnZXMvbG9naW4vbG9naW4uc2Nzcz9jMWI4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvY29tcG9uZW50cy9mb3JtQm94L2Zvcm1Cb3guc2Nzcz80YzA1Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL2NvbXBvbmVudHMvZm9ybUJveC9mb3JtQm94LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvYXBwLnNjc3M/MjAzZiIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC9hcHAuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC92YXJpYWJsZXMvY29sb3JzLnNjc3M/OWQyZiIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC92YXJpYWJsZXMvY29sb3JzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC1yb3V0ZXIvZGlzdC9wcmVhY3Qtcm91dGVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hd2FpdC10by1qcy9kaXN0L2F3YWl0LXRvLWpzLmVzNS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC9faGVscGVycy9jaGVja0F1dGhlbnRpY2F0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvZGV2VG9vbHMvc2V0dXBHYW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvZW5naW5lL29yZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvZW5naW5lL3Jlc291cmNlcy9lbnRpdHlMb2NhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9lbmdpbmUvYm9hcmRQYWludGVyL2JvYXJkUGFpbnRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL3Jlc291cmNlcy9sYW5kVGlsZXNEYXRhLnRzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvcmVzb3VyY2VzL3NlYVRpbGVzRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2hlbHBlcnMvdmFsaWRhdGVNb3ZlLnRzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvaGVscGVycy9hcmVBZGphY2VudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2VuZ2luZS9nYW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXNzZXRzL2NvdW50cnlEYXRhLnRzIiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL2NvbXBvbmVudHMvYm9hcmQvdGVycml0b3J5L3RlcnJpdG9yeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvY29tcG9uZW50cy9ib2FyZC9ib2FyZC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvcGFnZXMvZ2FtZS9nYW1lLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC9jb21wb25lbnRzL2Zvcm1Cb3gvZm9ybUJveC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvcGFnZXMvbG9naW4vbG9naW4udHN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2FwcC9hcHAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9jbGllbnQvYXBwL2NvbXBvbmVudHMvYm9hcmQvdGVycml0b3J5L3RlcnJpdG9yeS5zY3NzPzkzYmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvY29tcG9uZW50cy9ib2FyZC90ZXJyaXRvcnkvdGVycml0b3J5LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvY29tcG9uZW50cy9ib2FyZC9ib2FyZC5zY3NzPzM3NjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC9hcHAvY29tcG9uZW50cy9ib2FyZC9ib2FyZC5zY3NzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwidHlwZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwidW5kZWZpbmVkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsIl9pIiwicHVzaCIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJnZXRFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJrZXlzIiwic2V0QXR0cmlidXRlIiwidXBkYXRlIiwicmVtb3ZlIiwidHJhbnNmb3JtIiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiYXJyYXlMaWtlS2V5cyIsImJhc2VLZXlzIiwiaXNBcnJheUxpa2UiLCJBcnJheSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJzZXQiLCJoYXMiLCJlcSIsImFycmF5IiwibmF0aXZlQ3JlYXRlIiwiZ2V0TmF0aXZlIiwiaXNLZXlhYmxlIiwiX19kYXRhX18iLCJiYXNlQXNzaWduVmFsdWUiLCJwcm9wcyIsImN1c3RvbWl6ZXIiLCJpc05ldyIsIm5ld1ZhbHVlIiwiYmFzZUNsb25lIiwiQ0xPTkVfU1lNQk9MU19GTEFHIiwicHJvY2VzcyIsInV0aWxzIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsIm1ldGhvZCIsIm90aGVyIiwiaXNMZW5ndGgiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiZnVuYyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJvYmplY3RQcm90byIsIkN0b3IiLCJjb25zdHJ1Y3RvciIsIk1hcCIsImFycmF5RmlsdGVyIiwic3R1YkFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0U3ltYm9scyIsInN5bWJvbCIsIkRhdGFWaWV3IiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJiYXNlR2V0VGFnIiwidG9Tb3VyY2UiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJnZXRUYWciLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJhcmdzIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0IiwidXJsIiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImVycm9yIiwiX19DQU5DRUxfXyIsIkNhbmNlbCIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwidGFnIiwiZ2xvYmFsIiwiTUFYX1NBRkVfSU5URUdFUiIsInJlSXNVaW50IiwidGVzdCIsImJhc2VSYW5kb20iLCJzaXplIiwibGFzdEluZGV4IiwicmFuZCIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIlN0cmluZyIsInN0dWJGYWxzZSIsIkJ1ZmZlciIsImFyZyIsImZ1bmNUb1N0cmluZyIsIm9ialZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJiYXNlS2V5c0luIiwiYXJyYXlQdXNoIiwiZ2V0UHJvdG90eXBlIiwiZ2V0U3ltYm9sc0luIiwidmFsdWVzIiwib2Zmc2V0Iiwib3ZlckFyZyIsImdldFByb3RvdHlwZU9mIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJhcnJheVNodWZmbGUiLCJiYXNlU2h1ZmZsZSIsImNvbGxlY3Rpb24iLCJBeGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJyZWFkRmxvYXRMRSIsInNsaWNlIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ2IiwidG9JU09TdHJpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJjaGFycyIsIkUiLCJpbnB1dCIsImJsb2NrIiwiY2hhckNvZGUiLCJvdXRwdXQiLCJjaGFyQ29kZUF0Iiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwibm93IiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwicmVhc29uIiwiZm5zIiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJjYWxsYmFjayIsImFyciIsImJhc2VSYW5nZSIsImlzSXRlcmF0ZWVDYWxsIiwidG9GaW5pdGUiLCJmcm9tUmlnaHQiLCJzdGFydCIsImVuZCIsInN0ZXAiLCJuYXRpdmVDZWlsIiwiTWF0aCIsImNlaWwiLCJuYXRpdmVNYXgiLCJtYXgiLCJnIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwidG9OdW1iZXIiLCJJTkZJTklUWSIsIk1BWF9JTlRFR0VSIiwiaXNTeW1ib2wiLCJOQU4iLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwidmFsdWVPZiIsImlzQmluYXJ5IiwiaXNPYmplY3RMaWtlIiwic3ltYm9sVGFnIiwiY29weUFycmF5Iiwic2h1ZmZsZVNlbGYiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibG93ZXIiLCJ1cHBlciIsImJhc2VWYWx1ZXMiLCJhcnJheU1hcCIsIml0ZXJhdGVlIiwiYmFzZUlzQXJndW1lbnRzIiwiYXJnc1RhZyIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJub2RlSXNUeXBlZEFycmF5IiwidHlwZWRBcnJheVRhZ3MiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJobXIiLCJsb2NhbHMiLCJiYXNlVXJsIiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIlN0YWNrIiwiYXJyYXlFYWNoIiwiYmFzZUFzc2lnbiIsImJhc2VBc3NpZ25JbiIsImNsb25lQnVmZmVyIiwiY29weVN5bWJvbHMiLCJjb3B5U3ltYm9sc0luIiwiZ2V0QWxsS2V5cyIsImdldEFsbEtleXNJbiIsImluaXRDbG9uZUFycmF5IiwiaW5pdENsb25lQnlUYWciLCJpbml0Q2xvbmVPYmplY3QiLCJpc01hcCIsImlzU2V0IiwiQ0xPTkVfREVFUF9GTEFHIiwiQ0xPTkVfRkxBVF9GTEFHIiwib2JqZWN0VGFnIiwiY2xvbmVhYmxlVGFncyIsImJpdG1hc2siLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImlzRnVuYyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImFkZCIsImtleXNJbiIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsImFzc29jSW5kZXhPZiIsInBvcCIsIk1hcENhY2hlIiwiTEFSR0VfQVJSQVlfU0laRSIsInBhaXJzIiwiaXNNYXNrZWQiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJyZUlzTmF0aXZlIiwidWlkIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJIYXNoIiwic3RyaW5nIiwiaGFzaENsZWFyIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhBU0hfVU5ERUZJTkVEIiwiZ2V0TWFwRGF0YSIsImNvcHlPYmplY3QiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYWxsb2NVbnNhZmUiLCJjb3B5IiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJiYXNlR2V0QWxsS2V5cyIsImNsb25lQXJyYXlCdWZmZXIiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVN5bWJvbCIsImNsb25lVHlwZWRBcnJheSIsImJvb2xUYWciLCJkYXRlVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsInJlRmxhZ3MiLCJyZWdleHAiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ0eXBlZEFycmF5IiwiYmFzZUNyZWF0ZSIsIm9iamVjdENyZWF0ZSIsInByb3RvIiwiYmFzZUlzTWFwIiwibm9kZUlzTWFwIiwiYmFzZUlzU2V0Iiwibm9kZUlzU2V0IiwiVk5vZGUiLCJFTVBUWV9DSElMRFJFTiIsIm5vZGVOYW1lIiwiYXR0cmlidXRlcyIsImxhc3RTaW1wbGUiLCJjaGlsZCIsInNpbXBsZSIsInZub2RlIiwiYXBwbHlSZWYiLCJyZWYiLCJjdXJyZW50IiwiZGVmZXIiLCJjbG9uZUVsZW1lbnQiLCJJU19OT05fRElNRU5TSU9OQUwiLCJpdGVtcyIsImVucXVldWVSZW5kZXIiLCJjb21wb25lbnQiLCJfZGlydHkiLCJkZWJvdW5jZVJlbmRlcmluZyIsInJlcmVuZGVyIiwicmVuZGVyQ29tcG9uZW50IiwiaXNOYW1lZE5vZGUiLCJub2RlIiwibm9ybWFsaXplZE5vZGVOYW1lIiwiZ2V0Tm9kZVByb3BzIiwiZGVmYXVsdFByb3BzIiwicmVtb3ZlTm9kZSIsInNldEFjY2Vzc29yIiwib2xkIiwiaXNTdmciLCJpbm5lckhUTUwiLCJfX2h0bWwiLCJ1c2VDYXB0dXJlIiwic3Vic3RyaW5nIiwiZXZlbnRQcm94eSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImNsYXNzTmFtZSIsImV2ZW50IiwibW91bnRzIiwiZGlmZkxldmVsIiwiaXNTdmdNb2RlIiwiaHlkcmF0aW5nIiwiZmx1c2hNb3VudHMiLCJhZnRlck1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJkaWZmIiwiZG9tIiwibW91bnRBbGwiLCJjb21wb25lbnRSb290Iiwib3duZXJTVkdFbGVtZW50IiwicmV0IiwiaWRpZmYiLCJvdXQiLCJwcmV2U3ZnTW9kZSIsInNwbGl0VGV4dCIsIl9jb21wb25lbnQiLCJub2RlVmFsdWUiLCJyZXBsYWNlQ2hpbGQiLCJyZWNvbGxlY3ROb2RlVHJlZSIsInZub2RlTmFtZSIsIm9yaWdpbmFsQ29tcG9uZW50Iiwib2xkRG9tIiwiaXNEaXJlY3RPd25lciIsIl9jb21wb25lbnRDb25zdHJ1Y3RvciIsImlzT3duZXIiLCJfcGFyZW50Q29tcG9uZW50Iiwic2V0Q29tcG9uZW50UHJvcHMiLCJ1bm1vdW50Q29tcG9uZW50IiwiY3JlYXRlQ29tcG9uZW50IiwibmV4dEJhc2UiLCJidWlsZENvbXBvbmVudEZyb21WTm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImZjIiwidmNoaWxkcmVuIiwiaXNIeWRyYXRpbmciLCJmIiwidmNoaWxkIiwib3JpZ2luYWxDaGlsZHJlbiIsImtleWVkIiwia2V5ZWRMZW4iLCJtaW4iLCJjaGlsZHJlbkxlbiIsInZsZW4iLCJfY2hpbGQiLCJfX2tleSIsImlubmVyRGlmZk5vZGUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImRpZmZBdHRyaWJ1dGVzIiwidW5tb3VudE9ubHkiLCJyZW1vdmVDaGlsZHJlbiIsImxhc3RDaGlsZCIsIm5leHQiLCJwcmV2aW91c1NpYmxpbmciLCJyZWN5Y2xlckNvbXBvbmVudHMiLCJpbnN0IiwicmVuZGVyIiwiQ29tcG9uZW50IiwiZG9SZW5kZXIiLCJzdGF0ZSIsInJlbmRlck1vZGUiLCJfZGlzYWJsZSIsIl9fcmVmIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInByZXZDb250ZXh0IiwicHJldlByb3BzIiwic3luY0NvbXBvbmVudFVwZGF0ZXMiLCJpc0NoaWxkIiwicmVuZGVyZWQiLCJjYmFzZSIsInByZXZpb3VzUHJvcHMiLCJwcmV2aW91c1N0YXRlIiwicHJldlN0YXRlIiwicHJldmlvdXNDb250ZXh0IiwiaXNVcGRhdGUiLCJpbml0aWFsQmFzZSIsImluaXRpYWxDaGlsZENvbXBvbmVudCIsInNraXAiLCJzbmFwc2hvdCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInRvVW5tb3VudCIsImNoaWxkQ29tcG9uZW50IiwiY2hpbGRQcm9wcyIsImJhc2VQYXJlbnQiLCJjb21wb25lbnRSZWYiLCJjb21wb25lbnREaWRVcGRhdGUiLCJhZnRlclVwZGF0ZSIsIl9yZW5kZXJDYWxsYmFja3MiLCJiZWZvcmVVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJpbm5lciIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJFTVBUWSQxIiwicHJlYWN0X3JvdXRlcl9lc19hc3NpZ24iLCJwYXRoUmFua1NvcnQiLCJyYW5rIiwicHJlcGFyZVZOb2RlRm9yUmFua2luZyIsInNlZ21lbnRpemUiLCJyYW5rU2VnbWVudCIsInJhbmtDaGlsZCIsInNlZ21lbnQiLCJjdXN0b21IaXN0b3J5IiwiUk9VVEVSUyIsInN1YnNjcmliZXJzIiwiRU1QVFkiLCJnZXRDdXJyZW50VXJsIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwicm91dGUiLCJjYW5Sb3V0ZSIsImhpc3RvcnkiLCJzZXRVcmwiLCJyb3V0ZVRvIiwiZGlkUm91dGUiLCJpJDEiLCJyb3V0ZUZyb21MaW5rIiwiZ2V0QXR0cmlidXRlIiwiaGFuZGxlTGlua0NsaWNrIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsInByZXZlbnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImRlbGVnYXRlTGlua0hhbmRsZXIiLCJjdHJsS2V5IiwibWV0YUtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwiX19wcmVhY3RhdHRyXyIsImZvciIsImhhc0F0dHJpYnV0ZSIsImV2ZW50TGlzdGVuZXJzSW5pdGlhbGl6ZWQiLCJwcmVhY3Rfcm91dGVyX2VzX1JvdXRlciIsIkNvbXBvbmVudCQkMSIsIlJvdXRlciIsIl9fcHJvdG9fXyIsInN0YXRpYyIsIm9uQ2hhbmdlIiwiZ2V0TWF0Y2hpbmdDaGlsZHJlbiIsIl9kaWRSb3V0ZSIsInVwZGF0aW5nIiwidGhpcyQxIiwidW5saXN0ZW4iLCJsaXN0ZW4iLCJpbnZva2UiLCJzb3J0IiwibWF0Y2hlcyIsIm9wdHMiLCJyZWciLCJwYXJhbSIsImZsYWdzIiwicGx1cyIsInN0YXIiLCJuZXdQcm9wcyIsInJlZiQxIiwiYWN0aXZlIiwicHJldmlvdXMiLCJwcmV2aW91c1VybCIsInJvdXRlciIsIkxpbmsiLCJvbkNsaWNrIiwiUm91dGUiLCJwcmVhY3Rfcm91dGVyX2VzIiwiYXdhaXRfdG9fanNfZXM1IiwiZXJyb3JFeHQiLCJjYXRjaCIsImVyciIsImFzc2lnbiIsImNoZWNrQXV0aGVudGljYXRpb24iLCJfX2F3YWl0ZXIiLCJheGlvc19kZWZhdWx0IiwiX2EiLCJfYiIsInNlbnQiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwidXNlcklEIiwic2V0dXBHYW1lIiwic2V0dXBHYW1lX2F3YWl0ZXIiLCJwb3N0IiwiZ2FtZSIsIm51bWJlcnMiLCJzaHVmZmxlX2RlZmF1bHQiLCJyYW5nZV9kZWZhdWx0IiwieCIsInBhZFN0YXJ0IiwiZ2FtZUlEIiwicGxheWVySUQiLCJjb2xvdXIiLCJPcmRlciIsInVuaXQiLCJvcmlnaW4iLCJkZXN0aW5hdGlvbiIsIm1vdmVUeXBlIiwic3VwcG9ydEZyb20iLCJmcm9tIiwidG8iLCJtb3ZlIiwidG9PYmplY3QiLCJ3YXNTdWNjZXNzZnVsIiwiZW50aXR5TG9jYXRpb25zIiwiU3dpdHplcmxhbmQiLCJ5IiwiQWRyaWF0aWNfU2VhIiwiQWVnZWFuX1NlYSIsIkFsYmFuaWEiLCJBbmthcmEiLCJzY0Fua2FyYSIsIkFwdWxpYSIsIkFybWVuaWEiLCJCYWx0aWNfU2VhIiwiQmFyZW50c19TZWEiLCJCZWxnaXVtIiwic2NCZWxnaXVtIiwiQmVybGluIiwic2NCZXJsaW4iLCJCbGFja19TZWEiLCJCb2hlbWlhIiwiQnJlc3QiLCJzY0JyZXN0IiwiQnVkYXBlc3QiLCJzY0J1ZGFwZXN0IiwiQnVsZ2FyaWEiLCJzY0J1bGdhcmlhIiwiQnVsZ2FyaWFfX2VjIiwiQnVsZ2FyaWFfX3NjIiwiQnVyZ3VuZHkiLCJDbHlkZSIsIkNvbnN0YW50aW5vcGxlIiwic2NDb25zdGFudGlub3BsZSIsIkRlbm1hcmsiLCJzY0Rlbm1hcmsiLCJFYXN0ZXJuX01lZGl0ZXJyYW5lYW4iLCJFZGluYnVyZ2giLCJzY0VkaW5idXJnaCIsIkVuZ2xpc2hfQ2hhbm5lbCIsIkZpbmxhbmQiLCJHYWxpY2lhIiwiR2FzY29ueSIsIkdyZWVjZSIsInNjR3JlZWNlIiwiR3VsZl9vZl9MeW9uIiwiR3VsZl9vZl9Cb3RobmlhIiwiSGVsZ29sYW5kX0JpZ2h0IiwiSG9sbGFuZCIsInNjSG9sbGFuZCIsIklvbmlhbl9TZWEiLCJJcmlzaF9TZWEiLCJLaWVsIiwic2NLaWVsIiwiTGl2ZXJwb29sIiwic2NMaXZlcnBvb2wiLCJMaXZvbmlhIiwiTG9uZG9uIiwic2NMb25kb24iLCJNYXJzZWlsbGVzIiwic2NNYXJzZWlsbGVzIiwiTWlkX0F0bGFudGljX09jZWFuIiwiTW9zY293Iiwic2NNb3Njb3ciLCJNdW5pY2giLCJzY011bmljaCIsIk5hcGxlcyIsInNjTmFwbGVzIiwiTm9ydGhfQXRsYW50aWNfT2NlYW4iLCJOb3J0aF9BZnJpY2EiLCJOb3J0aF9TZWEiLCJOb3J3YXkiLCJzY05vcndheSIsIk5vcndlZ2lhbl9TZWEiLCJQYXJpcyIsInNjUGFyaXMiLCJQaWNhcmR5IiwiUGllZG1vbnQiLCJQb3J0dWdhbCIsInNjUG9ydHVnYWwiLCJQcnVzc2lhIiwiUm9tZSIsInNjUm9tZSIsIlJ1aHIiLCJSdW1hbmlhIiwic2NSdW1hbmlhIiwiU2VyYmlhIiwic2NTZXJiaWEiLCJTZXZhc3RvcG9sIiwic2NTZXZhc3RvcG9sIiwiU2lsZXNpYSIsIlNrYWdlcnJhayIsIlNteXJuYSIsInNjU215cm5hIiwiU3BhaW4iLCJzY1NwYWluIiwiU3BhaW5fX25jIiwiU3BhaW5fX3NjIiwiU3RfUGV0ZXJzYnVyZyIsInNjU3RfUGV0ZXJzYnVyZyIsIlN0X1BldGVyc2J1cmdfX25jIiwiU3RfUGV0ZXJzYnVyZ19fc2MiLCJTd2VkZW4iLCJzY1N3ZWRlbiIsIlN5cmlhIiwiVHJpZXN0ZSIsInNjVHJpZXN0ZSIsIlR1bmlzIiwic2NUdW5pcyIsIlR1c2NhbnkiLCJUeXJvbGlhIiwiVHlycmhlbmlhbl9TZWEiLCJVa3JhaW5lIiwiVmVuaWNlIiwic2NWZW5pY2UiLCJWaWVubmEiLCJzY1ZpZW5uYSIsIldhbGVzIiwiV2Fyc2F3Iiwic2NXYXJzYXciLCJXZXN0ZXJuX01lZGl0ZXJyYW5lYW4iLCJZb3Jrc2hpcmUiLCJCb2FyZFBhaW50ZXIiLCJib2FyZCIsInR1cm4iLCJhcm15U3ZnIiwiZmxlZXRTdmciLCJfdGhpcyIsImRyYXciLCJwbGF5ZXJzIiwicGxheWVyIiwiY29sb3VyVGVycml0b3JpZXMiLCJvd25lZFRlcnJpdG9yaWVzIiwiZW1waXJlIiwiZHJhd01vdmVzIiwibW92ZXMiLCJlbmdpbmVfb3JkZXIiLCJkcmF3VW5pdHMiLCJvd25lZFVuaXRzIiwicmVzZXQiLCJyZW1vdmVPcmRlcnMiLCJyZW1vdmVVbml0cyIsInJlZHJhdyIsInJlZHJhd09yZGVycyIsIm9yZGVycyIsInRlcnJpdG9yaWVzIiwidGVycml0b3J5Iiwic2V0T3duZXJzaGlwIiwib3JkZXIiLCJkcmF3T3JkZXIiLCJvd25lciIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJ0ZXJyIiwiY2xhc3NMaXN0IiwiZHJhd1VuaXQiLCJzdmdVbml0IiwidW5pdFR5cGUiLCJhcm15IiwiZmxlZXQiLCJjbG9uZU5vZGUiLCJicmlnaHRuZXNzIiwiZHJhd0xpbmUiLCJzdHJva2VXaWR0aCIsIm1hcmtlckVuZCIsInVuaXRzIiwibGFuZFRpbGVzRGF0YSIsIklyZWxhbmQiLCJDb3JzaWNhIiwiU2FyZGluaWEiLCJNYWxsb3JjYSIsIlNpY2lseSIsIkNyZXRlIiwic2VhVGlsZXNEYXRhIiwicGhhc2VzIiwibW92ZW1lbnQiLCJyZXRyZWF0IiwiYnVpbGQiLCJoZWxwZXJzX3ZhbGlkYXRlTW92ZSIsInBsYXllclN0YXRlIiwiZmluZCIsImZpbmRQbGF5ZXIiLCJpbmZvIiwicGhhc2UiLCJpbmNsdWRlcyIsImlzQWRqYWNlbnRUb0Rlc3RpbmF0aW9uIiwidGVycml0b3J5QSIsInRlcnJpdG9yeUIiLCJlbmdpbmVfZ2FtZSIsInNldHVwIiwic3ZncyIsIm1hcFN2ZyIsInBsYXllckVtcGlyZSIsImJvYXJkUGFpbnRlciIsInRpbGVzIiwidGlsZSIsImV2dCIsImNsZWFyTWFwIiwidGlsZVNlbGVjdGVkIiwiZmluaXNoT3JkZXIiLCJzdGFydE9yZGVyIiwidSIsIm5ld09yZGVyIiwicGxheWVySGFzVW5pdEF0IiwiY291bnRyeURhdGEiLCJtYXBUaXRsZSIsInZpZXdCb3giLCJ0aWxlVHlwZSIsInRleHRMb2NhdGlvbiIsIl9zdXBlciIsIlRlcnJpdG9yeSIsImRvU29tZXRoaW5nIiwiX19leHRlbmRzIiwiY2xhc3MiLCJfX2Fzc2lnbiIsIkJvYXJkIiwiYm9hcmRfZXh0ZW5kcyIsInhtbG5zIiwiYm9hcmRfdGVycml0b3J5X3RlcnJpdG9yeSIsIkdhbWUiLCJnYW1lSXNSdW5uaW5nIiwiZ2FtZV9hd2FpdGVyIiwiY3VycmVudFR1cm4iLCJydW5HYW1lIiwiZ2V0TGF0ZXN0R2FtZSIsInJlZnJlc2giLCJmZXRjaEdhbWUiLCJzdWJtaXRPcmRlcnMiLCJwYXRjaCIsInR1cm5JRCIsIm5leHRUdXJuIiwiX2lkIiwiZ2V0U3ZnIiwibGFiZWwiLCJzdmdPYmplY3QiLCJnZXRFbGVtZW50QnlJZCIsImdhbWVfZXh0ZW5kcyIsImxvZ091dCIsIndpZHRoIiwiY29tcG9uZW50c19ib2FyZF9ib2FyZCIsIkZvcm1Cb3giLCJmb3JtQm94X2V4dGVuZHMiLCJMb2dpbiIsImZvcm1GaWVsZHMiLCJsb2dpbiIsImxvZ2luX2F3YWl0ZXIiLCJ0b2dnbGVMb2dJbiIsImhhbmRsZUNoYW5nZSIsImZpZWxkIiwiY2xvbmVfZGVmYXVsdCIsImxvZ2luX2V4dGVuZHMiLCJ1c2VybmFtZUlucHV0IiwicGFzc3dvcmRJbnB1dCIsImZvcm1Cb3hfZm9ybUJveCIsImFjdGlvbiIsIm9uU3VibWl0IiwiUmVnaXN0ZXIiLCJoYW5kbGVTdWJtaXQiLCJyZWdpc3Rlcl9hd2FpdGVyIiwicmVnaXN0ZXJfZXh0ZW5kcyIsImVtYWlsIiwiYXBwX0FwcCIsIkFwcCIsImlzTG9nZ2VkSW4iLCJoYW5kbGVSb3V0ZSIsImFwcF9hd2FpdGVyIiwiYXV0aElEIiwiYXBwX2V4dGVuZHMiLCJwYWdlc19nYW1lX2dhbWUiLCJyZWdpc3RlciIsImxvZ2luX2xvZ2luIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5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Y2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTY1KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyk7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlPYmplY3Q7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCJ2YXIgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQXJyYXlCdWZmZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwidmFyIGJhc2VSYW5kb20gPSByZXF1aXJlKCcuL19iYXNlUmFuZG9tJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gIH1cbiAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNodWZmbGVTZWxmO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzSW4nKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHNJbjtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIGNyZWF0ZVJhbmdlID0gcmVxdWlyZSgnLi9fY3JlYXRlUmFuZ2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICpcbiAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmFuZ2UoNCk7XG4gKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAqXG4gKiBfLnJhbmdlKC00KTtcbiAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICpcbiAqIF8ucmFuZ2UoMSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gKlxuICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA0LCAwKTtcbiAqIC8vID0+IFsxLCAxLCAxXVxuICpcbiAqIF8ucmFuZ2UoMCk7XG4gKiAvLyA9PiBbXVxuICovXG52YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhbmdlO1xuIiwidmFyIGFycmF5U2h1ZmZsZSA9IHJlcXVpcmUoJy4vX2FycmF5U2h1ZmZsZScpLFxuICAgIGJhc2VTaHVmZmxlID0gcmVxdWlyZSgnLi9fYmFzZVNodWZmbGUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gKi9cbmZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2h1ZmZsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJ2YXIgYmFzZVJhbmdlID0gcmVxdWlyZSgnLi9fYmFzZVJhbmdlJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZ2U7XG4iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSYW5nZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9GaW5pdGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBzaHVmZmxlU2VsZiA9IHJlcXVpcmUoJy4vX3NodWZmbGVTZWxmJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTaHVmZmxlO1xuIiwiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJhbmRvbTtcbiIsInZhciBzaHVmZmxlU2VsZiA9IHJlcXVpcmUoJy4vX3NodWZmbGVTZWxmJyksXG4gICAgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTaHVmZmxlO1xuIiwidmFyIGJhc2VWYWx1ZXMgPSByZXF1aXJlKCcuL19iYXNlVmFsdWVzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udmFsdWVzKG5ldyBGb28pO1xuICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy52YWx1ZXMoJ2hpJyk7XG4gKiAvLyA9PiBbJ2gnLCAnaSddXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVmFsdWVzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2FtZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2dhbWUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2FtZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYnV0dG9uc0NvbnRhaW5lciB7XFxuICB0ZXh0LWp1c3RpZnk6IGNlbnRlcjsgfVxcblwiLCBcIlwiXSk7XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduJyksXG4gICAgYmFzZUFzc2lnbkluID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbkluJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGNvcHlTeW1ib2xzID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHMnKSxcbiAgICBjb3B5U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHNJbicpLFxuICAgIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNNYXAgPSByZXF1aXJlKCcuL2lzTWFwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTZXQgPSByZXF1aXJlKCcuL2lzU2V0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDbG9uZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzSW47XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5c0luO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKSxcbiAgICBjbG9uZURhdGFWaWV3ID0gcmVxdWlyZSgnLi9fY2xvbmVEYXRhVmlldycpLFxuICAgIGNsb25lUmVnRXhwID0gcmVxdWlyZSgnLi9fY2xvbmVSZWdFeHAnKSxcbiAgICBjbG9uZVN5bWJvbCA9IHJlcXVpcmUoJy4vX2Nsb25lU3ltYm9sJyksXG4gICAgY2xvbmVUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fY2xvbmVUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUJ5VGFnO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsInZhciBiYXNlSXNNYXAgPSByZXF1aXJlKCcuL19iYXNlSXNNYXAnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXA7XG4iLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWFwO1xuIiwidmFyIGJhc2VJc1NldCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1NldCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1NldDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9sb2dpbi5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2xvZ2luLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2xvZ2luLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImgxIHtcXG4gIGNvbG9yOiAjMTAyNTQyO1xcbiAgZm9udC1zaXplOiA4NHB4O1xcbiAgdGV4dC1zaGFkb3c6IDVweCA1cHggMHB4ICM1NDZBN0I7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cIiwgXCJcIl0pO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZm9ybUJveC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Zvcm1Cb3guc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZm9ybUJveC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gSW1wb3J0c1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU5vdGFibGV8QXJ2byZkaXNwbGF5PXN3YXApO1wiLCBcIlwiXSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mb3JtQm94IHtcXG4gIGZvbnQtZmFtaWx5OiAnTm90YWJsZScsICdHaWxsIFNhbnMnLCAnR2lsbCBTYW5zIE1UJywgQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgcGFkZGluZzogMjRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0OTcyQUI7XFxuICBjb2xvcjogI0VGRUZFRjtcXG4gIGxldHRlci1zcGFjaW5nOiAycHg7XFxuICBib3gtc2hhZG93OiA1cHggNXB4IDBweCAjMTAyNTQyO1xcbiAgbWFyZ2luOiBhdXRvOyB9XFxuICAuZm9ybUJveCBpbnB1dFt0eXBlPXN1Ym1pdF0ge1xcbiAgICB3aWR0aDogNTAlO1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIGZvbnQtZmFtaWx5OiAnTm90YWJsZScsICdHaWxsIFNhbnMnLCAnR2lsbCBTYW5zIE1UJywgQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XFxuICAgIGxldHRlci1zcGFjaW5nOiAxcHg7IH1cXG5cXG5hIHtcXG4gIGNvbG9yOiAjRUZFRkVGOyB9XFxuXCIsIFwiXCJdKTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUZFRkVGOyB9XFxuXFxuLnBhZ2Uge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDU2cHg7XFxuICBmb250LWZhbWlseTogJ05vdGFibGUnLCAnR2lsbCBTYW5zJywgJ0dpbGwgU2FucyBNVCcsIENhbGlicmksICdUcmVidWNoZXQgTVMnLCBzYW5zLXNlcmlmOyB9XFxuXFxuaW5wdXQsIGJ1dHRvbiB7XFxuICBmb250LWZhbWlseTogJ0Fydm8nLCBDYWxpYnJpLCBzYW5zLXNlcmlmO1xcbiAgY29sb3I6ICMxMDI1NDI7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUZFRkVGO1xcbiAgbWFyZ2luOiAxMHB4IDBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cIiwgXCJcIl0pO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vY29sb3JzLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vY29sb3JzLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2NvbG9ycy5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuIiwidmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUoKSB7fTtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxudmFyIHN0YWNrID0gW107XG5cbnZhciBFTVBUWV9DSElMRFJFTiA9IFtdO1xuXG5mdW5jdGlvbiBoKG5vZGVOYW1lLCBhdHRyaWJ1dGVzKSB7XG5cdHZhciBjaGlsZHJlbiA9IEVNUFRZX0NISUxEUkVOLFxuXHQgICAgbGFzdFNpbXBsZSxcblx0ICAgIGNoaWxkLFxuXHQgICAgc2ltcGxlLFxuXHQgICAgaTtcblx0Zm9yIChpID0gYXJndW1lbnRzLmxlbmd0aDsgaS0tID4gMjspIHtcblx0XHRzdGFjay5wdXNoKGFyZ3VtZW50c1tpXSk7XG5cdH1cblx0aWYgKGF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlcy5jaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0aWYgKCFzdGFjay5sZW5ndGgpIHN0YWNrLnB1c2goYXR0cmlidXRlcy5jaGlsZHJlbik7XG5cdFx0ZGVsZXRlIGF0dHJpYnV0ZXMuY2hpbGRyZW47XG5cdH1cblx0d2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuXHRcdGlmICgoY2hpbGQgPSBzdGFjay5wb3AoKSkgJiYgY2hpbGQucG9wICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGZvciAoaSA9IGNoaWxkLmxlbmd0aDsgaS0tOykge1xuXHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkW2ldKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSBjaGlsZCA9IG51bGw7XG5cblx0XHRcdGlmIChzaW1wbGUgPSB0eXBlb2Ygbm9kZU5hbWUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0aWYgKGNoaWxkID09IG51bGwpIGNoaWxkID0gJyc7ZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJykgY2hpbGQgPSBTdHJpbmcoY2hpbGQpO2Vsc2UgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ3N0cmluZycpIHNpbXBsZSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2ltcGxlICYmIGxhc3RTaW1wbGUpIHtcblx0XHRcdFx0Y2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gKz0gY2hpbGQ7XG5cdFx0XHR9IGVsc2UgaWYgKGNoaWxkcmVuID09PSBFTVBUWV9DSElMRFJFTikge1xuXHRcdFx0XHRjaGlsZHJlbiA9IFtjaGlsZF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGlsZHJlbi5wdXNoKGNoaWxkKTtcblx0XHRcdH1cblxuXHRcdFx0bGFzdFNpbXBsZSA9IHNpbXBsZTtcblx0XHR9XG5cdH1cblxuXHR2YXIgcCA9IG5ldyBWTm9kZSgpO1xuXHRwLm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cdHAuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblx0cC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXR0cmlidXRlcztcblx0cC5rZXkgPSBhdHRyaWJ1dGVzID09IG51bGwgPyB1bmRlZmluZWQgOiBhdHRyaWJ1dGVzLmtleTtcblxuXHRpZiAob3B0aW9ucy52bm9kZSAhPT0gdW5kZWZpbmVkKSBvcHRpb25zLnZub2RlKHApO1xuXG5cdHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBleHRlbmQob2JqLCBwcm9wcykge1xuICBmb3IgKHZhciBpIGluIHByb3BzKSB7XG4gICAgb2JqW2ldID0gcHJvcHNbaV07XG4gIH1yZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBhcHBseVJlZihyZWYsIHZhbHVlKSB7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVmID09ICdmdW5jdGlvbicpIHJlZih2YWx1ZSk7ZWxzZSByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59XG5cbnZhciBkZWZlciA9IHR5cGVvZiBQcm9taXNlID09ICdmdW5jdGlvbicgPyBQcm9taXNlLnJlc29sdmUoKS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpIDogc2V0VGltZW91dDtcblxuZnVuY3Rpb24gY2xvbmVFbGVtZW50KHZub2RlLCBwcm9wcykge1xuICByZXR1cm4gaCh2bm9kZS5ub2RlTmFtZSwgZXh0ZW5kKGV4dGVuZCh7fSwgdm5vZGUuYXR0cmlidXRlcyksIHByb3BzKSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiB2bm9kZS5jaGlsZHJlbik7XG59XG5cbnZhciBJU19OT05fRElNRU5TSU9OQUwgPSAvYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmQvaTtcblxudmFyIGl0ZW1zID0gW107XG5cbmZ1bmN0aW9uIGVucXVldWVSZW5kZXIoY29tcG9uZW50KSB7XG5cdGlmICghY29tcG9uZW50Ll9kaXJ0eSAmJiAoY29tcG9uZW50Ll9kaXJ0eSA9IHRydWUpICYmIGl0ZW1zLnB1c2goY29tcG9uZW50KSA9PSAxKSB7XG5cdFx0KG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmcgfHwgZGVmZXIpKHJlcmVuZGVyKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZXJlbmRlcigpIHtcblx0dmFyIHA7XG5cdHdoaWxlIChwID0gaXRlbXMucG9wKCkpIHtcblx0XHRpZiAocC5fZGlydHkpIHJlbmRlckNvbXBvbmVudChwKTtcblx0fVxufVxuXG5mdW5jdGlvbiBpc1NhbWVOb2RlVHlwZShub2RlLCB2bm9kZSwgaHlkcmF0aW5nKSB7XG5cdGlmICh0eXBlb2Ygdm5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ251bWJlcicpIHtcblx0XHRyZXR1cm4gbm9kZS5zcGxpdFRleHQgIT09IHVuZGVmaW5lZDtcblx0fVxuXHRpZiAodHlwZW9mIHZub2RlLm5vZGVOYW1lID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiAhbm9kZS5fY29tcG9uZW50Q29uc3RydWN0b3IgJiYgaXNOYW1lZE5vZGUobm9kZSwgdm5vZGUubm9kZU5hbWUpO1xuXHR9XG5cdHJldHVybiBoeWRyYXRpbmcgfHwgbm9kZS5fY29tcG9uZW50Q29uc3RydWN0b3IgPT09IHZub2RlLm5vZGVOYW1lO1xufVxuXG5mdW5jdGlvbiBpc05hbWVkTm9kZShub2RlLCBub2RlTmFtZSkge1xuXHRyZXR1cm4gbm9kZS5ub3JtYWxpemVkTm9kZU5hbWUgPT09IG5vZGVOYW1lIHx8IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZVByb3BzKHZub2RlKSB7XG5cdHZhciBwcm9wcyA9IGV4dGVuZCh7fSwgdm5vZGUuYXR0cmlidXRlcyk7XG5cdHByb3BzLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG5cblx0dmFyIGRlZmF1bHRQcm9wcyA9IHZub2RlLm5vZGVOYW1lLmRlZmF1bHRQcm9wcztcblx0aWYgKGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Zm9yICh2YXIgaSBpbiBkZWZhdWx0UHJvcHMpIHtcblx0XHRcdGlmIChwcm9wc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHByb3BzW2ldID0gZGVmYXVsdFByb3BzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBwcm9wcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZShub2RlTmFtZSwgaXNTdmcpIHtcblx0dmFyIG5vZGUgPSBpc1N2ZyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBub2RlTmFtZSkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcblx0bm9kZS5ub3JtYWxpemVkTm9kZU5hbWUgPSBub2RlTmFtZTtcblx0cmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xuXHR2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0aWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5cbmZ1bmN0aW9uIHNldEFjY2Vzc29yKG5vZGUsIG5hbWUsIG9sZCwgdmFsdWUsIGlzU3ZnKSB7XG5cdGlmIChuYW1lID09PSAnY2xhc3NOYW1lJykgbmFtZSA9ICdjbGFzcyc7XG5cblx0aWYgKG5hbWUgPT09ICdrZXknKSB7fSBlbHNlIGlmIChuYW1lID09PSAncmVmJykge1xuXHRcdGFwcGx5UmVmKG9sZCwgbnVsbCk7XG5cdFx0YXBwbHlSZWYodmFsdWUsIG5vZGUpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgIWlzU3ZnKSB7XG5cdFx0bm9kZS5jbGFzc05hbWUgPSB2YWx1ZSB8fCAnJztcblx0fSBlbHNlIGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG5cdFx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvbGQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSB8fCAnJztcblx0XHR9XG5cdFx0aWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmICh0eXBlb2Ygb2xkICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRmb3IgKHZhciBpIGluIG9sZCkge1xuXHRcdFx0XHRcdGlmICghKGkgaW4gdmFsdWUpKSBub2RlLnN0eWxlW2ldID0gJyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgaW4gdmFsdWUpIHtcblx0XHRcdFx0bm9kZS5zdHlsZVtpXSA9IHR5cGVvZiB2YWx1ZVtpXSA9PT0gJ251bWJlcicgJiYgSVNfTk9OX0RJTUVOU0lPTkFMLnRlc3QoaSkgPT09IGZhbHNlID8gdmFsdWVbaV0gKyAncHgnIDogdmFsdWVbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICdkYW5nZXJvdXNseVNldElubmVySFRNTCcpIHtcblx0XHRpZiAodmFsdWUpIG5vZGUuaW5uZXJIVE1MID0gdmFsdWUuX19odG1sIHx8ICcnO1xuXHR9IGVsc2UgaWYgKG5hbWVbMF0gPT0gJ28nICYmIG5hbWVbMV0gPT0gJ24nKSB7XG5cdFx0dmFyIHVzZUNhcHR1cmUgPSBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvQ2FwdHVyZSQvLCAnJykpO1xuXHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDIpO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aWYgKCFvbGQpIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50UHJveHksIHVzZUNhcHR1cmUpO1xuXHRcdH1cblx0XHQobm9kZS5fbGlzdGVuZXJzIHx8IChub2RlLl9saXN0ZW5lcnMgPSB7fSkpW25hbWVdID0gdmFsdWU7XG5cdH0gZWxzZSBpZiAobmFtZSAhPT0gJ2xpc3QnICYmIG5hbWUgIT09ICd0eXBlJyAmJiAhaXNTdmcgJiYgbmFtZSBpbiBub2RlKSB7XG5cdFx0dHJ5IHtcblx0XHRcdG5vZGVbbmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcblx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdGlmICgodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpICYmIG5hbWUgIT0gJ3NwZWxsY2hlY2snKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgbnMgPSBpc1N2ZyAmJiBuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvXnhsaW5rOj8vLCAnJykpO1xuXG5cdFx0aWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRpZiAobnMpIG5vZGUucmVtb3ZlQXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCBuYW1lLnRvTG93ZXJDYXNlKCkpO2Vsc2Ugbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGlmIChucykgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIG5hbWUudG9Mb3dlckNhc2UoKSwgdmFsdWUpO2Vsc2Ugbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBldmVudFByb3h5KGUpIHtcblx0cmV0dXJuIHRoaXMuX2xpc3RlbmVyc1tlLnR5cGVdKG9wdGlvbnMuZXZlbnQgJiYgb3B0aW9ucy5ldmVudChlKSB8fCBlKTtcbn1cblxudmFyIG1vdW50cyA9IFtdO1xuXG52YXIgZGlmZkxldmVsID0gMDtcblxudmFyIGlzU3ZnTW9kZSA9IGZhbHNlO1xuXG52YXIgaHlkcmF0aW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoTW91bnRzKCkge1xuXHR2YXIgYztcblx0d2hpbGUgKGMgPSBtb3VudHMuc2hpZnQoKSkge1xuXHRcdGlmIChvcHRpb25zLmFmdGVyTW91bnQpIG9wdGlvbnMuYWZ0ZXJNb3VudChjKTtcblx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCkgYy5jb21wb25lbnREaWRNb3VudCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRpZmYoZG9tLCB2bm9kZSwgY29udGV4dCwgbW91bnRBbGwsIHBhcmVudCwgY29tcG9uZW50Um9vdCkge1xuXHRpZiAoIWRpZmZMZXZlbCsrKSB7XG5cdFx0aXNTdmdNb2RlID0gcGFyZW50ICE9IG51bGwgJiYgcGFyZW50Lm93bmVyU1ZHRWxlbWVudCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0aHlkcmF0aW5nID0gZG9tICE9IG51bGwgJiYgISgnX19wcmVhY3RhdHRyXycgaW4gZG9tKTtcblx0fVxuXG5cdHZhciByZXQgPSBpZGlmZihkb20sIHZub2RlLCBjb250ZXh0LCBtb3VudEFsbCwgY29tcG9uZW50Um9vdCk7XG5cblx0aWYgKHBhcmVudCAmJiByZXQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSBwYXJlbnQuYXBwZW5kQ2hpbGQocmV0KTtcblxuXHRpZiAoISAtLWRpZmZMZXZlbCkge1xuXHRcdGh5ZHJhdGluZyA9IGZhbHNlO1xuXG5cdFx0aWYgKCFjb21wb25lbnRSb290KSBmbHVzaE1vdW50cygpO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaWRpZmYoZG9tLCB2bm9kZSwgY29udGV4dCwgbW91bnRBbGwsIGNvbXBvbmVudFJvb3QpIHtcblx0dmFyIG91dCA9IGRvbSxcblx0ICAgIHByZXZTdmdNb2RlID0gaXNTdmdNb2RlO1xuXG5cdGlmICh2bm9kZSA9PSBudWxsIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ2Jvb2xlYW4nKSB2bm9kZSA9ICcnO1xuXG5cdGlmICh0eXBlb2Ygdm5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ251bWJlcicpIHtcblx0XHRpZiAoZG9tICYmIGRvbS5zcGxpdFRleHQgIT09IHVuZGVmaW5lZCAmJiBkb20ucGFyZW50Tm9kZSAmJiAoIWRvbS5fY29tcG9uZW50IHx8IGNvbXBvbmVudFJvb3QpKSB7XG5cdFx0XHRpZiAoZG9tLm5vZGVWYWx1ZSAhPSB2bm9kZSkge1xuXHRcdFx0XHRkb20ubm9kZVZhbHVlID0gdm5vZGU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZub2RlKTtcblx0XHRcdGlmIChkb20pIHtcblx0XHRcdFx0aWYgKGRvbS5wYXJlbnROb2RlKSBkb20ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQob3V0LCBkb20pO1xuXHRcdFx0XHRyZWNvbGxlY3ROb2RlVHJlZShkb20sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG91dFsnX19wcmVhY3RhdHRyXyddID0gdHJ1ZTtcblxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHR2YXIgdm5vZGVOYW1lID0gdm5vZGUubm9kZU5hbWU7XG5cdGlmICh0eXBlb2Ygdm5vZGVOYW1lID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGJ1aWxkQ29tcG9uZW50RnJvbVZOb2RlKGRvbSwgdm5vZGUsIGNvbnRleHQsIG1vdW50QWxsKTtcblx0fVxuXG5cdGlzU3ZnTW9kZSA9IHZub2RlTmFtZSA9PT0gJ3N2ZycgPyB0cnVlIDogdm5vZGVOYW1lID09PSAnZm9yZWlnbk9iamVjdCcgPyBmYWxzZSA6IGlzU3ZnTW9kZTtcblxuXHR2bm9kZU5hbWUgPSBTdHJpbmcodm5vZGVOYW1lKTtcblx0aWYgKCFkb20gfHwgIWlzTmFtZWROb2RlKGRvbSwgdm5vZGVOYW1lKSkge1xuXHRcdG91dCA9IGNyZWF0ZU5vZGUodm5vZGVOYW1lLCBpc1N2Z01vZGUpO1xuXG5cdFx0aWYgKGRvbSkge1xuXHRcdFx0d2hpbGUgKGRvbS5maXJzdENoaWxkKSB7XG5cdFx0XHRcdG91dC5hcHBlbmRDaGlsZChkb20uZmlyc3RDaGlsZCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9tLnBhcmVudE5vZGUpIGRvbS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChvdXQsIGRvbSk7XG5cblx0XHRcdHJlY29sbGVjdE5vZGVUcmVlKGRvbSwgdHJ1ZSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGZjID0gb3V0LmZpcnN0Q2hpbGQsXG5cdCAgICBwcm9wcyA9IG91dFsnX19wcmVhY3RhdHRyXyddLFxuXHQgICAgdmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG5cblx0aWYgKHByb3BzID09IG51bGwpIHtcblx0XHRwcm9wcyA9IG91dFsnX19wcmVhY3RhdHRyXyddID0ge307XG5cdFx0Zm9yICh2YXIgYSA9IG91dC5hdHRyaWJ1dGVzLCBpID0gYS5sZW5ndGg7IGktLTspIHtcblx0XHRcdHByb3BzW2FbaV0ubmFtZV0gPSBhW2ldLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdGlmICghaHlkcmF0aW5nICYmIHZjaGlsZHJlbiAmJiB2Y2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIHR5cGVvZiB2Y2hpbGRyZW5bMF0gPT09ICdzdHJpbmcnICYmIGZjICE9IG51bGwgJiYgZmMuc3BsaXRUZXh0ICE9PSB1bmRlZmluZWQgJiYgZmMubmV4dFNpYmxpbmcgPT0gbnVsbCkge1xuXHRcdGlmIChmYy5ub2RlVmFsdWUgIT0gdmNoaWxkcmVuWzBdKSB7XG5cdFx0XHRmYy5ub2RlVmFsdWUgPSB2Y2hpbGRyZW5bMF07XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHZjaGlsZHJlbiAmJiB2Y2hpbGRyZW4ubGVuZ3RoIHx8IGZjICE9IG51bGwpIHtcblx0XHRcdGlubmVyRGlmZk5vZGUob3V0LCB2Y2hpbGRyZW4sIGNvbnRleHQsIG1vdW50QWxsLCBoeWRyYXRpbmcgfHwgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCk7XG5cdFx0fVxuXG5cdGRpZmZBdHRyaWJ1dGVzKG91dCwgdm5vZGUuYXR0cmlidXRlcywgcHJvcHMpO1xuXG5cdGlzU3ZnTW9kZSA9IHByZXZTdmdNb2RlO1xuXG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGlubmVyRGlmZk5vZGUoZG9tLCB2Y2hpbGRyZW4sIGNvbnRleHQsIG1vdW50QWxsLCBpc0h5ZHJhdGluZykge1xuXHR2YXIgb3JpZ2luYWxDaGlsZHJlbiA9IGRvbS5jaGlsZE5vZGVzLFxuXHQgICAgY2hpbGRyZW4gPSBbXSxcblx0ICAgIGtleWVkID0ge30sXG5cdCAgICBrZXllZExlbiA9IDAsXG5cdCAgICBtaW4gPSAwLFxuXHQgICAgbGVuID0gb3JpZ2luYWxDaGlsZHJlbi5sZW5ndGgsXG5cdCAgICBjaGlsZHJlbkxlbiA9IDAsXG5cdCAgICB2bGVuID0gdmNoaWxkcmVuID8gdmNoaWxkcmVuLmxlbmd0aCA6IDAsXG5cdCAgICBqLFxuXHQgICAgYyxcblx0ICAgIGYsXG5cdCAgICB2Y2hpbGQsXG5cdCAgICBjaGlsZDtcblxuXHRpZiAobGVuICE9PSAwKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIF9jaGlsZCA9IG9yaWdpbmFsQ2hpbGRyZW5baV0sXG5cdFx0XHQgICAgcHJvcHMgPSBfY2hpbGRbJ19fcHJlYWN0YXR0cl8nXSxcblx0XHRcdCAgICBrZXkgPSB2bGVuICYmIHByb3BzID8gX2NoaWxkLl9jb21wb25lbnQgPyBfY2hpbGQuX2NvbXBvbmVudC5fX2tleSA6IHByb3BzLmtleSA6IG51bGw7XG5cdFx0XHRpZiAoa2V5ICE9IG51bGwpIHtcblx0XHRcdFx0a2V5ZWRMZW4rKztcblx0XHRcdFx0a2V5ZWRba2V5XSA9IF9jaGlsZDtcblx0XHRcdH0gZWxzZSBpZiAocHJvcHMgfHwgKF9jaGlsZC5zcGxpdFRleHQgIT09IHVuZGVmaW5lZCA/IGlzSHlkcmF0aW5nID8gX2NoaWxkLm5vZGVWYWx1ZS50cmltKCkgOiB0cnVlIDogaXNIeWRyYXRpbmcpKSB7XG5cdFx0XHRcdGNoaWxkcmVuW2NoaWxkcmVuTGVuKytdID0gX2NoaWxkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICh2bGVuICE9PSAwKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2bGVuOyBpKyspIHtcblx0XHRcdHZjaGlsZCA9IHZjaGlsZHJlbltpXTtcblx0XHRcdGNoaWxkID0gbnVsbDtcblxuXHRcdFx0dmFyIGtleSA9IHZjaGlsZC5rZXk7XG5cdFx0XHRpZiAoa2V5ICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGtleWVkTGVuICYmIGtleWVkW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGNoaWxkID0ga2V5ZWRba2V5XTtcblx0XHRcdFx0XHRrZXllZFtrZXldID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdGtleWVkTGVuLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAobWluIDwgY2hpbGRyZW5MZW4pIHtcblx0XHRcdFx0XHRmb3IgKGogPSBtaW47IGogPCBjaGlsZHJlbkxlbjsgaisrKSB7XG5cdFx0XHRcdFx0XHRpZiAoY2hpbGRyZW5bal0gIT09IHVuZGVmaW5lZCAmJiBpc1NhbWVOb2RlVHlwZShjID0gY2hpbGRyZW5bal0sIHZjaGlsZCwgaXNIeWRyYXRpbmcpKSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkID0gYztcblx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5bal0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmIChqID09PSBjaGlsZHJlbkxlbiAtIDEpIGNoaWxkcmVuTGVuLS07XG5cdFx0XHRcdFx0XHRcdGlmIChqID09PSBtaW4pIG1pbisrO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Y2hpbGQgPSBpZGlmZihjaGlsZCwgdmNoaWxkLCBjb250ZXh0LCBtb3VudEFsbCk7XG5cblx0XHRcdGYgPSBvcmlnaW5hbENoaWxkcmVuW2ldO1xuXHRcdFx0aWYgKGNoaWxkICYmIGNoaWxkICE9PSBkb20gJiYgY2hpbGQgIT09IGYpIHtcblx0XHRcdFx0aWYgKGYgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGRvbS5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoY2hpbGQgPT09IGYubmV4dFNpYmxpbmcpIHtcblx0XHRcdFx0XHRyZW1vdmVOb2RlKGYpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvbS5pbnNlcnRCZWZvcmUoY2hpbGQsIGYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGtleWVkTGVuKSB7XG5cdFx0Zm9yICh2YXIgaSBpbiBrZXllZCkge1xuXHRcdFx0aWYgKGtleWVkW2ldICE9PSB1bmRlZmluZWQpIHJlY29sbGVjdE5vZGVUcmVlKGtleWVkW2ldLCBmYWxzZSk7XG5cdFx0fVxuXHR9XG5cblx0d2hpbGUgKG1pbiA8PSBjaGlsZHJlbkxlbikge1xuXHRcdGlmICgoY2hpbGQgPSBjaGlsZHJlbltjaGlsZHJlbkxlbi0tXSkgIT09IHVuZGVmaW5lZCkgcmVjb2xsZWN0Tm9kZVRyZWUoY2hpbGQsIGZhbHNlKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZWNvbGxlY3ROb2RlVHJlZShub2RlLCB1bm1vdW50T25seSkge1xuXHR2YXIgY29tcG9uZW50ID0gbm9kZS5fY29tcG9uZW50O1xuXHRpZiAoY29tcG9uZW50KSB7XG5cdFx0dW5tb3VudENvbXBvbmVudChjb21wb25lbnQpO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChub2RlWydfX3ByZWFjdGF0dHJfJ10gIT0gbnVsbCkgYXBwbHlSZWYobm9kZVsnX19wcmVhY3RhdHRyXyddLnJlZiwgbnVsbCk7XG5cblx0XHRpZiAodW5tb3VudE9ubHkgPT09IGZhbHNlIHx8IG5vZGVbJ19fcHJlYWN0YXR0cl8nXSA9PSBudWxsKSB7XG5cdFx0XHRyZW1vdmVOb2RlKG5vZGUpO1xuXHRcdH1cblxuXHRcdHJlbW92ZUNoaWxkcmVuKG5vZGUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKG5vZGUpIHtcblx0bm9kZSA9IG5vZGUubGFzdENoaWxkO1xuXHR3aGlsZSAobm9kZSkge1xuXHRcdHZhciBuZXh0ID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG5cdFx0cmVjb2xsZWN0Tm9kZVRyZWUobm9kZSwgdHJ1ZSk7XG5cdFx0bm9kZSA9IG5leHQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gZGlmZkF0dHJpYnV0ZXMoZG9tLCBhdHRycywgb2xkKSB7XG5cdHZhciBuYW1lO1xuXG5cdGZvciAobmFtZSBpbiBvbGQpIHtcblx0XHRpZiAoIShhdHRycyAmJiBhdHRyc1tuYW1lXSAhPSBudWxsKSAmJiBvbGRbbmFtZV0gIT0gbnVsbCkge1xuXHRcdFx0c2V0QWNjZXNzb3IoZG9tLCBuYW1lLCBvbGRbbmFtZV0sIG9sZFtuYW1lXSA9IHVuZGVmaW5lZCwgaXNTdmdNb2RlKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKG5hbWUgaW4gYXR0cnMpIHtcblx0XHRpZiAobmFtZSAhPT0gJ2NoaWxkcmVuJyAmJiBuYW1lICE9PSAnaW5uZXJIVE1MJyAmJiAoIShuYW1lIGluIG9sZCkgfHwgYXR0cnNbbmFtZV0gIT09IChuYW1lID09PSAndmFsdWUnIHx8IG5hbWUgPT09ICdjaGVja2VkJyA/IGRvbVtuYW1lXSA6IG9sZFtuYW1lXSkpKSB7XG5cdFx0XHRzZXRBY2Nlc3Nvcihkb20sIG5hbWUsIG9sZFtuYW1lXSwgb2xkW25hbWVdID0gYXR0cnNbbmFtZV0sIGlzU3ZnTW9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbnZhciByZWN5Y2xlckNvbXBvbmVudHMgPSBbXTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KEN0b3IsIHByb3BzLCBjb250ZXh0KSB7XG5cdHZhciBpbnN0LFxuXHQgICAgaSA9IHJlY3ljbGVyQ29tcG9uZW50cy5sZW5ndGg7XG5cblx0aWYgKEN0b3IucHJvdG90eXBlICYmIEN0b3IucHJvdG90eXBlLnJlbmRlcikge1xuXHRcdGluc3QgPSBuZXcgQ3Rvcihwcm9wcywgY29udGV4dCk7XG5cdFx0Q29tcG9uZW50LmNhbGwoaW5zdCwgcHJvcHMsIGNvbnRleHQpO1xuXHR9IGVsc2Uge1xuXHRcdGluc3QgPSBuZXcgQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KTtcblx0XHRpbnN0LmNvbnN0cnVjdG9yID0gQ3Rvcjtcblx0XHRpbnN0LnJlbmRlciA9IGRvUmVuZGVyO1xuXHR9XG5cblx0d2hpbGUgKGktLSkge1xuXHRcdGlmIChyZWN5Y2xlckNvbXBvbmVudHNbaV0uY29uc3RydWN0b3IgPT09IEN0b3IpIHtcblx0XHRcdGluc3QubmV4dEJhc2UgPSByZWN5Y2xlckNvbXBvbmVudHNbaV0ubmV4dEJhc2U7XG5cdFx0XHRyZWN5Y2xlckNvbXBvbmVudHMuc3BsaWNlKGksIDEpO1xuXHRcdFx0cmV0dXJuIGluc3Q7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGluc3Q7XG59XG5cbmZ1bmN0aW9uIGRvUmVuZGVyKHByb3BzLCBzdGF0ZSwgY29udGV4dCkge1xuXHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHNldENvbXBvbmVudFByb3BzKGNvbXBvbmVudCwgcHJvcHMsIHJlbmRlck1vZGUsIGNvbnRleHQsIG1vdW50QWxsKSB7XG5cdGlmIChjb21wb25lbnQuX2Rpc2FibGUpIHJldHVybjtcblx0Y29tcG9uZW50Ll9kaXNhYmxlID0gdHJ1ZTtcblxuXHRjb21wb25lbnQuX19yZWYgPSBwcm9wcy5yZWY7XG5cdGNvbXBvbmVudC5fX2tleSA9IHByb3BzLmtleTtcblx0ZGVsZXRlIHByb3BzLnJlZjtcblx0ZGVsZXRlIHByb3BzLmtleTtcblxuXHRpZiAodHlwZW9mIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYgKCFjb21wb25lbnQuYmFzZSB8fCBtb3VudEFsbCkge1xuXHRcdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsTW91bnQpIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTW91bnQoKTtcblx0XHR9IGVsc2UgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG5cdFx0XHRjb21wb25lbnQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhwcm9wcywgY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gY29tcG9uZW50LmNvbnRleHQpIHtcblx0XHRpZiAoIWNvbXBvbmVudC5wcmV2Q29udGV4dCkgY29tcG9uZW50LnByZXZDb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQ7XG5cdFx0Y29tcG9uZW50LmNvbnRleHQgPSBjb250ZXh0O1xuXHR9XG5cblx0aWYgKCFjb21wb25lbnQucHJldlByb3BzKSBjb21wb25lbnQucHJldlByb3BzID0gY29tcG9uZW50LnByb3BzO1xuXHRjb21wb25lbnQucHJvcHMgPSBwcm9wcztcblxuXHRjb21wb25lbnQuX2Rpc2FibGUgPSBmYWxzZTtcblxuXHRpZiAocmVuZGVyTW9kZSAhPT0gMCkge1xuXHRcdGlmIChyZW5kZXJNb2RlID09PSAxIHx8IG9wdGlvbnMuc3luY0NvbXBvbmVudFVwZGF0ZXMgIT09IGZhbHNlIHx8ICFjb21wb25lbnQuYmFzZSkge1xuXHRcdFx0cmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCwgMSwgbW91bnRBbGwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbnF1ZXVlUmVuZGVyKGNvbXBvbmVudCk7XG5cdFx0fVxuXHR9XG5cblx0YXBwbHlSZWYoY29tcG9uZW50Ll9fcmVmLCBjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnQoY29tcG9uZW50LCByZW5kZXJNb2RlLCBtb3VudEFsbCwgaXNDaGlsZCkge1xuXHRpZiAoY29tcG9uZW50Ll9kaXNhYmxlKSByZXR1cm47XG5cblx0dmFyIHByb3BzID0gY29tcG9uZW50LnByb3BzLFxuXHQgICAgc3RhdGUgPSBjb21wb25lbnQuc3RhdGUsXG5cdCAgICBjb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQsXG5cdCAgICBwcmV2aW91c1Byb3BzID0gY29tcG9uZW50LnByZXZQcm9wcyB8fCBwcm9wcyxcblx0ICAgIHByZXZpb3VzU3RhdGUgPSBjb21wb25lbnQucHJldlN0YXRlIHx8IHN0YXRlLFxuXHQgICAgcHJldmlvdXNDb250ZXh0ID0gY29tcG9uZW50LnByZXZDb250ZXh0IHx8IGNvbnRleHQsXG5cdCAgICBpc1VwZGF0ZSA9IGNvbXBvbmVudC5iYXNlLFxuXHQgICAgbmV4dEJhc2UgPSBjb21wb25lbnQubmV4dEJhc2UsXG5cdCAgICBpbml0aWFsQmFzZSA9IGlzVXBkYXRlIHx8IG5leHRCYXNlLFxuXHQgICAgaW5pdGlhbENoaWxkQ29tcG9uZW50ID0gY29tcG9uZW50Ll9jb21wb25lbnQsXG5cdCAgICBza2lwID0gZmFsc2UsXG5cdCAgICBzbmFwc2hvdCA9IHByZXZpb3VzQ29udGV4dCxcblx0ICAgIHJlbmRlcmVkLFxuXHQgICAgaW5zdCxcblx0ICAgIGNiYXNlO1xuXG5cdGlmIChjb21wb25lbnQuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKSB7XG5cdFx0c3RhdGUgPSBleHRlbmQoZXh0ZW5kKHt9LCBzdGF0ZSksIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSk7XG5cdFx0Y29tcG9uZW50LnN0YXRlID0gc3RhdGU7XG5cdH1cblxuXHRpZiAoaXNVcGRhdGUpIHtcblx0XHRjb21wb25lbnQucHJvcHMgPSBwcmV2aW91c1Byb3BzO1xuXHRcdGNvbXBvbmVudC5zdGF0ZSA9IHByZXZpb3VzU3RhdGU7XG5cdFx0Y29tcG9uZW50LmNvbnRleHQgPSBwcmV2aW91c0NvbnRleHQ7XG5cdFx0aWYgKHJlbmRlck1vZGUgIT09IDIgJiYgY29tcG9uZW50LnNob3VsZENvbXBvbmVudFVwZGF0ZSAmJiBjb21wb25lbnQuc2hvdWxkQ29tcG9uZW50VXBkYXRlKHByb3BzLCBzdGF0ZSwgY29udGV4dCkgPT09IGZhbHNlKSB7XG5cdFx0XHRza2lwID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsVXBkYXRlKSB7XG5cdFx0XHRjb21wb25lbnQuY29tcG9uZW50V2lsbFVwZGF0ZShwcm9wcywgc3RhdGUsIGNvbnRleHQpO1xuXHRcdH1cblx0XHRjb21wb25lbnQucHJvcHMgPSBwcm9wcztcblx0XHRjb21wb25lbnQuc3RhdGUgPSBzdGF0ZTtcblx0XHRjb21wb25lbnQuY29udGV4dCA9IGNvbnRleHQ7XG5cdH1cblxuXHRjb21wb25lbnQucHJldlByb3BzID0gY29tcG9uZW50LnByZXZTdGF0ZSA9IGNvbXBvbmVudC5wcmV2Q29udGV4dCA9IGNvbXBvbmVudC5uZXh0QmFzZSA9IG51bGw7XG5cdGNvbXBvbmVudC5fZGlydHkgPSBmYWxzZTtcblxuXHRpZiAoIXNraXApIHtcblx0XHRyZW5kZXJlZCA9IGNvbXBvbmVudC5yZW5kZXIocHJvcHMsIHN0YXRlLCBjb250ZXh0KTtcblxuXHRcdGlmIChjb21wb25lbnQuZ2V0Q2hpbGRDb250ZXh0KSB7XG5cdFx0XHRjb250ZXh0ID0gZXh0ZW5kKGV4dGVuZCh7fSwgY29udGV4dCksIGNvbXBvbmVudC5nZXRDaGlsZENvbnRleHQoKSk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzVXBkYXRlICYmIGNvbXBvbmVudC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkge1xuXHRcdFx0c25hcHNob3QgPSBjb21wb25lbnQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldmlvdXNQcm9wcywgcHJldmlvdXNTdGF0ZSk7XG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkQ29tcG9uZW50ID0gcmVuZGVyZWQgJiYgcmVuZGVyZWQubm9kZU5hbWUsXG5cdFx0ICAgIHRvVW5tb3VudCxcblx0XHQgICAgYmFzZTtcblxuXHRcdGlmICh0eXBlb2YgY2hpbGRDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcblxuXHRcdFx0dmFyIGNoaWxkUHJvcHMgPSBnZXROb2RlUHJvcHMocmVuZGVyZWQpO1xuXHRcdFx0aW5zdCA9IGluaXRpYWxDaGlsZENvbXBvbmVudDtcblxuXHRcdFx0aWYgKGluc3QgJiYgaW5zdC5jb25zdHJ1Y3RvciA9PT0gY2hpbGRDb21wb25lbnQgJiYgY2hpbGRQcm9wcy5rZXkgPT0gaW5zdC5fX2tleSkge1xuXHRcdFx0XHRzZXRDb21wb25lbnRQcm9wcyhpbnN0LCBjaGlsZFByb3BzLCAxLCBjb250ZXh0LCBmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0b1VubW91bnQgPSBpbnN0O1xuXG5cdFx0XHRcdGNvbXBvbmVudC5fY29tcG9uZW50ID0gaW5zdCA9IGNyZWF0ZUNvbXBvbmVudChjaGlsZENvbXBvbmVudCwgY2hpbGRQcm9wcywgY29udGV4dCk7XG5cdFx0XHRcdGluc3QubmV4dEJhc2UgPSBpbnN0Lm5leHRCYXNlIHx8IG5leHRCYXNlO1xuXHRcdFx0XHRpbnN0Ll9wYXJlbnRDb21wb25lbnQgPSBjb21wb25lbnQ7XG5cdFx0XHRcdHNldENvbXBvbmVudFByb3BzKGluc3QsIGNoaWxkUHJvcHMsIDAsIGNvbnRleHQsIGZhbHNlKTtcblx0XHRcdFx0cmVuZGVyQ29tcG9uZW50KGluc3QsIDEsIG1vdW50QWxsLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0YmFzZSA9IGluc3QuYmFzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2Jhc2UgPSBpbml0aWFsQmFzZTtcblxuXHRcdFx0dG9Vbm1vdW50ID0gaW5pdGlhbENoaWxkQ29tcG9uZW50O1xuXHRcdFx0aWYgKHRvVW5tb3VudCkge1xuXHRcdFx0XHRjYmFzZSA9IGNvbXBvbmVudC5fY29tcG9uZW50ID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGluaXRpYWxCYXNlIHx8IHJlbmRlck1vZGUgPT09IDEpIHtcblx0XHRcdFx0aWYgKGNiYXNlKSBjYmFzZS5fY29tcG9uZW50ID0gbnVsbDtcblx0XHRcdFx0YmFzZSA9IGRpZmYoY2Jhc2UsIHJlbmRlcmVkLCBjb250ZXh0LCBtb3VudEFsbCB8fCAhaXNVcGRhdGUsIGluaXRpYWxCYXNlICYmIGluaXRpYWxCYXNlLnBhcmVudE5vZGUsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpbml0aWFsQmFzZSAmJiBiYXNlICE9PSBpbml0aWFsQmFzZSAmJiBpbnN0ICE9PSBpbml0aWFsQ2hpbGRDb21wb25lbnQpIHtcblx0XHRcdHZhciBiYXNlUGFyZW50ID0gaW5pdGlhbEJhc2UucGFyZW50Tm9kZTtcblx0XHRcdGlmIChiYXNlUGFyZW50ICYmIGJhc2UgIT09IGJhc2VQYXJlbnQpIHtcblx0XHRcdFx0YmFzZVBhcmVudC5yZXBsYWNlQ2hpbGQoYmFzZSwgaW5pdGlhbEJhc2UpO1xuXG5cdFx0XHRcdGlmICghdG9Vbm1vdW50KSB7XG5cdFx0XHRcdFx0aW5pdGlhbEJhc2UuX2NvbXBvbmVudCA9IG51bGw7XG5cdFx0XHRcdFx0cmVjb2xsZWN0Tm9kZVRyZWUoaW5pdGlhbEJhc2UsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0b1VubW91bnQpIHtcblx0XHRcdHVubW91bnRDb21wb25lbnQodG9Vbm1vdW50KTtcblx0XHR9XG5cblx0XHRjb21wb25lbnQuYmFzZSA9IGJhc2U7XG5cdFx0aWYgKGJhc2UgJiYgIWlzQ2hpbGQpIHtcblx0XHRcdHZhciBjb21wb25lbnRSZWYgPSBjb21wb25lbnQsXG5cdFx0XHQgICAgdCA9IGNvbXBvbmVudDtcblx0XHRcdHdoaWxlICh0ID0gdC5fcGFyZW50Q29tcG9uZW50KSB7XG5cdFx0XHRcdChjb21wb25lbnRSZWYgPSB0KS5iYXNlID0gYmFzZTtcblx0XHRcdH1cblx0XHRcdGJhc2UuX2NvbXBvbmVudCA9IGNvbXBvbmVudFJlZjtcblx0XHRcdGJhc2UuX2NvbXBvbmVudENvbnN0cnVjdG9yID0gY29tcG9uZW50UmVmLmNvbnN0cnVjdG9yO1xuXHRcdH1cblx0fVxuXG5cdGlmICghaXNVcGRhdGUgfHwgbW91bnRBbGwpIHtcblx0XHRtb3VudHMucHVzaChjb21wb25lbnQpO1xuXHR9IGVsc2UgaWYgKCFza2lwKSB7XG5cblx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZFVwZGF0ZSkge1xuXHRcdFx0Y29tcG9uZW50LmNvbXBvbmVudERpZFVwZGF0ZShwcmV2aW91c1Byb3BzLCBwcmV2aW91c1N0YXRlLCBzbmFwc2hvdCk7XG5cdFx0fVxuXHRcdGlmIChvcHRpb25zLmFmdGVyVXBkYXRlKSBvcHRpb25zLmFmdGVyVXBkYXRlKGNvbXBvbmVudCk7XG5cdH1cblxuXHR3aGlsZSAoY29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0Y29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MucG9wKCkuY2FsbChjb21wb25lbnQpO1xuXHR9aWYgKCFkaWZmTGV2ZWwgJiYgIWlzQ2hpbGQpIGZsdXNoTW91bnRzKCk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ29tcG9uZW50RnJvbVZOb2RlKGRvbSwgdm5vZGUsIGNvbnRleHQsIG1vdW50QWxsKSB7XG5cdHZhciBjID0gZG9tICYmIGRvbS5fY29tcG9uZW50LFxuXHQgICAgb3JpZ2luYWxDb21wb25lbnQgPSBjLFxuXHQgICAgb2xkRG9tID0gZG9tLFxuXHQgICAgaXNEaXJlY3RPd25lciA9IGMgJiYgZG9tLl9jb21wb25lbnRDb25zdHJ1Y3RvciA9PT0gdm5vZGUubm9kZU5hbWUsXG5cdCAgICBpc093bmVyID0gaXNEaXJlY3RPd25lcixcblx0ICAgIHByb3BzID0gZ2V0Tm9kZVByb3BzKHZub2RlKTtcblx0d2hpbGUgKGMgJiYgIWlzT3duZXIgJiYgKGMgPSBjLl9wYXJlbnRDb21wb25lbnQpKSB7XG5cdFx0aXNPd25lciA9IGMuY29uc3RydWN0b3IgPT09IHZub2RlLm5vZGVOYW1lO1xuXHR9XG5cblx0aWYgKGMgJiYgaXNPd25lciAmJiAoIW1vdW50QWxsIHx8IGMuX2NvbXBvbmVudCkpIHtcblx0XHRzZXRDb21wb25lbnRQcm9wcyhjLCBwcm9wcywgMywgY29udGV4dCwgbW91bnRBbGwpO1xuXHRcdGRvbSA9IGMuYmFzZTtcblx0fSBlbHNlIHtcblx0XHRpZiAob3JpZ2luYWxDb21wb25lbnQgJiYgIWlzRGlyZWN0T3duZXIpIHtcblx0XHRcdHVubW91bnRDb21wb25lbnQob3JpZ2luYWxDb21wb25lbnQpO1xuXHRcdFx0ZG9tID0gb2xkRG9tID0gbnVsbDtcblx0XHR9XG5cblx0XHRjID0gY3JlYXRlQ29tcG9uZW50KHZub2RlLm5vZGVOYW1lLCBwcm9wcywgY29udGV4dCk7XG5cdFx0aWYgKGRvbSAmJiAhYy5uZXh0QmFzZSkge1xuXHRcdFx0Yy5uZXh0QmFzZSA9IGRvbTtcblxuXHRcdFx0b2xkRG9tID0gbnVsbDtcblx0XHR9XG5cdFx0c2V0Q29tcG9uZW50UHJvcHMoYywgcHJvcHMsIDEsIGNvbnRleHQsIG1vdW50QWxsKTtcblx0XHRkb20gPSBjLmJhc2U7XG5cblx0XHRpZiAob2xkRG9tICYmIGRvbSAhPT0gb2xkRG9tKSB7XG5cdFx0XHRvbGREb20uX2NvbXBvbmVudCA9IG51bGw7XG5cdFx0XHRyZWNvbGxlY3ROb2RlVHJlZShvbGREb20sIGZhbHNlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZG9tO1xufVxuXG5mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50KGNvbXBvbmVudCkge1xuXHRpZiAob3B0aW9ucy5iZWZvcmVVbm1vdW50KSBvcHRpb25zLmJlZm9yZVVubW91bnQoY29tcG9uZW50KTtcblxuXHR2YXIgYmFzZSA9IGNvbXBvbmVudC5iYXNlO1xuXG5cdGNvbXBvbmVudC5fZGlzYWJsZSA9IHRydWU7XG5cblx0aWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsVW5tb3VudCkgY29tcG9uZW50LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cblx0Y29tcG9uZW50LmJhc2UgPSBudWxsO1xuXG5cdHZhciBpbm5lciA9IGNvbXBvbmVudC5fY29tcG9uZW50O1xuXHRpZiAoaW5uZXIpIHtcblx0XHR1bm1vdW50Q29tcG9uZW50KGlubmVyKTtcblx0fSBlbHNlIGlmIChiYXNlKSB7XG5cdFx0aWYgKGJhc2VbJ19fcHJlYWN0YXR0cl8nXSAhPSBudWxsKSBhcHBseVJlZihiYXNlWydfX3ByZWFjdGF0dHJfJ10ucmVmLCBudWxsKTtcblxuXHRcdGNvbXBvbmVudC5uZXh0QmFzZSA9IGJhc2U7XG5cblx0XHRyZW1vdmVOb2RlKGJhc2UpO1xuXHRcdHJlY3ljbGVyQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG5cblx0XHRyZW1vdmVDaGlsZHJlbihiYXNlKTtcblx0fVxuXG5cdGFwcGx5UmVmKGNvbXBvbmVudC5fX3JlZiwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuXHR0aGlzLl9kaXJ0eSA9IHRydWU7XG5cblx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuXHR0aGlzLnByb3BzID0gcHJvcHM7XG5cblx0dGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGUgfHwge307XG5cblx0dGhpcy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG59XG5cbmV4dGVuZChDb21wb25lbnQucHJvdG90eXBlLCB7XG5cdHNldFN0YXRlOiBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSwgY2FsbGJhY2spIHtcblx0XHRpZiAoIXRoaXMucHJldlN0YXRlKSB0aGlzLnByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdFx0dGhpcy5zdGF0ZSA9IGV4dGVuZChleHRlbmQoe30sIHRoaXMuc3RhdGUpLCB0eXBlb2Ygc3RhdGUgPT09ICdmdW5jdGlvbicgPyBzdGF0ZSh0aGlzLnN0YXRlLCB0aGlzLnByb3BzKSA6IHN0YXRlKTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9LFxuXHRmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoY2FsbGJhY2spIHtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRyZW5kZXJDb21wb25lbnQodGhpcywgMik7XG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge31cbn0pO1xuXG5mdW5jdGlvbiByZW5kZXIodm5vZGUsIHBhcmVudCwgbWVyZ2UpIHtcbiAgcmV0dXJuIGRpZmYobWVyZ2UsIHZub2RlLCB7fSwgZmFsc2UsIHBhcmVudCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG5cdHJldHVybiB7fTtcbn1cblxudmFyIHByZWFjdCA9IHtcblx0aDogaCxcblx0Y3JlYXRlRWxlbWVudDogaCxcblx0Y2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG5cdGNyZWF0ZVJlZjogY3JlYXRlUmVmLFxuXHRDb21wb25lbnQ6IENvbXBvbmVudCxcblx0cmVuZGVyOiByZW5kZXIsXG5cdHJlcmVuZGVyOiByZXJlbmRlcixcblx0b3B0aW9uczogb3B0aW9uc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcHJlYWN0O1xuZXhwb3J0IHsgaCwgaCBhcyBjcmVhdGVFbGVtZW50LCBjbG9uZUVsZW1lbnQsIGNyZWF0ZVJlZiwgQ29tcG9uZW50LCByZW5kZXIsIHJlcmVuZGVyLCBvcHRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBjbG9uZUVsZW1lbnQsIGggfSBmcm9tICdwcmVhY3QnO1xuXG52YXIgRU1QVFkkMSA9IHt9O1xuXG5mdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG5cdGZvciAodmFyIGkgaW4gcHJvcHMpIHtcblx0XHRvYmpbaV0gPSBwcm9wc1tpXTtcblx0fVxuXHRyZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBleGVjKHVybCwgcm91dGUsIG9wdHMpIHtcblx0dmFyIHJlZyA9IC8oPzpcXD8oW14jXSopKT8oIy4qKT8kLyxcblx0XHRjID0gdXJsLm1hdGNoKHJlZyksXG5cdFx0bWF0Y2hlcyA9IHt9LFxuXHRcdHJldDtcblx0aWYgKGMgJiYgY1sxXSkge1xuXHRcdHZhciBwID0gY1sxXS5zcGxpdCgnJicpO1xuXHRcdGZvciAodmFyIGk9MDsgaTxwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgciA9IHBbaV0uc3BsaXQoJz0nKTtcblx0XHRcdG1hdGNoZXNbZGVjb2RlVVJJQ29tcG9uZW50KHJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChyLnNsaWNlKDEpLmpvaW4oJz0nKSk7XG5cdFx0fVxuXHR9XG5cdHVybCA9IHNlZ21lbnRpemUodXJsLnJlcGxhY2UocmVnLCAnJykpO1xuXHRyb3V0ZSA9IHNlZ21lbnRpemUocm91dGUgfHwgJycpO1xuXHR2YXIgbWF4ID0gTWF0aC5tYXgodXJsLmxlbmd0aCwgcm91dGUubGVuZ3RoKTtcblx0Zm9yICh2YXIgaSQxPTA7IGkkMTxtYXg7IGkkMSsrKSB7XG5cdFx0aWYgKHJvdXRlW2kkMV0gJiYgcm91dGVbaSQxXS5jaGFyQXQoMCk9PT0nOicpIHtcblx0XHRcdHZhciBwYXJhbSA9IHJvdXRlW2kkMV0ucmVwbGFjZSgvKF5cXDp8WysqP10rJCkvZywgJycpLFxuXHRcdFx0XHRmbGFncyA9IChyb3V0ZVtpJDFdLm1hdGNoKC9bKyo/XSskLykgfHwgRU1QVFkkMSlbMF0gfHwgJycsXG5cdFx0XHRcdHBsdXMgPSB+ZmxhZ3MuaW5kZXhPZignKycpLFxuXHRcdFx0XHRzdGFyID0gfmZsYWdzLmluZGV4T2YoJyonKSxcblx0XHRcdFx0dmFsID0gdXJsW2kkMV0gfHwgJyc7XG5cdFx0XHRpZiAoIXZhbCAmJiAhc3RhciAmJiAoZmxhZ3MuaW5kZXhPZignPycpPDAgfHwgcGx1cykpIHtcblx0XHRcdFx0cmV0ID0gZmFsc2U7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlc1twYXJhbV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcblx0XHRcdGlmIChwbHVzIHx8IHN0YXIpIHtcblx0XHRcdFx0bWF0Y2hlc1twYXJhbV0gPSB1cmwuc2xpY2UoaSQxKS5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KS5qb2luKCcvJyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmIChyb3V0ZVtpJDFdIT09dXJsW2kkMV0pIHtcblx0XHRcdHJldCA9IGZhbHNlO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdGlmIChvcHRzLmRlZmF1bHQhPT10cnVlICYmIHJldD09PWZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gcGF0aFJhbmtTb3J0KGEsIGIpIHtcblx0cmV0dXJuIChcblx0XHQoYS5yYW5rIDwgYi5yYW5rKSA/IDEgOlxuXHRcdChhLnJhbmsgPiBiLnJhbmspID8gLTEgOlxuXHRcdChhLmluZGV4IC0gYi5pbmRleClcblx0KTtcbn1cblxuLy8gZmlsdGVyIG91dCBWTm9kZXMgd2l0aG91dCBhdHRyaWJ1dGVzICh3aGljaCBhcmUgdW5yYW5rZWFibGUpLCBhbmQgYWRkIGBpbmRleGAvYHJhbmtgIHByb3BlcnRpZXMgdG8gYmUgdXNlZCBpbiBzb3J0aW5nLlxuZnVuY3Rpb24gcHJlcGFyZVZOb2RlRm9yUmFua2luZyh2bm9kZSwgaW5kZXgpIHtcblx0dm5vZGUuaW5kZXggPSBpbmRleDtcblx0dm5vZGUucmFuayA9IHJhbmtDaGlsZCh2bm9kZSk7XG5cdHJldHVybiB2bm9kZS5hdHRyaWJ1dGVzO1xufVxuXG5mdW5jdGlvbiBzZWdtZW50aXplKHVybCkge1xuXHRyZXR1cm4gdXJsLnJlcGxhY2UoLyheXFwvK3xcXC8rJCkvZywgJycpLnNwbGl0KCcvJyk7XG59XG5cbmZ1bmN0aW9uIHJhbmtTZWdtZW50KHNlZ21lbnQpIHtcblx0cmV0dXJuIHNlZ21lbnQuY2hhckF0KDApPT0nOicgPyAoMSArICcqKz8nLmluZGV4T2Yoc2VnbWVudC5jaGFyQXQoc2VnbWVudC5sZW5ndGgtMSkpKSB8fCA0IDogNTtcbn1cblxuZnVuY3Rpb24gcmFuayhwYXRoKSB7XG5cdHJldHVybiBzZWdtZW50aXplKHBhdGgpLm1hcChyYW5rU2VnbWVudCkuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHJhbmtDaGlsZCh2bm9kZSkge1xuXHRyZXR1cm4gdm5vZGUuYXR0cmlidXRlcy5kZWZhdWx0ID8gMCA6IHJhbmsodm5vZGUuYXR0cmlidXRlcy5wYXRoKTtcbn1cblxudmFyIGN1c3RvbUhpc3RvcnkgPSBudWxsO1xuXG52YXIgUk9VVEVSUyA9IFtdO1xuXG52YXIgc3Vic2NyaWJlcnMgPSBbXTtcblxudmFyIEVNUFRZID0ge307XG5cbmZ1bmN0aW9uIGlzUHJlYWN0RWxlbWVudChub2RlKSB7XG5cdHJldHVybiBub2RlLl9fcHJlYWN0YXR0cl8hPW51bGwgfHwgdHlwZW9mIFN5bWJvbCE9PSd1bmRlZmluZWQnICYmIG5vZGVbU3ltYm9sLmZvcigncHJlYWN0YXR0cicpXSE9bnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0VXJsKHVybCwgdHlwZSkge1xuXHRpZiAoIHR5cGUgPT09IHZvaWQgMCApIHR5cGU9J3B1c2gnO1xuXG5cdGlmIChjdXN0b21IaXN0b3J5ICYmIGN1c3RvbUhpc3RvcnlbdHlwZV0pIHtcblx0XHRjdXN0b21IaXN0b3J5W3R5cGVdKHVybCk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGhpc3RvcnkhPT0ndW5kZWZpbmVkJyAmJiBoaXN0b3J5W3R5cGUrJ1N0YXRlJ10pIHtcblx0XHRoaXN0b3J5W3R5cGUrJ1N0YXRlJ10obnVsbCwgbnVsbCwgdXJsKTtcblx0fVxufVxuXG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRVcmwoKSB7XG5cdHZhciB1cmw7XG5cdGlmIChjdXN0b21IaXN0b3J5ICYmIGN1c3RvbUhpc3RvcnkubG9jYXRpb24pIHtcblx0XHR1cmwgPSBjdXN0b21IaXN0b3J5LmxvY2F0aW9uO1xuXHR9XG5cdGVsc2UgaWYgKGN1c3RvbUhpc3RvcnkgJiYgY3VzdG9tSGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24pIHtcblx0XHR1cmwgPSBjdXN0b21IaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHVybCA9IHR5cGVvZiBsb2NhdGlvbiE9PSd1bmRlZmluZWQnID8gbG9jYXRpb24gOiBFTVBUWTtcblx0fVxuXHRyZXR1cm4gKFwiXCIgKyAodXJsLnBhdGhuYW1lIHx8ICcnKSArICh1cmwuc2VhcmNoIHx8ICcnKSk7XG59XG5cblxuXG5mdW5jdGlvbiByb3V0ZSh1cmwsIHJlcGxhY2UpIHtcblx0aWYgKCByZXBsYWNlID09PSB2b2lkIDAgKSByZXBsYWNlPWZhbHNlO1xuXG5cdGlmICh0eXBlb2YgdXJsIT09J3N0cmluZycgJiYgdXJsLnVybCkge1xuXHRcdHJlcGxhY2UgPSB1cmwucmVwbGFjZTtcblx0XHR1cmwgPSB1cmwudXJsO1xuXHR9XG5cblx0Ly8gb25seSBwdXNoIFVSTCBpbnRvIGhpc3RvcnkgaWYgd2UgY2FuIGhhbmRsZSBpdFxuXHRpZiAoY2FuUm91dGUodXJsKSkge1xuXHRcdHNldFVybCh1cmwsIHJlcGxhY2UgPyAncmVwbGFjZScgOiAncHVzaCcpO1xuXHR9XG5cblx0cmV0dXJuIHJvdXRlVG8odXJsKTtcbn1cblxuXG4vKiogQ2hlY2sgaWYgdGhlIGdpdmVuIFVSTCBjYW4gYmUgaGFuZGxlZCBieSBhbnkgcm91dGVyIGluc3RhbmNlcy4gKi9cbmZ1bmN0aW9uIGNhblJvdXRlKHVybCkge1xuXHRmb3IgKHZhciBpPVJPVVRFUlMubGVuZ3RoOyBpLS07ICkge1xuXHRcdGlmIChST1VURVJTW2ldLmNhblJvdXRlKHVybCkpIHsgcmV0dXJuIHRydWU7IH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqIFRlbGwgYWxsIHJvdXRlciBpbnN0YW5jZXMgdG8gaGFuZGxlIHRoZSBnaXZlbiBVUkwuICAqL1xuZnVuY3Rpb24gcm91dGVUbyh1cmwpIHtcblx0dmFyIGRpZFJvdXRlID0gZmFsc2U7XG5cdGZvciAodmFyIGk9MDsgaTxST1VURVJTLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKFJPVVRFUlNbaV0ucm91dGVUbyh1cmwpPT09dHJ1ZSkge1xuXHRcdFx0ZGlkUm91dGUgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRmb3IgKHZhciBpJDE9c3Vic2NyaWJlcnMubGVuZ3RoOyBpJDEtLTsgKSB7XG5cdFx0c3Vic2NyaWJlcnNbaSQxXSh1cmwpO1xuXHR9XG5cdHJldHVybiBkaWRSb3V0ZTtcbn1cblxuXG5mdW5jdGlvbiByb3V0ZUZyb21MaW5rKG5vZGUpIHtcblx0Ly8gb25seSB2YWxpZCBlbGVtZW50c1xuXHRpZiAoIW5vZGUgfHwgIW5vZGUuZ2V0QXR0cmlidXRlKSB7IHJldHVybjsgfVxuXG5cdHZhciBocmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSxcblx0XHR0YXJnZXQgPSBub2RlLmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XG5cblx0Ly8gaWdub3JlIGxpbmtzIHdpdGggdGFyZ2V0cyBhbmQgbm9uLXBhdGggVVJMc1xuXHRpZiAoIWhyZWYgfHwgIWhyZWYubWF0Y2goL15cXC8vZykgfHwgKHRhcmdldCAmJiAhdGFyZ2V0Lm1hdGNoKC9eXz9zZWxmJC9pKSkpIHsgcmV0dXJuOyB9XG5cblx0Ly8gYXR0ZW1wdCB0byByb3V0ZSwgaWYgbm8gbWF0Y2ggc2ltcGx5IGNlZGUgY29udHJvbCB0byBicm93c2VyXG5cdHJldHVybiByb3V0ZShocmVmKTtcbn1cblxuXG5mdW5jdGlvbiBoYW5kbGVMaW5rQ2xpY2soZSkge1xuXHRpZiAoZS5idXR0b249PTApIHtcblx0XHRyb3V0ZUZyb21MaW5rKGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldCB8fCB0aGlzKTtcblx0XHRyZXR1cm4gcHJldmVudChlKTtcblx0fVxufVxuXG5cbmZ1bmN0aW9uIHByZXZlbnQoZSkge1xuXHRpZiAoZSkge1xuXHRcdGlmIChlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikgeyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOyB9XG5cdFx0aWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH1cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5cbmZ1bmN0aW9uIGRlbGVnYXRlTGlua0hhbmRsZXIoZSkge1xuXHQvLyBpZ25vcmUgZXZlbnRzIHRoZSBicm93c2VyIHRha2VzIGNhcmUgb2YgYWxyZWFkeTpcblx0aWYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5zaGlmdEtleSB8fCBlLmJ1dHRvbiE9PTApIHsgcmV0dXJuOyB9XG5cblx0dmFyIHQgPSBlLnRhcmdldDtcblx0ZG8ge1xuXHRcdGlmIChTdHJpbmcodC5ub2RlTmFtZSkudG9VcHBlckNhc2UoKT09PSdBJyAmJiB0LmdldEF0dHJpYnV0ZSgnaHJlZicpICYmIGlzUHJlYWN0RWxlbWVudCh0KSkge1xuXHRcdFx0aWYgKHQuaGFzQXR0cmlidXRlKCduYXRpdmUnKSkgeyByZXR1cm47IH1cblx0XHRcdC8vIGlmIGxpbmsgaXMgaGFuZGxlZCBieSB0aGUgcm91dGVyLCBwcmV2ZW50IGJyb3dzZXIgZGVmYXVsdHNcblx0XHRcdGlmIChyb3V0ZUZyb21MaW5rKHQpKSB7XG5cdFx0XHRcdHJldHVybiBwcmV2ZW50KGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSB3aGlsZSAoKHQ9dC5wYXJlbnROb2RlKSk7XG59XG5cblxudmFyIGV2ZW50TGlzdGVuZXJzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaW5pdEV2ZW50TGlzdGVuZXJzKCkge1xuXHRpZiAoZXZlbnRMaXN0ZW5lcnNJbml0aWFsaXplZCkgeyByZXR1cm47IH1cblxuXHRpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXI9PT0nZnVuY3Rpb24nKSB7XG5cdFx0aWYgKCFjdXN0b21IaXN0b3J5KSB7XG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cm91dGVUbyhnZXRDdXJyZW50VXJsKCkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVsZWdhdGVMaW5rSGFuZGxlcik7XG5cdH1cblx0ZXZlbnRMaXN0ZW5lcnNJbml0aWFsaXplZCA9IHRydWU7XG59XG5cblxudmFyIFJvdXRlciA9IChmdW5jdGlvbiAoQ29tcG9uZW50JCQxKSB7XG5cdGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuXHRcdENvbXBvbmVudCQkMS5jYWxsKHRoaXMsIHByb3BzKTtcblx0XHRpZiAocHJvcHMuaGlzdG9yeSkge1xuXHRcdFx0Y3VzdG9tSGlzdG9yeSA9IHByb3BzLmhpc3Rvcnk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdGF0ZSA9IHtcblx0XHRcdHVybDogcHJvcHMudXJsIHx8IGdldEN1cnJlbnRVcmwoKVxuXHRcdH07XG5cblx0XHRpbml0RXZlbnRMaXN0ZW5lcnMoKTtcblx0fVxuXG5cdGlmICggQ29tcG9uZW50JCQxICkgUm91dGVyLl9fcHJvdG9fXyA9IENvbXBvbmVudCQkMTtcblx0Um91dGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENvbXBvbmVudCQkMSAmJiBDb21wb25lbnQkJDEucHJvdG90eXBlICk7XG5cdFJvdXRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSb3V0ZXI7XG5cblx0Um91dGVyLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUgKHByb3BzKSB7XG5cdFx0aWYgKHByb3BzLnN0YXRpYyE9PXRydWUpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRyZXR1cm4gcHJvcHMudXJsIT09dGhpcy5wcm9wcy51cmwgfHwgcHJvcHMub25DaGFuZ2UhPT10aGlzLnByb3BzLm9uQ2hhbmdlO1xuXHR9O1xuXG5cdC8qKiBDaGVjayBpZiB0aGUgZ2l2ZW4gVVJMIGNhbiBiZSBtYXRjaGVkIGFnYWluc3QgYW55IGNoaWxkcmVuICovXG5cdFJvdXRlci5wcm90b3R5cGUuY2FuUm91dGUgPSBmdW5jdGlvbiBjYW5Sb3V0ZSAodXJsKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCB1cmwsIGZhbHNlKS5sZW5ndGggPiAwO1xuXHR9O1xuXG5cdC8qKiBSZS1yZW5kZXIgY2hpbGRyZW4gd2l0aCBhIG5ldyBVUkwgdG8gbWF0Y2ggYWdhaW5zdC4gKi9cblx0Um91dGVyLnByb3RvdHlwZS5yb3V0ZVRvID0gZnVuY3Rpb24gcm91dGVUbyAodXJsKSB7XG5cdFx0dGhpcy5fZGlkUm91dGUgPSBmYWxzZTtcblx0XHR0aGlzLnNldFN0YXRlKHsgdXJsOiB1cmwgfSk7XG5cblx0XHQvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGFuIHVwZGF0ZSwgZG9uJ3Qgc3luY2hyb25vdXNseSByZS1yb3V0ZS5cblx0XHRpZiAodGhpcy51cGRhdGluZykgeyByZXR1cm4gdGhpcy5jYW5Sb3V0ZSh1cmwpOyB9XG5cblx0XHR0aGlzLmZvcmNlVXBkYXRlKCk7XG5cdFx0cmV0dXJuIHRoaXMuX2RpZFJvdXRlO1xuXHR9O1xuXG5cdFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50ICgpIHtcblx0XHRST1VURVJTLnB1c2godGhpcyk7XG5cdFx0dGhpcy51cGRhdGluZyA9IHRydWU7XG5cdH07XG5cblx0Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50ICgpIHtcblx0XHR2YXIgdGhpcyQxID0gdGhpcztcblxuXHRcdGlmIChjdXN0b21IaXN0b3J5KSB7XG5cdFx0XHR0aGlzLnVubGlzdGVuID0gY3VzdG9tSGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG5cdFx0XHRcdHRoaXMkMS5yb3V0ZVRvKChcIlwiICsgKGxvY2F0aW9uLnBhdGhuYW1lIHx8ICcnKSArIChsb2NhdGlvbi5zZWFyY2ggfHwgJycpKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0dGhpcy51cGRhdGluZyA9IGZhbHNlO1xuXHR9O1xuXG5cdFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLnVubGlzdGVuPT09J2Z1bmN0aW9uJykgeyB0aGlzLnVubGlzdGVuKCk7IH1cblx0XHRST1VURVJTLnNwbGljZShST1VURVJTLmluZGV4T2YodGhpcyksIDEpO1xuXHR9O1xuXG5cdFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUgKCkge1xuXHRcdHRoaXMudXBkYXRpbmcgPSB0cnVlO1xuXHR9O1xuXG5cdFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlICgpIHtcblx0XHR0aGlzLnVwZGF0aW5nID0gZmFsc2U7XG5cdH07XG5cblx0Um91dGVyLnByb3RvdHlwZS5nZXRNYXRjaGluZ0NoaWxkcmVuID0gZnVuY3Rpb24gZ2V0TWF0Y2hpbmdDaGlsZHJlbiAoY2hpbGRyZW4sIHVybCwgaW52b2tlKSB7XG5cdFx0cmV0dXJuIGNoaWxkcmVuXG5cdFx0XHQuZmlsdGVyKHByZXBhcmVWTm9kZUZvclJhbmtpbmcpXG5cdFx0XHQuc29ydChwYXRoUmFua1NvcnQpXG5cdFx0XHQubWFwKCBmdW5jdGlvbiAodm5vZGUpIHtcblx0XHRcdFx0dmFyIG1hdGNoZXMgPSBleGVjKHVybCwgdm5vZGUuYXR0cmlidXRlcy5wYXRoLCB2bm9kZS5hdHRyaWJ1dGVzKTtcblx0XHRcdFx0aWYgKG1hdGNoZXMpIHtcblx0XHRcdFx0XHRpZiAoaW52b2tlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0dmFyIG5ld1Byb3BzID0geyB1cmw6IHVybCwgbWF0Y2hlczogbWF0Y2hlcyB9O1xuXHRcdFx0XHRcdFx0YXNzaWduKG5ld1Byb3BzLCBtYXRjaGVzKTtcblx0XHRcdFx0XHRcdGRlbGV0ZSBuZXdQcm9wcy5yZWY7XG5cdFx0XHRcdFx0XHRkZWxldGUgbmV3UHJvcHMua2V5O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNsb25lRWxlbWVudCh2bm9kZSwgbmV3UHJvcHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdm5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdH0pLmZpbHRlcihCb29sZWFuKTtcblx0fTtcblxuXHRSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocmVmLCByZWYkMSkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblx0XHR2YXIgb25DaGFuZ2UgPSByZWYub25DaGFuZ2U7XG5cdFx0dmFyIHVybCA9IHJlZiQxLnVybDtcblxuXHRcdHZhciBhY3RpdmUgPSB0aGlzLmdldE1hdGNoaW5nQ2hpbGRyZW4oY2hpbGRyZW4sIHVybCwgdHJ1ZSk7XG5cblx0XHR2YXIgY3VycmVudCA9IGFjdGl2ZVswXSB8fCBudWxsO1xuXHRcdHRoaXMuX2RpZFJvdXRlID0gISFjdXJyZW50O1xuXG5cdFx0dmFyIHByZXZpb3VzID0gdGhpcy5wcmV2aW91c1VybDtcblx0XHRpZiAodXJsIT09cHJldmlvdXMpIHtcblx0XHRcdHRoaXMucHJldmlvdXNVcmwgPSB1cmw7XG5cdFx0XHRpZiAodHlwZW9mIG9uQ2hhbmdlPT09J2Z1bmN0aW9uJykge1xuXHRcdFx0XHRvbkNoYW5nZSh7XG5cdFx0XHRcdFx0cm91dGVyOiB0aGlzLFxuXHRcdFx0XHRcdHVybDogdXJsLFxuXHRcdFx0XHRcdHByZXZpb3VzOiBwcmV2aW91cyxcblx0XHRcdFx0XHRhY3RpdmU6IGFjdGl2ZSxcblx0XHRcdFx0XHRjdXJyZW50OiBjdXJyZW50XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjdXJyZW50O1xuXHR9O1xuXG5cdHJldHVybiBSb3V0ZXI7XG59KENvbXBvbmVudCkpO1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gKFxuXHRoKCdhJywgYXNzaWduKHsgb25DbGljazogaGFuZGxlTGlua0NsaWNrIH0sIHByb3BzKSlcbik7IH07XG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gaChwcm9wcy5jb21wb25lbnQsIHByb3BzKTsgfTtcblxuUm91dGVyLnN1YnNjcmliZXJzID0gc3Vic2NyaWJlcnM7XG5Sb3V0ZXIuZ2V0Q3VycmVudFVybCA9IGdldEN1cnJlbnRVcmw7XG5Sb3V0ZXIucm91dGUgPSByb3V0ZTtcblJvdXRlci5Sb3V0ZXIgPSBSb3V0ZXI7XG5Sb3V0ZXIuUm91dGUgPSBSb3V0ZTtcblJvdXRlci5MaW5rID0gTGluaztcblxuZXhwb3J0IHsgc3Vic2NyaWJlcnMsIGdldEN1cnJlbnRVcmwsIHJvdXRlLCBSb3V0ZXIsIFJvdXRlLCBMaW5rIH07ZXhwb3J0IGRlZmF1bHQgUm91dGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0LXJvdXRlci5lcy5qcy5tYXBcbiIsIi8qKlxuICogQHBhcmFtIHsgUHJvbWlzZSB9IHByb21pc2VcbiAqIEBwYXJhbSB7IE9iamVjdD0gfSBlcnJvckV4dCAtIEFkZGl0aW9uYWwgSW5mb3JtYXRpb24geW91IGNhbiBwYXNzIHRvIHRoZSBlcnIgb2JqZWN0XG4gKiBAcmV0dXJuIHsgUHJvbWlzZSB9XG4gKi9cbmZ1bmN0aW9uIHRvKHByb21pc2UsIGVycm9yRXh0KSB7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIFtudWxsLCBkYXRhXTsgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycm9yRXh0KSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVyciwgZXJyb3JFeHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZXJyLCB1bmRlZmluZWRdO1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyB0byB9O1xuZXhwb3J0IGRlZmF1bHQgdG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd2FpdC10by1qcy5lczUuanMubWFwXG4iLCJpbXBvcnQgdG8gZnJvbSAnYXdhaXQtdG8tanMnXG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc3QgW2VyciwgcmVzXSA9IGF3YWl0IHRvKEF4aW9zLmdldCgnL2FwaS9hdXRoJykpXG4gIGNvbnNvbGUubG9nKHJlcylcbiAgaWYgKGVycikgcmV0dXJuIG51bGxcbiAgcmV0dXJuIHJlcy5kYXRhLnVzZXJJRCBhcyBzdHJpbmdcbn1cbiIsImltcG9ydCB0byBmcm9tICdhd2FpdC10by1qcydcbmltcG9ydCBBeGlvcyBmcm9tICdheGlvcydcbmltcG9ydCByYW5nZSBmcm9tICdsb2Rhc2gvcmFuZ2UnXG5pbXBvcnQgc2h1ZmZsZSBmcm9tICdsb2Rhc2gvc2h1ZmZsZSdcblxuY29uc3Qgc2V0dXBOZXdGdWxsR2FtZSA9IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ0NyZWF0aW5nIGEgbmV3IGdhbWUuLi4nKVxuICBjb25zdCBbZXJyLCByZXNdID0gYXdhaXQgdG8oQXhpb3MucG9zdCgnL2FwaS9nYW1lJykpXG4gIGlmIChlcnIpIHJldHVybiBlcnJcblxuICBjb25zdCBnYW1lID0gcmVzLmRhdGFcbiAgY29uc3QgbnVtYmVycyA9IHNodWZmbGUocmFuZ2UoMSwgMjUpKS5tYXAoKHgpID0+IHgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpKVxuICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgQXhpb3MucG9zdCgnL2FwaS9nYW1lL2pvaW4nLCB7Z2FtZUlEOiBnYW1lLmlkLCBwbGF5ZXJJRDogJzVjZDg1NzgzYzI2NTEzZTEyZjY5NWNlMicsIGNvbG91cjogJ2UnICsgbnVtYmVycy5wb3AoKX0pLFxuICAgIEF4aW9zLnBvc3QoJy9hcGkvZ2FtZS9qb2luJywge2dhbWVJRDogZ2FtZS5pZCwgcGxheWVySUQ6ICc1Y2Q4OTg4YzQ2MzExNWZmZGJjNjcyYjMnLCBjb2xvdXI6ICdlJyArIG51bWJlcnMucG9wKCl9KSxcbiAgICBBeGlvcy5wb3N0KCcvYXBpL2dhbWUvam9pbicsIHtnYW1lSUQ6IGdhbWUuaWQsIHBsYXllcklEOiAnNWNlMjhjNWI2M2NhMzdjNDg4OTgzZjkyJywgY29sb3VyOiAnZScgKyBudW1iZXJzLnBvcCgpfSksXG4gICAgQXhpb3MucG9zdCgnL2FwaS9nYW1lL2pvaW4nLCB7Z2FtZUlEOiBnYW1lLmlkLCBwbGF5ZXJJRDogJzVjZTI4Yzc1NjNjYTM3YzQ4ODk4M2Y5MycsIGNvbG91cjogJ2UnICsgbnVtYmVycy5wb3AoKX0pLFxuICAgIEF4aW9zLnBvc3QoJy9hcGkvZ2FtZS9qb2luJywge2dhbWVJRDogZ2FtZS5pZCwgcGxheWVySUQ6ICc1Y2UyOGM5NjYzY2EzN2M0ODg5ODNmOTQnLCBjb2xvdXI6ICdlJyArIG51bWJlcnMucG9wKCl9KSxcbiAgICBBeGlvcy5wb3N0KCcvYXBpL2dhbWUvam9pbicsIHtnYW1lSUQ6IGdhbWUuaWQsIHBsYXllcklEOiAnNWNlMjhjYmQ2M2NhMzdjNDg4OTgzZjk1JywgY29sb3VyOiAnZScgKyBudW1iZXJzLnBvcCgpfSksXG4gICAgQXhpb3MucG9zdCgnL2FwaS9nYW1lL2pvaW4nLCB7Z2FtZUlEOiBnYW1lLmlkLCBwbGF5ZXJJRDogJzVjZTI4Y2QyNjNjYTM3YzQ4ODk4M2Y5NicsIGNvbG91cjogJ2UnICsgbnVtYmVycy5wb3AoKX0pLFxuICBdKVxuICBhd2FpdCBBeGlvcy5wb3N0KGAvYXBpL2dhbWUvJHtnYW1lLmlkfS9zdGFydGApXG4gIHJldHVybiBhd2FpdCBBeGlvcy5nZXQoYC9hcGkvZ2FtZS8ke2dhbWUuaWR9YClcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0dXBOZXdGdWxsR2FtZVxuIiwiaW1wb3J0IHsgSU1vdmUgfSBmcm9tICdAc2hhcmVkL3R5cGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmRlciB7XG4gIHN0YXRpYyBmcm9tKG1vdmU6IElNb3ZlKSB7XG4gICAgcmV0dXJuIG5ldyBPcmRlcignJywgbW92ZS5mcm9tLCBtb3ZlLnRvLCBtb3ZlLm1vdmVUeXBlLCBtb3ZlLnN1cHBvcnRGcm9tKVxuICB9XG5cbiAgdW5pdDogJ0FybXknIHwgJ0ZsZWV0J1xuICBtb3ZlVHlwZTogc3RyaW5nXG4gIGZyb206IHN0cmluZ1xuICB0bzogc3RyaW5nXG4gIHN1cHBvcnRGcm9tOiBzdHJpbmdcbiAgd2FzU3VjY2Vzc2Z1bDogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKHVuaXQ6IHN0cmluZywgb3JpZ2luOiBzdHJpbmcsIGRlc3RpbmF0aW9uOiBzdHJpbmcsIG1vdmVUeXBlOiBzdHJpbmcsIHN1cHBvcnRGcm9tPzogc3RyaW5nKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7dW5pdCwgZnJvbTogb3JpZ2luLCB0bzogZGVzdGluYXRpb24sIG1vdmVUeXBlLCBzdXBwb3J0RnJvbSB9KVxuICB9XG5cbiAgdG9PYmplY3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVuaXQ6IHRoaXMudW5pdCxcbiAgICAgIG1vdmVUeXBlOiB0aGlzLm1vdmVUeXBlLFxuICAgICAgZnJvbTogdGhpcy5mcm9tLFxuICAgICAgdG86IHRoaXMudG8sXG4gICAgICBzdXBwb3J0RnJvbTogdGhpcy5zdXBwb3J0RnJvbSxcbiAgICAgIHdhc1N1Y2Nlc3NmdWw6IHRoaXMud2FzU3VjY2Vzc2Z1bCxcbiAgICB9XG4gIH1cbn1cbiIsImNvbnN0IGxvY2F0aW9uczoge1trZXk6IHN0cmluZ106IHt4OiBudW1iZXIsIHk6IG51bWJlcn19ID0ge1xuICBTd2l0emVybGFuZDogeyB4OiAyMTksIHk6IDM3NiB9LFxuICBBZHJpYXRpY19TZWE6IHsgeDogMjk2LCB5OiA0NDEgfSxcbiAgQWVnZWFuX1NlYTogeyB4OiA0MDMsIHk6IDUyNCB9LFxuICBBbGJhbmlhOiB7IHg6IDMzOSwgeTogNDY5IH0sXG4gIEFua2FyYTogeyB4OiA1MDAsIHk6IDQ2MCB9LCBzY0Fua2FyYTogeyB4OiA0ODIsIHk6IDQ2OSB9LFxuICBBcHVsaWE6IHsgeDogMzAyLCB5OiA0NzIgfSxcbiAgQXJtZW5pYTogeyB4OiA1NzYsIHk6IDQ1NiB9LFxuICBCYWx0aWNfU2VhOiB7IHg6IDMyMywgeTogMjUwIH0sXG4gIEJhcmVudHNfU2VhOiB7IHg6IDQ0NSwgeTogNDEgfSxcbiAgQmVsZ2l1bTogeyB4OiAxOTcsIHk6IDMxNyB9LCBzY0JlbGdpdW06IHsgeDogMTg2LCB5OiAzMDUgfSxcbiAgQmVybGluOiB7IHg6IDI3OSwgeTogMjgzIH0sIHNjQmVybGluOiB7IHg6IDI4MSwgeTogMjk4IH0sXG4gIEJsYWNrX1NlYTogeyB4OiA0ODQsIHk6IDQyMCB9LFxuICBCb2hlbWlhOiB7IHg6IDI4OSwgeTogMzM2IH0sXG4gIEJyZXN0OiB7IHg6IDEyNSwgeTogMzM0IH0sIHNjQnJlc3Q6IHsgeDogMTA2LCB5OiAzMjIgfSxcbiAgQnVkYXBlc3Q6IHsgeDogMzUzLCB5OiAzNzggfSwgc2NCdWRhcGVzdDogeyB4OiAzMjYsIHk6IDM3NiB9LFxuICBCdWxnYXJpYTogeyB4OiAzOTUsIHk6IDQ0MyB9LCBzY0J1bGdhcmlhOiB7IHg6IDM3NywgeTogNDQ0IH0sXG4gIEJ1bGdhcmlhX19lYzogeyB4OiA0MTAsIHk6IDQ0MCB9LFxuICBCdWxnYXJpYV9fc2M6IHsgeDogMzk5LCB5OiA0NjIgfSxcbiAgQnVyZ3VuZHk6IHsgeDogMTkxLCB5OiAzNjAgfSxcbiAgQ2x5ZGU6IHsgeDogMTM5LCB5OiAxODggfSxcbiAgQ29uc3RhbnRpbm9wbGU6IHsgeDogNDM5LCB5OiA0NzMgfSwgc2NDb25zdGFudGlub3BsZTogeyB4OiA0MjksIHk6IDQ2MCB9LFxuICBEZW5tYXJrOiB7IHg6IDI1NiwgeTogMjQ1IH0sIHNjRGVubWFyazogeyB4OiAyNzIsIHk6IDI1MiB9LFxuICBFYXN0ZXJuX01lZGl0ZXJyYW5lYW46IHsgeDogNDc0LCB5OiA1NDYgfSxcbiAgRWRpbmJ1cmdoOiB7IHg6IDE1NywgeTogMjEwIH0sIHNjRWRpbmJ1cmdoOiB7IHg6IDE1NCwgeTogMjE5IH0sXG4gIEVuZ2xpc2hfQ2hhbm5lbDogeyB4OiAxMTksIHk6IDMwNyB9LFxuICBGaW5sYW5kOiB7IHg6IDM4NSwgeTogMTQzIH0sXG4gIEdhbGljaWE6IHsgeDogMzc3LCB5OiAzNDMgfSxcbiAgR2FzY29ueTogeyB4OiAxMzcsIHk6IDM4OCB9LFxuICBHcmVlY2U6IHsgeDogMzY2LCB5OiA1MTUgfSwgc2NHcmVlY2U6IHsgeDogMzc4LCB5OiA1MDcgfSxcbiAgR3VsZl9vZl9MeW9uOiB7IHg6IDE4MCwgeTogNDQ0IH0sXG4gIEd1bGZfb2ZfQm90aG5pYTogeyB4OiAzNDgsIHk6IDE5OSB9LFxuICBIZWxnb2xhbmRfQmlnaHQ6IHsgeDogMjI2LCB5OiAyNTIgfSxcbiAgSG9sbGFuZDogeyB4OiAyMDUsIHk6IDI5NyB9LCBzY0hvbGxhbmQ6IHsgeDogMjA1LCB5OiAyODQgfSxcbiAgSW9uaWFuX1NlYTogeyB4OiAzMjQsIHk6IDU0MCB9LFxuICBJcmlzaF9TZWE6IHsgeDogOTAsIHk6IDI3NiB9LFxuICBLaWVsOiB7IHg6IDI0MywgeTogMjk1IH0sIHNjS2llbDogeyB4OiAyNTQsIHk6IDI3OCB9LFxuICBMaXZlcnBvb2w6IHsgeDogMTQyLCB5OiAyNDEgfSwgc2NMaXZlcnBvb2w6IHsgeDogMTQ0LCB5OiAyNTcgfSxcbiAgTGl2b25pYTogeyB4OiAzODIsIHk6IDI0NSB9LFxuICBMb25kb246IHsgeDogMTYyLCB5OiAyODEgfSwgc2NMb25kb246IHsgeDogMTYyLCB5OiAyOTAgfSxcbiAgTWFyc2VpbGxlczogeyB4OiAxODgsIHk6IDM5OCB9LCBzY01hcnNlaWxsZXM6IHsgeDogMTg2LCB5OiA0MTcgfSxcbiAgTWlkX0F0bGFudGljX09jZWFuOiB7IHg6IDIzLCB5OiAzNTUgfSxcbiAgTW9zY293OiB7IHg6IDUwNSwgeTogMjI2IH0sIHNjTW9zY293OiB7IHg6IDQ4MSwgeTogMjM0IH0sXG4gIE11bmljaDogeyB4OiAyNDMsIHk6IDM0NyB9LCBzY011bmljaDogeyB4OiAyNTgsIHk6IDM1OSB9LFxuICBOYXBsZXM6IHsgeDogMjk5LCB5OiA1MDUgfSwgc2NOYXBsZXM6IHsgeDogMjc4LCB5OiA0NjkgfSxcbiAgTm9ydGhfQXRsYW50aWNfT2NlYW46IHsgeDogNjUsIHk6IDE0MCB9LFxuICBOb3J0aF9BZnJpY2E6IHsgeDogMTAwLCB5OiA1MzYgfSxcbiAgTm9ydGhfU2VhOiB7IHg6IDIwNCwgeTogMjE1IH0sXG4gIE5vcndheTogeyB4OiAyNjQsIHk6IDE2MCB9LCBzY05vcndheTogeyB4OiAyNzAsIHk6IDE4NyB9LFxuICBOb3J3ZWdpYW5fU2VhOiB7IHg6IDIyMCwgeTogOTAgfSxcbiAgUGFyaXM6IHsgeDogMTYyLCB5OiAzNDYgfSwgc2NQYXJpczogeyB4OiAxNzMsIHk6IDMzNCB9LFxuICBQaWNhcmR5OiB7IHg6IDE2OCwgeTogMzE5IH0sXG4gIFBpZWRtb250OiB7IHg6IDIyMCwgeTogMzk1IH0sXG4gIFBvcnR1Z2FsOiB7IHg6IDM0LCB5OiA0MTcgfSwgc2NQb3J0dWdhbDogeyB4OiAxNSwgeTogNDM0IH0sXG4gIFBydXNzaWE6IHsgeDogMzE1LCB5OiAyODMgfSxcbiAgUm9tZTogeyB4OiAyNjQsIHk6IDQ1MiB9LCBzY1JvbWU6IHsgeDogMjUyLCB5OiA0NDMgfSxcbiAgUnVocjogeyB4OiAyMjMsIHk6IDMyMCB9LFxuICBSdW1hbmlhOiB7IHg6IDQxNSwgeTogNDA1IH0sIHNjUnVtYW5pYTogeyB4OiA0MDIsIHk6IDQxMyB9LFxuICBTZXJiaWE6IHsgeDogMzUxLCB5OiA0MzggfSwgc2NTZXJiaWE6IHsgeDogMzQzLCB5OiA0MTkgfSxcbiAgU2V2YXN0b3BvbDogeyB4OiA1MTUsIHk6IDMzMCB9LCBzY1NldmFzdG9wb2w6IHsgeDogNDgzLCB5OiAzOTYgfSxcbiAgU2lsZXNpYTogeyB4OiAzMDQsIHk6IDMxNCB9LFxuICBTa2FnZXJyYWs6IHsgeDogMjYwLCB5OiAyMTIgfSxcbiAgU215cm5hOiB7IHg6IDQ5MCwgeTogNTA1IH0sIHNjU215cm5hOiB7IHg6IDQyNCwgeTogNTAyIH0sXG4gIFNwYWluOiB7IHg6IDY0LCB5OiA0MzkgfSwgc2NTcGFpbjogeyB4OiA4MCwgeTogNDMyIH0sXG4gIFNwYWluX19uYzogeyB4OiA4MCwgeTogNDA0IH0sXG4gIFNwYWluX19zYzogeyB4OiA1MiwgeTogNDc1IH0sXG4gIFN0X1BldGVyc2J1cmc6IHsgeDogNTAwLCB5OiAxNDAgfSwgc2NTdF9QZXRlcnNidXJnOiB7IHg6IDQxOCwgeTogMTg3IH0sXG4gIFN0X1BldGVyc2J1cmdfX25jOiB7IHg6IDQ3MiwgeTogMTIyIH0sXG4gIFN0X1BldGVyc2J1cmdfX3NjOiB7IHg6IDQxOCwgeTogMjA1IH0sXG4gIFN3ZWRlbjogeyB4OiAzMTUsIHk6IDE0MCB9LCBzY1N3ZWRlbjogeyB4OiAzMjMsIHk6IDE5NiB9LFxuICBTeXJpYTogeyB4OiA1NzAsIHk6IDUyMCB9LFxuICBUcmllc3RlOiB7IHg6IDMwNSwgeTogNDEyIH0sIHNjVHJpZXN0ZTogeyB4OiAyODQsIHk6IDM5NiB9LFxuICBUdW5pczogeyB4OiAyMTIsIHk6IDU0MiB9LCBzY1R1bmlzOiB7IHg6IDIyMCwgeTogNTI5IH0sXG4gIFR1c2Nhbnk6IHsgeDogMjQ3LCB5OiA0MzAgfSxcbiAgVHlyb2xpYTogeyB4OiAyNzcsIHk6IDM3OCB9LFxuICBUeXJyaGVuaWFuX1NlYTogeyB4OiAyNDYsIHk6IDQ4MyB9LFxuICBVa3JhaW5lOiB7IHg6IDQyNywgeTogMzI3IH0sXG4gIFZlbmljZTogeyB4OiAyNTAsIHk6IDQwOCB9LCBzY1ZlbmljZTogeyB4OiAyNjEsIHk6IDM5NyB9LFxuICBWaWVubmE6IHsgeDogMzE0LCB5OiAzNjAgfSwgc2NWaWVubmE6IHsgeDogMzAxLCB5OiAzNjMgfSxcbiAgV2FsZXM6IHsgeDogMTI1LCB5OiAyODUgfSxcbiAgV2Fyc2F3OiB7IHg6IDM2MSwgeTogMzE1IH0sIHNjV2Fyc2F3OiB7IHg6IDM0NiwgeTogMzAyIH0sXG4gIFdlc3Rlcm5fTWVkaXRlcnJhbmVhbjogeyB4OiAxNDAsIHk6IDQ5MiB9LFxuICBZb3Jrc2hpcmU6IHsgeDogMTYxLCB5OiAyNTQgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9jYXRpb25zXG4iLCJpbXBvcnQgeyBJR2FtZVR1cm5KU09OIH0gZnJvbSAnQHNoYXJlZC90eXBlcydcbmltcG9ydCBPcmRlciBmcm9tICcuLi9vcmRlcidcbmltcG9ydCBlbnRpdHlMb2NhdGlvbnMgZnJvbSAnLi4vcmVzb3VyY2VzL2VudGl0eUxvY2F0aW9ucydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9hcmRQYWludGVyIHtcbiAgYm9hcmQ6IEhUTUxFbGVtZW50XG4gIHR1cm46IElHYW1lVHVybkpTT05cbiAgYXJteTogSFRNTEVsZW1lbnRcbiAgZmxlZXQ6IEhUTUxFbGVtZW50XG5cbiAgY29uc3RydWN0b3IoYm9hcmQ6IEhUTUxFbGVtZW50LCB0dXJuOiBJR2FtZVR1cm5KU09OLCBhcm15U3ZnOiBIVE1MRWxlbWVudCwgZmxlZXRTdmc6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5ib2FyZCA9IGJvYXJkXG4gICAgdGhpcy50dXJuID0gdHVyblxuICAgIHRoaXMuYXJteSA9IGFybXlTdmdcbiAgICB0aGlzLmZsZWV0ID0gZmxlZXRTdmdcbiAgICB0aGlzLmRyYXcoKVxuICB9XG5cbiAgZHJhdyA9ICh0dXJuPzogSUdhbWVUdXJuSlNPTikgPT4ge1xuICAgIGlmICh0dXJuKSB0aGlzLnR1cm4gPSB0dXJuXG4gICAgdGhpcy50dXJuLnBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgICB0aGlzLmNvbG91clRlcnJpdG9yaWVzKHBsYXllci5vd25lZFRlcnJpdG9yaWVzLCBwbGF5ZXIuZW1waXJlLCBwbGF5ZXIuY29sb3VyKVxuICAgICAgdGhpcy5kcmF3TW92ZXMocGxheWVyLm1vdmVzLm1hcChPcmRlci5mcm9tKSlcbiAgICAgIHRoaXMuZHJhd1VuaXRzKHBsYXllci5vd25lZFVuaXRzLCBwbGF5ZXIuZW1waXJlLCBwbGF5ZXIuY29sb3VyKVxuICAgIH0pXG4gIH1cblxuICByZXNldCA9ICgpID0+IHtcbiAgICB0aGlzLnR1cm4ucGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHRoaXMuY29sb3VyVGVycml0b3JpZXMocGxheWVyLm93bmVkVGVycml0b3JpZXMsICd1bm93bmVkJykpXG4gICAgdGhpcy5yZW1vdmVPcmRlcnMoKVxuICAgIHRoaXMucmVtb3ZlVW5pdHMoKVxuICB9XG5cbiAgcmVkcmF3ID0gKCkgPT4ge1xuICAgIHRoaXMucmVzZXQoKVxuICAgIHRoaXMuZHJhdygpXG4gIH1cblxuICByZWRyYXdPcmRlcnMgPSAob3JkZXJzOiBPcmRlcltdKSA9PiB7XG4gICAgdGhpcy5yZW1vdmVPcmRlcnMoKVxuICAgIHRoaXMuZHJhd01vdmVzKG9yZGVycylcbiAgfVxuXG4gIHByaXZhdGUgY29sb3VyVGVycml0b3JpZXMgPSAodGVycml0b3JpZXM6IHN0cmluZ1tdLCBlbXBpcmU6IHN0cmluZywgY29sb3VyPzogc3RyaW5nKSA9PiB7XG4gICAgdGVycml0b3JpZXMuZm9yRWFjaCgodGVycml0b3J5KSA9PiB0aGlzLnNldE93bmVyc2hpcCh0ZXJyaXRvcnksIGVtcGlyZSwgY29sb3VyKSlcbiAgfVxuXG4gIHByaXZhdGUgZHJhd1VuaXRzKHVuaXRzOiB7dW5pdFR5cGU6IHN0cmluZywgbG9jYXRpb246IHN0cmluZywgc3RhdHVzOiBzdHJpbmd9W10sIGVtcGlyZTogc3RyaW5nLCBjb2xvdXI6IHN0cmluZykge1xuICAgIHVuaXRzLmZvckVhY2goKHVuaXQpID0+IHRoaXMuZHJhd1VuaXQodW5pdCwgZW1waXJlLCBjb2xvdXIpKVxuICB9XG5cbiAgcHJpdmF0ZSBkcmF3TW92ZXMgPSAob3JkZXJzOiBPcmRlcltdKSA9PiB7XG4gICAgb3JkZXJzLmZvckVhY2goKG9yZGVyKSA9PiB0aGlzLmRyYXdPcmRlcihvcmRlcikpXG4gIH1cblxuICBwcml2YXRlIHNldE93bmVyc2hpcCA9ICh0ZXJyaXRvcnk6IHN0cmluZywgb3duZXI6IHN0cmluZywgY29sb3VyOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB0ZXJyaXRvcnlFbGVtZW50cyA9IEFycmF5LmZyb20odGhpcy5ib2FyZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHRlcnJpdG9yeSkpXG4gICAgdGVycml0b3J5RWxlbWVudHMuZm9yRWFjaCgodGVycikgPT4ge1xuICAgICAgdGVyci5jbGFzc0xpc3QucmVtb3ZlKCdFbmdsYW5kJywgJ0ZyYW5jZScsICdHZXJtYW55JywgJ0F1c3RyaWEnLCAnUnVzc2lhJywgJ0l0YWx5JywgJ1R1cmtleScpXG4gICAgICAvLyB0ZXJyLmNsYXNzTGlzdC5hZGQob3duZXIpXG4gICAgICB0ZXJyLmNsYXNzTGlzdC5hZGQoYCR7Y29sb3VyfS1saWdodGApXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZHJhd1VuaXQgPSAodW5pdDoge3VuaXRUeXBlOiBzdHJpbmcsIGxvY2F0aW9uOiBzdHJpbmcsIHN0YXR1czogc3RyaW5nfSwgZW1waXJlOiBzdHJpbmcsIGNvbG91cjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc3ZnID0gdW5pdC51bml0VHlwZSA9PT0gJ0FybXknID8gdGhpcy5hcm15IDogdGhpcy5mbGVldFxuICAgIGNvbnN0IHN2Z1VuaXQgPSBzdmcuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50XG5cbiAgICBjb25zdCBsb2NhdGlvbiA9IGVudGl0eUxvY2F0aW9uc1t1bml0LmxvY2F0aW9uXVxuICAgIHN2Z1VuaXQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGB1bml0ICR7dW5pdC51bml0VHlwZX0gJHt1bml0LmxvY2F0aW9ufSAke2VtcGlyZX1gKVxuICAgIHN2Z1VuaXQuc2V0QXR0cmlidXRlKCd4JywgKGxvY2F0aW9uLnggLSAxMykudG9TdHJpbmcoKSlcbiAgICBzdmdVbml0LnNldEF0dHJpYnV0ZSgneScsIChsb2NhdGlvbi55IC0gMTgpLnRvU3RyaW5nKCkpXG5cbiAgICBjb25zdCBicmlnaHRuZXNzZXMgPSBbJ2xpZ2h0JywgJ21lZGl1bScsICdzaGFkb3cnXVxuICAgIGJyaWdodG5lc3Nlcy5mb3JFYWNoKChicmlnaHRuZXNzKSA9PiB7XG4gICAgICBBcnJheS5mcm9tKHN2Z1VuaXQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShicmlnaHRuZXNzKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGAke2NvbG91cn0tJHticmlnaHRuZXNzfWApXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLmJvYXJkLmFwcGVuZENoaWxkKHN2Z1VuaXQpXG4gIH1cblxuICBwcml2YXRlIGRyYXdPcmRlciA9IChvcmRlcjogT3JkZXIpID0+IHtcbiAgICB0aGlzLmRyYXdMaW5lKGVudGl0eUxvY2F0aW9uc1tvcmRlci5mcm9tXSwgZW50aXR5TG9jYXRpb25zW29yZGVyLnRvXSlcbiAgfVxuXG4gIHByaXZhdGUgZHJhd0xpbmUgPSAoc3RhcnQ6IHt4OiBudW1iZXIsIHk6IG51bWJlcn0sIGVuZDoge3g6IG51bWJlciwgeTogbnVtYmVyfSkgPT4ge1xuICAgIGNvbnN0IGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKVxuICAgIGxpbmUuc2V0QXR0cmlidXRlKCdkJywgYE0gJHtzdGFydC54fSAke3N0YXJ0Lnl9IEwgJHtlbmQueH0gJHtlbmQueX1gKSAvLyBTZXQgcGF0aCdzIGRhdGFcbiAgICAvLyBsaW5lLnN0eWxlLnN0cm9rZSA9IGNvbG9yIHx8ICcjMDAwJyAvLyBTZXQgc3Ryb2tlIGNvbG91clxuICAgIGxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnZ3JlZW4nKVxuICAgIGxpbmUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdvcmRlcicpXG4gICAgbGluZS5zdHlsZS5zdHJva2VXaWR0aCA9ICcycHgnXG4gICAgbGluZS5zdHlsZS5tYXJrZXJFbmQgPSAndXJsKCN0cmlhbmdsZSknXG4gICAgdGhpcy5ib2FyZC5hcHBlbmRDaGlsZChsaW5lKVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVPcmRlcnMgPSAoKSA9PiB7XG4gICAgY29uc3Qgb3JkZXJBcnJheSA9IEFycmF5LmZyb20odGhpcy5ib2FyZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcmRlcicpKVxuICAgIG9yZGVyQXJyYXkuZm9yRWFjaCgob3JkZXIpID0+IG9yZGVyLnJlbW92ZSgpKVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVVbml0cyA9ICgpID0+IHtcbiAgICBjb25zdCB1bml0QXJyYXkgPSBBcnJheS5mcm9tKHRoaXMuYm9hcmQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndW5pdCcpKVxuICAgIHVuaXRBcnJheS5mb3JFYWNoKCh1bml0KSA9PiB1bml0LnJlbW92ZSgpKVxuICB9XG59XG4iLCJjb25zdCBhZGphY2VudEJ5TGFuZFRpbGVzRGF0YToge1trZXk6IHN0cmluZ106IHN0cmluZ1tdfSA9IHtcbiAgQWRyaWF0aWNfU2VhOiBbJ0lvbmlhbl9TZWEnLCAnQWxiYW5pYScsICdBcHVsaWEnLCAnVHJpZXN0ZScsICdWZW5pY2UnXSxcbiAgQWVnZWFuX1NlYTogWydFYXN0ZXJuX01lZGl0ZXJyYW5lYW4nLCAnSW9uaWFuX1NlYScsICdCdWxnYXJpYV9fc2MnLCAnQ29uc3RhbnRpbm9wbGUnLCAnR3JlZWNlJywgJ1NteXJuYSddLFxuICBCYWx0aWNfU2VhOiBbJ0d1bGZfb2ZfQm90aG5pYScsICdTa2FnZXJyYWsnLCAnQmVybGluJywgJ0Rlbm1hcmsnLCAnS2llbCcsICdMaXZvbmlhJywgJ1BydXNzaWEnLCAnU3dlZGVuJ10sXG4gIEJhcmVudHNfU2VhOiBbJ05vcndlZ2lhbl9TZWEnLCAnTm9yd2F5JywgJ1N0X1BldGVyc2J1cmdfX25jJ10sXG4gIEJsYWNrX1NlYTogWydBbmthcmEnLCAnQXJtZW5pYScsICdDb25zdGFudGlub3BsZScsICdSdW1hbmlhJywgJ1NldmFzdG9wb2wnXSxcbiAgRWFzdGVybl9NZWRpdGVycmFuZWFuOiBbJ0FlZ2Vhbl9TZWEnLCAnSW9uaWFuX1NlYScsICdTbXlybmEnLCAnU3lyaWEnXSxcbiAgRW5nbGlzaF9DaGFubmVsOiBbJ0lyaXNoX1NlYScsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnTm9ydGhfU2VhJywgJ0JlbGdpdW0nLCAnQnJlc3QnLCAnTG9uZG9uJywgJ1BpY2FyZHknLCAnV2FsZXMnXSxcbiAgR3VsZl9vZl9MeW9uOiBbJ1R5cnJoZW5pYW5fU2VhJywgJ1dlc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdNYXJzZWlsbGVzJywgJ1BpZWRtb250JywgJ1NwYWluX19zYycsICdUdXNjYW55J10sXG4gIEd1bGZfb2ZfQm90aG5pYTogWydCYWx0aWNfU2VhJywgJ0ZpbmxhbmQnLCAnTGl2b25pYScsICdTdF9QZXRlcnNidXJnX19zYycsICdTd2VkZW4nXSxcbiAgSGVsZ29sYW5kX0JpZ2h0OiBbJ05vcnRoX1NlYScsICdEZW5tYXJrJywgJ0hvbGxhbmQnLCAnS2llbCddLFxuICBJb25pYW5fU2VhOiBbJ0FkcmlhdGljX1NlYScsICdBZWdlYW5fU2VhJywgJ0Vhc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdUeXJyaGVuaWFuX1NlYScsICdBbGJhbmlhJywgJ0FwdWxpYScsICdHcmVlY2UnLCAnTmFwbGVzJywgJ1R1bmlzJ10sXG4gIElyaXNoX1NlYTogWydFbmdsaXNoX0NoYW5uZWwnLCAnTWlkX0F0bGFudGljX09jZWFuJywgJ05vcnRoX0F0bGFudGljX09jZWFuJywgJ0xpdmVycG9vbCcsICdXYWxlcyddLFxuICBNaWRfQXRsYW50aWNfT2NlYW46IFsnRW5nbGlzaF9DaGFubmVsJywgJ0lyaXNoX1NlYScsICdOb3J0aF9BdGxhbnRpY19PY2VhbicsICdXZXN0ZXJuX01lZGl0ZXJyYW5lYW4nLCAnQnJlc3QnLCAnR2FzY29ueScsICdOb3J0aF9BZnJpY2EnLCAnUG9ydHVnYWwnLCAnU3BhaW5fX25jJywgJ1NwYWluX19zYyddLFxuICBOb3J0aF9BdGxhbnRpY19PY2VhbjogWydJcmlzaF9TZWEnLCAnTWlkX0F0bGFudGljX09jZWFuJywgJ05vcndlZ2lhbl9TZWEnLCAnQ2x5ZGUnLCAnTGl2ZXJwb29sJ10sXG4gIE5vcnRoX1NlYTogWydFbmdsaXNoX0NoYW5uZWwnLCAnSGVsZ29sYW5kX0JpZ2h0JywgJ05vcndlZ2lhbl9TZWEnLCAnU2thZ2VycmFrJywgJ0JlbGdpdW0nLCAnRGVubWFyaycsICdFZGluYnVyZ2gnLCAnSG9sbGFuZCcsICdMb25kb24nLCAnTm9yd2F5JywgJ1lvcmtzaGlyZSddLFxuICBOb3J3ZWdpYW5fU2VhOiBbJ0JhcmVudHNfU2VhJywgJ05vcnRoX0F0bGFudGljX09jZWFuJywgJ05vcnRoX1NlYScsICdDbHlkZScsICdFZGluYnVyZ2gnLCAnTm9yd2F5J10sXG4gIFNrYWdlcnJhazogWydCYWx0aWNfU2VhJywgJ05vcnRoX1NlYScsICdEZW5tYXJrJywgJ05vcndheScsICdTd2VkZW4nXSxcbiAgVHlycmhlbmlhbl9TZWE6IFsnR3VsZl9vZl9MeW9uJywgJ0lvbmlhbl9TZWEnLCAnTmFwbGVzJywgJ1JvbWUnLCAnVHVuaXMnLCAnVHVzY2FueScsICdXZXN0ZXJuX01lZGl0ZXJyYW5lYW4nXSxcbiAgV2VzdGVybl9NZWRpdGVycmFuZWFuOiBbJ0d1bGZfb2ZfTHlvbicsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnTm9ydGhfQWZyaWNhJywgJ1NwYWluX19zYycsICdUdW5pcycsICdUeXJyaGVuaWFuX1NlYSddLFxuICBTd2l0emVybGFuZDogW10sXG4gIElyZWxhbmQ6IFtdLFxuICBDb3JzaWNhOiBbXSxcbiAgU2FyZGluaWE6IFtdLFxuICBNYWxsb3JjYTogW10sXG4gIFNpY2lseTogW10sXG4gIENyZXRlOiBbXSxcbiAgQWxiYW5pYTogWydBZHJpYXRpY19TZWEnLCAnSW9uaWFuX1NlYScsICdHcmVlY2UnLCAnU2VyYmlhJywgJ1RyaWVzdGUnXSxcbiAgQW5rYXJhOiBbJ0JsYWNrX1NlYScsICdBcm1lbmlhJywgJ0NvbnN0YW50aW5vcGxlJywgJ1NteXJuYSddLFxuICBBcHVsaWE6IFsnQWRyaWF0aWNfU2VhJywgJ0lvbmlhbl9TZWEnLCAnTmFwbGVzJywgJ1JvbWUnLCAnVmVuaWNlJ10sXG4gIEFybWVuaWE6IFsnQmxhY2tfU2VhJywgJ0Fua2FyYScsICdTZXZhc3RvcG9sJywgJ1NteXJuYScsICdTeXJpYSddLFxuICBCZWxnaXVtOiBbJ0VuZ2xpc2hfQ2hhbm5lbCcsICdOb3J0aF9TZWEnLCAnQnVyZ3VuZHknLCAnSG9sbGFuZCcsICdQaWNhcmR5JywgJ1J1aHInXSxcbiAgQmVybGluOiBbJ0JhbHRpY19TZWEnLCAnS2llbCcsICdNdW5pY2gnLCAnUHJ1c3NpYScsICdTaWxlc2lhJ10sXG4gIEJvaGVtaWE6IFsnR2FsaWNpYScsICdNdW5pY2gnLCAnU2lsZXNpYScsICdUeXJvbGlhJywgJ1ZpZW5uYSddLFxuICBCcmVzdDogWydFbmdsaXNoX0NoYW5uZWwnLCAnTWlkX0F0bGFudGljX09jZWFuJywgJ0dhc2NvbnknLCAnUGFyaXMnLCAnUGljYXJkeSddLFxuICBCdWRhcGVzdDogWydHYWxpY2lhJywgJ1J1bWFuaWEnLCAnU2VyYmlhJywgJ1RyaWVzdGUnLCAnVmllbm5hJ10sXG4gIEJ1bGdhcmlhX19zYzogWydBZWdlYW5fU2VhJywgJ0NvbnN0YW50aW5vcGxlJywgJ0dyZWVjZScsICdTZXJiaWEnXSxcbiAgQnVyZ3VuZHk6IFsnQmVsZ2l1bScsICdHYXNjb255JywgJ01hcnNlaWxsZXMnLCAnTXVuaWNoJywgJ1BhcmlzJywgJ1BpY2FyZHknLCAnUnVociddLFxuICBDbHlkZTogWydOb3J0aF9BdGxhbnRpY19PY2VhbicsICdOb3J3ZWdpYW5fU2VhJywgJ0VkaW5idXJnaCcsICdMaXZlcnBvb2wnXSxcbiAgQ29uc3RhbnRpbm9wbGU6IFsnQWVnZWFuX1NlYScsICdCbGFja19TZWEnLCAnQW5rYXJhJywgJ0J1bGdhcmlhX19zYycsICdTbXlybmEnXSxcbiAgRGVubWFyazogWydCYWx0aWNfU2VhJywgJ0hlbGdvbGFuZF9CaWdodCcsICdOb3J0aF9TZWEnLCAnU2thZ2VycmFrJywgJ0tpZWwnLCAnU3dlZGVuJ10sXG4gIEVkaW5idXJnaDogWydOb3J0aF9TZWEnLCAnTm9yd2VnaWFuX1NlYScsICdDbHlkZScsICdMaXZlcnBvb2wnLCAnWW9ya3NoaXJlJ10sXG4gIEZpbmxhbmQ6IFsnR3VsZl9vZl9Cb3RobmlhJywgJ05vcndheScsICdTdF9QZXRlcnNidXJnX19uYycsICdTdF9QZXRlcnNidXJnX19zYycsICdTd2VkZW4nXSxcbiAgR2FsaWNpYTogWydCb2hlbWlhJywgJ0J1ZGFwZXN0JywgJ1J1bWFuaWEnLCAnU2lsZXNpYScsICdVa3JhaW5lJywgJ1ZpZW5uYScsICdXYXJzYXcnXSxcbiAgR2FzY29ueTogWydNaWRfQXRsYW50aWNfT2NlYW4nLCAnQnJlc3QnLCAnQnVyZ3VuZHknLCAnTWFyc2VpbGxlcycsICdQYXJpcycsICdTcGFpbl9fbmMnLCAnU3BhaW5fX3NjJ10sXG4gIEdyZWVjZTogWydBZWdlYW5fU2VhJywgJ0lvbmlhbl9TZWEnLCAnQWxiYW5pYScsICdCdWxnYXJpYV9fc2MnLCAnU2VyYmlhJ10sXG4gIEhvbGxhbmQ6IFsnSGVsZ29sYW5kX0JpZ2h0JywgJ05vcnRoX1NlYScsICdCZWxnaXVtJywgJ0tpZWwnLCAnUnVociddLFxuICBLaWVsOiBbJ0JhbHRpY19TZWEnLCAnSGVsZ29sYW5kX0JpZ2h0JywgJ0JlcmxpbicsICdEZW5tYXJrJywgJ0hvbGxhbmQnLCAnTXVuaWNoJywgJ1J1aHInXSxcbiAgTGl2ZXJwb29sOiBbJ0lyaXNoX1NlYScsICdOb3J0aF9BdGxhbnRpY19PY2VhbicsICdDbHlkZScsICdFZGluYnVyZ2gnLCAnV2FsZXMnLCAnWW9ya3NoaXJlJ10sXG4gIExpdm9uaWE6IFsnQmFsdGljX1NlYScsICdHdWxmX29mX0JvdGhuaWEnLCAnTW9zY293JywgJ1BydXNzaWEnLCAnU3RfUGV0ZXJzYnVyZ19fc2MnLCAnV2Fyc2F3J10sXG4gIExvbmRvbjogWydFbmdsaXNoX0NoYW5uZWwnLCAnTm9ydGhfU2VhJywgJ1dhbGVzJywgJ1lvcmtzaGlyZSddLFxuICBNYXJzZWlsbGVzOiBbJ0d1bGZfb2ZfTHlvbicsICdCdXJndW5keScsICdHYXNjb255JywgJ1BpZWRtb250JywgJ1NwYWluX19zYyddLFxuICBNb3Njb3c6IFsnTGl2b25pYScsICdTZXZhc3RvcG9sJywgJ1N0X1BldGVyc2J1cmdfX25jJywgJ1N0X1BldGVyc2J1cmdfX3NjJywgJ1VrcmFpbmUnLCAnV2Fyc2F3J10sXG4gIE11bmljaDogWydCZXJsaW4nLCAnQm9oZW1pYScsICdCdXJndW5keScsICdLaWVsJywgJ1J1aHInLCAnU2lsZXNpYScsICdUeXJvbGlhJ10sXG4gIE5hcGxlczogWydJb25pYW5fU2VhJywgJ1R5cnJoZW5pYW5fU2VhJywgJ0FwdWxpYScsICdSb21lJ10sXG4gIE5vcnRoX0FmcmljYTogWydNaWRfQXRsYW50aWNfT2NlYW4nLCAnV2VzdGVybl9NZWRpdGVycmFuZWFuJywgJ1R1bmlzJ10sXG4gIE5vcndheTogWydCYXJlbnRzX1NlYScsICdOb3J0aF9TZWEnLCAnTm9yd2VnaWFuX1NlYScsICdTa2FnZXJyYWsnLCAnRmlubGFuZCcsICdTd2VkZW4nXSxcbiAgUGFyaXM6IFsnQnJlc3QnLCAnQnVyZ3VuZHknLCAnR2FzY29ueScsICdQaWNhcmR5J10sXG4gIFBpY2FyZHk6IFsnRW5nbGlzaF9DaGFubmVsJywgJ0JlbGdpdW0nLCAnQnJlc3QnLCAnQnVyZ3VuZHknLCAnUGFyaXMnXSxcbiAgUGllZG1vbnQ6IFsnR3VsZl9vZl9MeW9uJywgJ01hcnNlaWxsZXMnLCAnVHVzY2FueScsICdUeXJvbGlhJywgJ1ZlbmljZSddLFxuICBQb3J0dWdhbDogWydNaWRfQXRsYW50aWNfT2NlYW4nLCAnU3BhaW5fX25jJywgJ1NwYWluX19zYyddLFxuICBQcnVzc2lhOiBbJ0JhbHRpY19TZWEnLCAnQmVybGluJywgJ0xpdm9uaWEnLCAnU2lsZXNpYScsICdXYXJzYXcnXSxcbiAgUm9tZTogWydUeXJyaGVuaWFuX1NlYScsICdBcHVsaWEnLCAnTmFwbGVzJywgJ1R1c2NhbnknLCAnVmVuaWNlJ10sXG4gIFJ1aHI6IFsnQmVsZ2l1bScsICdCdXJndW5keScsICdIb2xsYW5kJywgJ0tpZWwnLCAnTXVuaWNoJ10sXG4gIFJ1bWFuaWE6IFsnQmxhY2tfU2VhJywgJ0J1ZGFwZXN0JywgJ0dhbGljaWEnLCAnU2VyYmlhJywgJ1NldmFzdG9wb2wnLCAnVWtyYWluZSddLFxuICBTZXJiaWE6IFsnQWxiYW5pYScsICdCdWRhcGVzdCcsICdCdWxnYXJpYV9fc2MnLCAnR3JlZWNlJywgJ1J1bWFuaWEnLCAnVHJpZXN0ZSddLFxuICBTZXZhc3RvcG9sOiBbJ0JsYWNrX1NlYScsICdBcm1lbmlhJywgJ01vc2NvdycsICdSdW1hbmlhJywgJ1VrcmFpbmUnXSxcbiAgU2lsZXNpYTogWydCZXJsaW4nLCAnQm9oZW1pYScsICdHYWxpY2lhJywgJ011bmljaCcsICdQcnVzc2lhJywgJ1dhcnNhdyddLFxuICBTbXlybmE6IFsnQWVnZWFuX1NlYScsICdFYXN0ZXJuX01lZGl0ZXJyYW5lYW4nLCAnQW5rYXJhJywgJ0FybWVuaWEnLCAnQ29uc3RhbnRpbm9wbGUnLCAnU3lyaWEnXSxcbiAgU3BhaW5fX25jOiBbJ01pZF9BdGxhbnRpY19PY2VhbicsICdHYXNjb255JywgJ1BvcnR1Z2FsJywgJ1NwYWluX19zYyddLFxuICBTcGFpbl9fc2M6IFsnR3VsZl9vZl9MeW9uJywgJ01pZF9BdGxhbnRpY19PY2VhbicsICdXZXN0ZXJuX01lZGl0ZXJyYW5lYW4nLCAnR2FzY29ueScsICdNYXJzZWlsbGVzJywgJ1BvcnR1Z2FsJywgJ1NwYWluX19uYyddLFxuICBTdF9QZXRlcnNidXJnX19uYzogWydCYXJlbnRzX1NlYScsICdGaW5sYW5kJywgJ01vc2NvdycsICdTdF9QZXRlcnNidXJnX19zYyddLFxuICBTdF9QZXRlcnNidXJnX19zYzogWydHdWxmX29mX0JvdGhuaWEnLCAnRmlubGFuZCcsICdMaXZvbmlhJywgJ01vc2NvdycsICdTdF9QZXRlcnNidXJnX19uYyddLFxuICBTd2VkZW46IFsnQmFsdGljX1NlYScsICdHdWxmX29mX0JvdGhuaWEnLCAnU2thZ2VycmFrJywgJ0Rlbm1hcmsnLCAnRmlubGFuZCcsICdOb3J3YXknXSxcbiAgU3lyaWE6IFsnRWFzdGVybl9NZWRpdGVycmFuZWFuJywgJ0FybWVuaWEnLCAnU215cm5hJ10sXG4gIFRyaWVzdGU6IFsnQWRyaWF0aWNfU2VhJywgJ0FsYmFuaWEnLCAnQnVkYXBlc3QnLCAnU2VyYmlhJywgJ1R5cm9saWEnLCAnVmVuaWNlJywgJ1ZpZW5uYSddLFxuICBUdW5pczogWydJb25pYW5fU2VhJywgJ1R5cnJoZW5pYW5fU2VhJywgJ1dlc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdOb3J0aF9BZnJpY2EnXSxcbiAgVHVzY2FueTogWydHdWxmX29mX0x5b24nLCAnVHlycmhlbmlhbl9TZWEnLCAnUGllZG1vbnQnLCAnUm9tZScsICdWZW5pY2UnXSxcbiAgVHlyb2xpYTogWydCb2hlbWlhJywgJ011bmljaCcsICdQaWVkbW9udCcsICdUcmllc3RlJywgJ1ZlbmljZScsICdWaWVubmEnXSxcbiAgVWtyYWluZTogWydHYWxpY2lhJywgJ01vc2NvdycsICdSdW1hbmlhJywgJ1NldmFzdG9wb2wnLCAnV2Fyc2F3J10sXG4gIFZlbmljZTogWydBZHJpYXRpY19TZWEnLCAnQXB1bGlhJywgJ1BpZWRtb250JywgJ1JvbWUnLCAnVHJpZXN0ZScsICdUdXNjYW55JywgJ1R5cm9saWEnXSxcbiAgVmllbm5hOiBbJ0JvaGVtaWEnLCAnQnVkYXBlc3QnLCAnR2FsaWNpYScsICdUcmllc3RlJywgJ1R5cm9saWEnXSxcbiAgV2FsZXM6IFsnRW5nbGlzaF9DaGFubmVsJywgJ0lyaXNoX1NlYScsICdMaXZlcnBvb2wnLCAnTG9uZG9uJywgJ1lvcmtzaGlyZSddLFxuICBXYXJzYXc6IFsnR2FsaWNpYScsICdMaXZvbmlhJywgJ01vc2NvdycsICdQcnVzc2lhJywgJ1NpbGVzaWEnLCAnVWtyYWluZSddLFxuICBZb3Jrc2hpcmU6IFsnTm9ydGhfU2VhJywgJ0VkaW5idXJnaCcsICdMaXZlcnBvb2wnLCAnTG9uZG9uJywgJ1dhbGVzJ10sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkamFjZW50QnlMYW5kVGlsZXNEYXRhXG4iLCJjb25zdCBhZGphY2VudEJ5U2VhVGlsZXNEYXRhOiB7W2tleTogc3RyaW5nXTogc3RyaW5nW119ID0ge1xuICBBZHJpYXRpY19TZWE6IFsnSW9uaWFuX1NlYScsICdBbGJhbmlhJywgJ0FwdWxpYScsICdUcmllc3RlJywgJ1ZlbmljZSddLFxuICBBZWdlYW5fU2VhOiBbJ0Vhc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdJb25pYW5fU2VhJywgJ0J1bGdhcmlhX19zYycsICdDb25zdGFudGlub3BsZScsICdHcmVlY2UnLCAnU215cm5hJ10sXG4gIEJhbHRpY19TZWE6IFsnR3VsZl9vZl9Cb3RobmlhJywgJ1NrYWdlcnJhaycsICdCZXJsaW4nLCAnRGVubWFyaycsICdLaWVsJywgJ0xpdm9uaWEnLCAnUHJ1c3NpYScsICdTd2VkZW4nXSxcbiAgQmFyZW50c19TZWE6IFsnTm9yd2VnaWFuX1NlYScsICdOb3J3YXknLCAnU3RfUGV0ZXJzYnVyZ19fbmMnXSxcbiAgQmxhY2tfU2VhOiBbJ0Fua2FyYScsICdBcm1lbmlhJywgJ0NvbnN0YW50aW5vcGxlJywgJ1J1bWFuaWEnLCAnU2V2YXN0b3BvbCddLFxuICBFYXN0ZXJuX01lZGl0ZXJyYW5lYW46IFsnQWVnZWFuX1NlYScsICdJb25pYW5fU2VhJywgJ1NteXJuYScsICdTeXJpYSddLFxuICBFbmdsaXNoX0NoYW5uZWw6IFsnSXJpc2hfU2VhJywgJ01pZF9BdGxhbnRpY19PY2VhbicsICdOb3J0aF9TZWEnLCAnQmVsZ2l1bScsICdCcmVzdCcsICdMb25kb24nLCAnUGljYXJkeScsICdXYWxlcyddLFxuICBHdWxmX29mX0x5b246IFsnVHlycmhlbmlhbl9TZWEnLCAnV2VzdGVybl9NZWRpdGVycmFuZWFuJywgJ01hcnNlaWxsZXMnLCAnUGllZG1vbnQnLCAnU3BhaW5fX3NjJywgJ1R1c2NhbnknXSxcbiAgR3VsZl9vZl9Cb3RobmlhOiBbJ0JhbHRpY19TZWEnLCAnRmlubGFuZCcsICdMaXZvbmlhJywgJ1N0X1BldGVyc2J1cmdfX3NjJywgJ1N3ZWRlbiddLFxuICBIZWxnb2xhbmRfQmlnaHQ6IFsnTm9ydGhfU2VhJywgJ0Rlbm1hcmsnLCAnSG9sbGFuZCcsICdLaWVsJ10sXG4gIElvbmlhbl9TZWE6IFsnQWRyaWF0aWNfU2VhJywgJ0FlZ2Vhbl9TZWEnLCAnRWFzdGVybl9NZWRpdGVycmFuZWFuJywgJ1R5cnJoZW5pYW5fU2VhJywgJ0FsYmFuaWEnLCAnQXB1bGlhJywgJ0dyZWVjZScsICdOYXBsZXMnLCAnVHVuaXMnXSxcbiAgSXJpc2hfU2VhOiBbJ0VuZ2xpc2hfQ2hhbm5lbCcsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnTm9ydGhfQXRsYW50aWNfT2NlYW4nLCAnTGl2ZXJwb29sJywgJ1dhbGVzJ10sXG4gIE1pZF9BdGxhbnRpY19PY2VhbjogWydFbmdsaXNoX0NoYW5uZWwnLCAnSXJpc2hfU2VhJywgJ05vcnRoX0F0bGFudGljX09jZWFuJywgJ1dlc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdCcmVzdCcsICdHYXNjb255JywgJ05vcnRoX0FmcmljYScsICdQb3J0dWdhbCcsICdTcGFpbl9fbmMnLCAnU3BhaW5fX3NjJ10sXG4gIE5vcnRoX0F0bGFudGljX09jZWFuOiBbJ0lyaXNoX1NlYScsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnTm9yd2VnaWFuX1NlYScsICdDbHlkZScsICdMaXZlcnBvb2wnXSxcbiAgTm9ydGhfU2VhOiBbJ0VuZ2xpc2hfQ2hhbm5lbCcsICdIZWxnb2xhbmRfQmlnaHQnLCAnTm9yd2VnaWFuX1NlYScsICdTa2FnZXJyYWsnLCAnQmVsZ2l1bScsICdEZW5tYXJrJywgJ0VkaW5idXJnaCcsICdIb2xsYW5kJywgJ0xvbmRvbicsICdOb3J3YXknLCAnWW9ya3NoaXJlJ10sXG4gIE5vcndlZ2lhbl9TZWE6IFsnQmFyZW50c19TZWEnLCAnTm9ydGhfQXRsYW50aWNfT2NlYW4nLCAnTm9ydGhfU2VhJywgJ0NseWRlJywgJ0VkaW5idXJnaCcsICdOb3J3YXknXSxcbiAgU2thZ2VycmFrOiBbJ0JhbHRpY19TZWEnLCAnTm9ydGhfU2VhJywgJ0Rlbm1hcmsnLCAnTm9yd2F5JywgJ1N3ZWRlbiddLFxuICBUeXJyaGVuaWFuX1NlYTogWydHdWxmX29mX0x5b24nLCAnSW9uaWFuX1NlYScsICdOYXBsZXMnLCAnUm9tZScsICdUdW5pcycsICdUdXNjYW55JywgJ1dlc3Rlcm5fTWVkaXRlcnJhbmVhbiddLFxuICBXZXN0ZXJuX01lZGl0ZXJyYW5lYW46IFsnR3VsZl9vZl9MeW9uJywgJ01pZF9BdGxhbnRpY19PY2VhbicsICdOb3J0aF9BZnJpY2EnLCAnU3BhaW5fX3NjJywgJ1R1bmlzJywgJ1R5cnJoZW5pYW5fU2VhJ10sXG4gIFN3aXR6ZXJsYW5kOiBbXSxcbiAgSXJlbGFuZDogW10sXG4gIENvcnNpY2E6IFtdLFxuICBTYXJkaW5pYTogW10sXG4gIE1hbGxvcmNhOiBbXSxcbiAgU2ljaWx5OiBbXSxcbiAgQ3JldGU6IFtdLFxuICBBbGJhbmlhOiBbJ0FkcmlhdGljX1NlYScsICdJb25pYW5fU2VhJywgJ0dyZWVjZScsICdUcmllc3RlJ10sXG4gIEFua2FyYTogWydCbGFja19TZWEnLCAnQXJtZW5pYScsICdDb25zdGFudGlub3BsZSddLFxuICBBcHVsaWE6IFsnQWRyaWF0aWNfU2VhJywgJ0lvbmlhbl9TZWEnLCAnTmFwbGVzJywgJ1ZlbmljZSddLFxuICBBcm1lbmlhOiBbJ0JsYWNrX1NlYScsICdBbmthcmEnLCAnU2V2YXN0b3BvbCcsICdTbXlybmEnXSxcbiAgQmVsZ2l1bTogWydFbmdsaXNoX0NoYW5uZWwnLCAnTm9ydGhfU2VhJywgJ0hvbGxhbmQnLCAnUGljYXJkeSddLFxuICBCZXJsaW46IFsnQmFsdGljX1NlYScsICdLaWVsJywgJ1BydXNzaWEnXSxcbiAgQm9oZW1pYTogW10sXG4gIEJyZXN0OiBbJ0VuZ2xpc2hfQ2hhbm5lbCcsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnR2FzY29ueScsICdQaWNhcmR5J10sXG4gIEJ1ZGFwZXN0OiBbXSxcbiAgQnVsZ2FyaWFfX3NjOiBbJ0FlZ2Vhbl9TZWEnLCAnQ29uc3RhbnRpbm9wbGUnLCAnR3JlZWNlJ10sXG4gIEJ1cmd1bmR5OiBbXSxcbiAgQ2x5ZGU6IFsnTm9ydGhfQXRsYW50aWNfT2NlYW4nLCAnTm9yd2VnaWFuX1NlYScsICdFZGluYnVyZ2gnLCAnTGl2ZXJwb29sJ10sXG4gIENvbnN0YW50aW5vcGxlOiBbJ0FlZ2Vhbl9TZWEnLCAnQmxhY2tfU2VhJywgJ0Fua2FyYScsICdCdWxnYXJpYV9fc2MnLCAnU215cm5hJ10sXG4gIERlbm1hcms6IFsnQmFsdGljX1NlYScsICdIZWxnb2xhbmRfQmlnaHQnLCAnTm9ydGhfU2VhJywgJ1NrYWdlcnJhaycsICdLaWVsJywgJ1N3ZWRlbiddLFxuICBFZGluYnVyZ2g6IFsnTm9ydGhfU2VhJywgJ05vcndlZ2lhbl9TZWEnLCAnQ2x5ZGUnLCAnWW9ya3NoaXJlJ10sXG4gIEZpbmxhbmQ6IFsnR3VsZl9vZl9Cb3RobmlhJywgJ1N0X1BldGVyc2J1cmdfX3NjJywgJ1N3ZWRlbiddLFxuICBHYWxpY2lhOiBbXSxcbiAgR2FzY29ueTogWydNaWRfQXRsYW50aWNfT2NlYW4nLCAnQnJlc3QnLCAnU3BhaW5fX25jJ10sXG4gIEdyZWVjZTogWydBZWdlYW5fU2VhJywgJ0lvbmlhbl9TZWEnLCAnQWxiYW5pYScsICdCdWxnYXJpYV9fc2MnXSxcbiAgSG9sbGFuZDogWydIZWxnb2xhbmRfQmlnaHQnLCAnTm9ydGhfU2VhJywgJ0JlbGdpdW0nLCAnS2llbCcsICdSdWhyJ10sXG4gIEtpZWw6IFsnQmFsdGljX1NlYScsICdIZWxnb2xhbmRfQmlnaHQnLCAnQmVybGluJywgJ0Rlbm1hcmsnLCAnSG9sbGFuZCcsICdSdWhyJ10sXG4gIExpdmVycG9vbDogWydJcmlzaF9TZWEnLCAnTm9ydGhfQXRsYW50aWNfT2NlYW4nLCAnQ2x5ZGUnLCAnV2FsZXMnXSxcbiAgTGl2b25pYTogWydCYWx0aWNfU2VhJywgJ0d1bGZfb2ZfQm90aG5pYScsICdQcnVzc2lhJywgJ1N0X1BldGVyc2J1cmdfX3NjJ10sXG4gIExvbmRvbjogWydFbmdsaXNoX0NoYW5uZWwnLCAnTm9ydGhfU2VhJywgJ1dhbGVzJywgJ1lvcmtzaGlyZSddLFxuICBNYXJzZWlsbGVzOiBbJ0d1bGZfb2ZfTHlvbicsICdHYXNjb255JywgJ1BpZWRtb250JywgJ1NwYWluX19zYyddLFxuICBNb3Njb3c6IFtdLFxuICBNdW5pY2g6IFtdLFxuICBOYXBsZXM6IFsnSW9uaWFuX1NlYScsICdUeXJyaGVuaWFuX1NlYScsICdBcHVsaWEnLCAnUm9tZSddLFxuICBOb3J0aF9BZnJpY2E6IFsnTWlkX0F0bGFudGljX09jZWFuJywgJ1dlc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdUdW5pcyddLFxuICBOb3J3YXk6IFsnQmFyZW50c19TZWEnLCAnTm9ydGhfU2VhJywgJ05vcndlZ2lhbl9TZWEnLCAnU2thZ2VycmFrJywgJ0ZpbmxhbmQnLCAnU3dlZGVuJywgJ1N0X1BldGVyc2J1cmdfX25jJ10sXG4gIFBhcmlzOiBbXSxcbiAgUGljYXJkeTogWydFbmdsaXNoX0NoYW5uZWwnLCAnQmVsZ2l1bScsICdCcmVzdCcsICdQYXJpcyddLFxuICBQaWVkbW9udDogWydHdWxmX29mX0x5b24nLCAnTWFyc2VpbGxlcycsICdUdXNjYW55JywgJ1ZlbmljZSddLFxuICBQb3J0dWdhbDogWydNaWRfQXRsYW50aWNfT2NlYW4nLCAnU3BhaW5fX25jJywgJ1NwYWluX19zYyddLFxuICBQcnVzc2lhOiBbJ0JhbHRpY19TZWEnLCAnQmVybGluJywgJ0xpdm9uaWEnXSxcbiAgUm9tZTogWydUeXJyaGVuaWFuX1NlYScsICdBcHVsaWEnLCAnTmFwbGVzJywgJ1R1c2NhbnknLCAnVmVuaWNlJ10sXG4gIFJ1aHI6IFsnQmVsZ2l1bScsICdIb2xsYW5kJywgJ0tpZWwnXSxcbiAgUnVtYW5pYTogWydCbGFja19TZWEnLCAnU2V2YXN0b3BvbCddLFxuICBTZXJiaWE6IFtdLFxuICBTZXZhc3RvcG9sOiBbJ0JsYWNrX1NlYScsICdBcm1lbmlhJywgJ1J1bWFuaWEnXSxcbiAgU2lsZXNpYTogW10sXG4gIFNteXJuYTogWydBZWdlYW5fU2VhJywgJ0Vhc3Rlcm5fTWVkaXRlcnJhbmVhbicsICdBbmthcmEnLCAnQXJtZW5pYScsICdDb25zdGFudGlub3BsZScsICdTeXJpYSddLFxuICBTcGFpbl9fbmM6IFsnTWlkX0F0bGFudGljX09jZWFuJywgJ0dhc2NvbnknLCAnUG9ydHVnYWwnXSxcbiAgU3BhaW5fX3NjOiBbJ0d1bGZfb2ZfTHlvbicsICdNaWRfQXRsYW50aWNfT2NlYW4nLCAnV2VzdGVybl9NZWRpdGVycmFuZWFuJywgJ0dhc2NvbnknLCAnTWFyc2VpbGxlcycsICdQb3J0dWdhbCddLFxuICBTdF9QZXRlcnNidXJnX19uYzogWydCYXJlbnRzX1NlYScsICdOb3J3YXknXSxcbiAgU3RfUGV0ZXJzYnVyZ19fc2M6IFsnR3VsZl9vZl9Cb3RobmlhJywgJ0ZpbmxhbmQnLCAnTGl2b25pYSddLFxuICBTd2VkZW46IFsnQmFsdGljX1NlYScsICdHdWxmX29mX0JvdGhuaWEnLCAnU2thZ2VycmFrJywgJ0Rlbm1hcmsnLCAnRmlubGFuZCcsICdOb3J3YXknXSxcbiAgU3lyaWE6IFsnRWFzdGVybl9NZWRpdGVycmFuZWFuJywgJ0FybWVuaWEnLCAnU215cm5hJ10sXG4gIFRyaWVzdGU6IFsnQWRyaWF0aWNfU2VhJywgJ0FsYmFuaWEnLCAnVmVuaWNlJ10sXG4gIFR1bmlzOiBbJ0lvbmlhbl9TZWEnLCAnVHlycmhlbmlhbl9TZWEnLCAnV2VzdGVybl9NZWRpdGVycmFuZWFuJywgJ05vcnRoX0FmcmljYSddLFxuICBUdXNjYW55OiBbJ0d1bGZfb2ZfTHlvbicsICdUeXJyaGVuaWFuX1NlYScsICdQaWVkbW9udCcsICdSb21lJywgJ1ZlbmljZSddLFxuICBUeXJvbGlhOiBbXSxcbiAgVWtyYWluZTogW10sXG4gIFZlbmljZTogWydBZHJpYXRpY19TZWEnLCAnQXB1bGlhJywgJ1BpZWRtb250JywgJ1JvbWUnLCAnVHJpZXN0ZScsICdUdXNjYW55J10sXG4gIFZpZW5uYTogW10sXG4gIFdhbGVzOiBbJ0VuZ2xpc2hfQ2hhbm5lbCcsICdJcmlzaF9TZWEnLCAnTGl2ZXJwb29sJywgJ0xvbmRvbicsICdZb3Jrc2hpcmUnXSxcbiAgV2Fyc2F3OiBbXSxcbiAgWW9ya3NoaXJlOiBbJ05vcnRoX1NlYScsICdFZGluYnVyZ2gnLCAnTGl2ZXJwb29sJywgJ0xvbmRvbicsICdXYWxlcyddLFxufVxuXG5leHBvcnQgZGVmYXVsdCBhZGphY2VudEJ5U2VhVGlsZXNEYXRhXG4iLCJpbXBvcnQgeyBJR2FtZVR1cm5KU09OLCBJTW92ZSB9IGZyb20gJ0BzaGFyZWQvdHlwZXMnXG5pbXBvcnQgYXJlQWRqYWNlbnQgZnJvbSAnLi9hcmVBZGphY2VudCdcblxuY29uc3QgcGhhc2VzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nW119ID0ge1xuICBtb3ZlbWVudDogWydNb3ZlJywgJ3N1cHBvcnQnLCAnaG9sZCddLFxuICByZXRyZWF0OiBbJ3JldHJlYXQnXSxcbiAgYnVpbGQ6IFsnYnVpbGQnLCAnZGlzYmFuZCddLFxufVxuXG5jb25zdCBmaW5kUGxheWVyID0gKHR1cm46IElHYW1lVHVybkpTT04pID0+IChwbGF5ZXJJRDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiB0dXJuLnBsYXllcnMuZmluZCgocGxheWVyKSA9PiBwbGF5ZXIucGxheWVySUQgPT09IHBsYXllcklEKVxufVxuXG5jb25zdCBmaW5kVW5pdCA9IChwbGF5ZXJTdGF0ZTogSUdhbWVUdXJuSlNPTlsncGxheWVycyddWzBdKSA9PiAoZnJvbTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBwbGF5ZXJTdGF0ZS5vd25lZFVuaXRzLmZpbmQoKHVuaXQpID0+IHVuaXQubG9jYXRpb24gPT09IGZyb20pXG59XG5cbmNvbnN0IHZhbGlkYXRlTW92ZSA9ICh0dXJuOiBJR2FtZVR1cm5KU09OLCBtb3ZlOiBJTW92ZSwgcGxheWVySUQ6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAvLyBGaW5kIHBsYXllciBpbiBnYW1lIHR1cm5cblxuICBjb25zdCBwbGF5ZXIgPSBmaW5kUGxheWVyKHR1cm4pKHBsYXllcklEKVxuICBpZiAoIXBsYXllcikge1xuICAgIGNvbnNvbGUubG9nKCdQbGF5ZXIgbm90IGZvdW5kJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHBsYXllciBoYXMgdW5pdCBhdCB0aGlzIGxvY2F0aW9uXG4gIGNvbnN0IHVuaXQgPSBmaW5kVW5pdChwbGF5ZXIpKG1vdmUuZnJvbSlcbiAgaWYgKCF1bml0KSB7XG4gICAgY29uc29sZS5sb2coJ1VuaXQgbm90IGZvdW5kJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBtb3ZlbWVudCB0eXBlIGlzIGFwcHJvcHJpYXRlIGZvciB0aGUgcGhhc2VcbiAgY29uc3QgcG9zc2libGVNb3ZlcyA9IHBoYXNlc1t0dXJuLmluZm8ucGhhc2VdIHx8IFtdXG4gIGlmICghcG9zc2libGVNb3Zlcy5pbmNsdWRlcyhtb3ZlLm1vdmVUeXBlKSkge1xuICAgIGNvbnNvbGUubG9nKCdub3QgaW5jbHVkZWQnLCBtb3ZlLm1vdmVUeXBlKVxuICAgIGNvbnNvbGUubG9nKGB0dXJuLmluZm8ucGhhc2U6ICR7dHVybi5pbmZvLnBoYXNlfWApXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjb25zdCBpc0FkamFjZW50VG9EZXN0aW5hdGlvbiA9IGFyZUFkamFjZW50KG1vdmUudW5pdCkobW92ZS50bylcblxuICBzd2l0Y2ggKG1vdmUubW92ZVR5cGUpIHtcbiAgICBjYXNlICdNb3ZlJzpcbiAgICAgIC8vIENoZWNrIHRoYXQgZGVzdGluYXRpb24gaXMgYWRqYWNlbnRcbiAgICAgIGlmICghaXNBZGphY2VudFRvRGVzdGluYXRpb24obW92ZS5mcm9tKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnaXMgbm90IGFkamFjZW50JylcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE8gQ2hlY2sgdGhhdCB1bml0IGNhbiBtb3ZlIHRoZXJlIChsYW5kL3NlYSlcblxuICAgICAgcmV0dXJuIHRydWVcblxuICAgIGNhc2UgJ3N1cHBvcnQnOlxuICAgICAgLy8gQ2hlY2sgdGhhdCBkZXN0aW5hdGlvbiBpcyBhZGphY2VudFxuICAgICAgaWYgKCFpc0FkamFjZW50VG9EZXN0aW5hdGlvbihtb3ZlLmZyb20pKSByZXR1cm4gZmFsc2VcbiAgICAgIC8vIFRPRE8gQ2hlY2sgdGhhdCB1bml0VHlwZSBjYW4gc3VwcG9ydCBpbiB0aGF0IHdheVxuXG4gICAgICAvLyBDaGVjayB0aGF0IHN1cHBvcnQgZnJvbSBpcyBhZGphY2VudCB0byBkZXN0aW5hdGlvblxuICAgICAgaWYgKCFpc0FkamFjZW50VG9EZXN0aW5hdGlvbihtb3ZlLnN1cHBvcnRGcm9tKSkgcmV0dXJuIGZhbHNlXG4gICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgY2FzZSAncmV0cmVhdCc6XG4gICAgICAvLyBDaGVjayB0aGF0IGRlc3RpbmF0aW9uIGlzIGFkamFjZW50XG4gICAgICBpZiAoIWlzQWRqYWNlbnRUb0Rlc3RpbmF0aW9uKG1vdmUuZnJvbSkpIHJldHVybiBmYWxzZVxuXG4gICAgICAvLyBUT0RPIENoZWNrIHRoYXQgZGVzdGluYXRpb24gaXMgZW1wdHlcblxuICAgICAgcmV0dXJuIHRydWVcblxuICAgIGNhc2UgJ2hvbGQnOiByZXR1cm4gdHJ1ZVxuICAgIGNhc2UgJ2Rpc2JhbmQnOiByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZU1vdmVcbiIsImltcG9ydCBhZGphY2VudEJ5TGFuZFRpbGVzRGF0YSBmcm9tICdAc2hhcmVkL3Jlc291cmNlcy9sYW5kVGlsZXNEYXRhJ1xuaW1wb3J0IGFkamFjZW50QnlTZWFUaWxlc0RhdGEgZnJvbSAnQHNoYXJlZC9yZXNvdXJjZXMvc2VhVGlsZXNEYXRhJ1xuXG5leHBvcnQgZGVmYXVsdCAodW5pdFR5cGU6ICdBcm15JyB8ICdGbGVldCcpID0+ICh0ZXJyaXRvcnlBOiBzdHJpbmcpID0+ICh0ZXJyaXRvcnlCOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZGF0YSA9IHVuaXRUeXBlID09PSAnQXJteScgPyBhZGphY2VudEJ5TGFuZFRpbGVzRGF0YSA6IGFkamFjZW50QnlTZWFUaWxlc0RhdGFcbiAgY29uc29sZS5sb2coJ2luc2lkZSBhcmVBZGphY2VudC4uLicpXG4gIGNvbnNvbGUubG9nKHVuaXRUeXBlLCBkYXRhKVxuICByZXR1cm4gZGF0YVt0ZXJyaXRvcnlBXS5pbmNsdWRlcyh0ZXJyaXRvcnlCKVxufSIsImltcG9ydCB7IElHYW1lVHVybkpTT04sIElVbml0IH0gZnJvbSAnQHNoYXJlZC90eXBlcydcbmltcG9ydCBCb2FyZFBhaW50ZXIgZnJvbSAnLi9ib2FyZFBhaW50ZXIvYm9hcmRQYWludGVyJ1xuaW1wb3J0IE9yZGVyIGZyb20gJy4vb3JkZXInXG5cbmltcG9ydCB2YWxpZGF0ZU1vdmUgZnJvbSAnQHNoYXJlZC9oZWxwZXJzL3ZhbGlkYXRlTW92ZSdcbmltcG9ydCBuZWlnaGJvdXJzVG8gZnJvbSAnQHNoYXJlZC9yZXNvdXJjZXMvbGFuZFRpbGVzRGF0YSdcblxuZXhwb3J0IGRlZmF1bHQgbmV3IGNsYXNzIEdhbWUge1xuICBvcmRlcnM6IE9yZGVyW10gPSBbXVxuICBwcml2YXRlIGJvYXJkUGFpbnRlcjogQm9hcmRQYWludGVyXG4gIHByaXZhdGUgbWFwU3ZnOiBIVE1MRWxlbWVudFxuICBwcml2YXRlIGFybXlTdmc6IEhUTUxFbGVtZW50XG4gIHByaXZhdGUgZmxlZXRTdmc6IEhUTUxFbGVtZW50XG4gIHByaXZhdGUgdGlsZVNlbGVjdGVkOiBzdHJpbmdcbiAgcHJpdmF0ZSB1bml0czoge1trZXk6IHN0cmluZ106IElVbml0W119ID0ge30gLy8gdW5pdHMgdHlwZT9cbiAgcHJpdmF0ZSBwbGF5ZXJFbXBpcmU6IHN0cmluZ1xuICBwcml2YXRlIHR1cm46IElHYW1lVHVybkpTT05cbiAgcHJpdmF0ZSBwbGF5ZXJJRDogc3RyaW5nXG5cbiAgcnVuID0gKCkgPT4ge31cblxuICAvLyA/IFBsYXllciBJRCBvciBlbXBpcmU/IFNob3VsZCB0aGUgZW5naW5lIGJlIGlkIGFnbm9zdGljP1xuICBzZXR1cCA9IChzdmdzOiB7bWFwOiBIVE1MRWxlbWVudCwgYXJteTogSFRNTEVsZW1lbnQsIGZsZWV0OiBIVE1MRWxlbWVudH0sIHR1cm46IElHYW1lVHVybkpTT04sIHBsYXllcklEOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLm1hcFN2ZyA9IHN2Z3MubWFwXG4gICAgdGhpcy5hcm15U3ZnID0gc3Zncy5hcm15XG4gICAgdGhpcy5mbGVldFN2ZyA9IHN2Z3MuZmxlZXRcbiAgICB0aGlzLnR1cm4gPSB0dXJuXG4gICAgdGhpcy5wbGF5ZXJJRCA9IHBsYXllcklEXG4gICAgdGhpcy5wbGF5ZXJFbXBpcmUgPSB0aGlzLnR1cm4ucGxheWVycy5maW5kKChwKSA9PiBwLnBsYXllcklEID09PSBwbGF5ZXJJRCkuZW1waXJlXG4gICAgY29uc29sZS5sb2coJ3BsYXlpbmcgYXMgJywgdGhpcy5wbGF5ZXJFbXBpcmUpXG5cbiAgICB0aGlzLnR1cm4ucGxheWVycy5mb3JFYWNoKChwbGF5ZXIpID0+IHRoaXMudW5pdHNbcGxheWVyLmVtcGlyZV0gPSBwbGF5ZXIub3duZWRVbml0cylcbiAgICB0aGlzLmJvYXJkUGFpbnRlciA9IG5ldyBCb2FyZFBhaW50ZXIodGhpcy5tYXBTdmcsIHR1cm4sIHRoaXMuYXJteVN2ZywgdGhpcy5mbGVldFN2ZylcbiAgICB0aGlzLm9yZGVycyA9IHRoaXMudHVybi5wbGF5ZXJzLmZpbmQoKHBsYXllcikgPT4gcGxheWVyLnBsYXllcklEID09PSBwbGF5ZXJJRCkubW92ZXMubWFwKE9yZGVyLmZyb20pXG4gICAgdGhpcy5ib2FyZFBhaW50ZXIucmVkcmF3KClcbiAgICAvLyB0aGlzLnBsYXllckNvdW50cnkgPSB0aGlzLnR1cm4ucGxheWVyc1twbGF5ZXJJRF0uZW1waXJlXG5cbiAgICBjb25zdCB0aWxlcyA9IEFycmF5LmZyb20odGhpcy5tYXBTdmcuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2VhVGlsZScpIGFzIEhUTUxDb2xsZWN0aW9uT2Y8SFRNTEVsZW1lbnQ+KVxuICAgIHRpbGVzLnB1c2goLi4uQXJyYXkuZnJvbSh0aGlzLm1hcFN2Zy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsYW5kVGlsZScpIGFzIEhUTUxDb2xsZWN0aW9uT2Y8SFRNTEVsZW1lbnQ+KSlcblxuICAgIHRpbGVzLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICAgIHRpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7IHRoaXMub25DbGljayh0aWxlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSkgfSlcbiAgICB9KVxuICAgIGNvbnN0IHVuaXRzID0gQXJyYXkuZnJvbSh0aGlzLm1hcFN2Zy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd1bml0JykgYXMgSFRNTENvbGxlY3Rpb25PZjxIVE1MRWxlbWVudD4pXG4gICAgdW5pdHMuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgdW5pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHRoaXMub25DbGljayh1bml0LmNsYXNzTGlzdFsyXSkpXG4gICAgfSlcbiAgfVxuXG4gIGNsZWFyTWFwID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5tYXBTdmcpIHJldHVyblxuICAgIGNvbnN0IHVuaXRzID0gQXJyYXkuZnJvbSh0aGlzLm1hcFN2Zy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd1bml0JykpXG4gICAgdW5pdHMuZm9yRWFjaCh1bml0ID0+IHVuaXQucmVtb3ZlKCkpXG4gICAgY29uc3Qgb3JkZXJzID0gQXJyYXkuZnJvbSh0aGlzLm1hcFN2Zy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvcmRlcicpKVxuICAgIG9yZGVycy5mb3JFYWNoKG9yZGVyID0+IG9yZGVyLnJlbW92ZSgpKVxuICB9XG5cbiAgcHJpdmF0ZSBvbkNsaWNrID0gKHRlcnJpdG9yeTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHRoaXMudGlsZVNlbGVjdGVkXG4gICAgICAmJiBuZWlnaGJvdXJzVG9bdGhpcy50aWxlU2VsZWN0ZWRdLmluY2x1ZGVzKHRlcnJpdG9yeSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmZpbmlzaE9yZGVyKHRlcnJpdG9yeSlcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbmlzaGluZ09yZGVyJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnc3RhcnRpbmdPcmRlcicpXG4gICAgICB0aGlzLnN0YXJ0T3JkZXIodGVycml0b3J5KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZmluaXNoT3JkZXIgPSAodGVycml0b3J5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnVuaXRzW3RoaXMucGxheWVyRW1waXJlXSwgdGhpcy50aWxlU2VsZWN0ZWQpXG4gICAgY29uc3QgdW5pdCA9IHRoaXMudW5pdHNbdGhpcy5wbGF5ZXJFbXBpcmVdLmZpbmQodSA9PiB1LmxvY2F0aW9uID09PSB0aGlzLnRpbGVTZWxlY3RlZClcbiAgICB0aGlzLm9yZGVycyA9IHRoaXMub3JkZXJzLmZpbHRlcigob3JkZXIpID0+IHtcbiAgICAgIHJldHVybiBvcmRlci5mcm9tICE9PSB0aGlzLnRpbGVTZWxlY3RlZFxuICAgIH0pXG5cbiAgICBjb25zb2xlLmxvZyh0aGlzLnR1cm4pXG5cbiAgICAvLyAhIE1PVkUgVFlQRSBpcyBjdXJyZW50bHkgaGFyZCBjb2RlZCFcbiAgICBjb25zdCBuZXdPcmRlciA9IG5ldyBPcmRlcih1bml0LnVuaXRUeXBlLCB0aGlzLnRpbGVTZWxlY3RlZCwgdGVycml0b3J5LCAnTW92ZScpXG5cbiAgICBjb25zb2xlLmxvZyh2YWxpZGF0ZU1vdmUodGhpcy50dXJuLCBuZXdPcmRlci50b09iamVjdCgpLCB0aGlzLnBsYXllcklEKSlcblxuICAgIGlmICh2YWxpZGF0ZU1vdmUodGhpcy50dXJuLCBuZXdPcmRlci50b09iamVjdCgpLCB0aGlzLnBsYXllcklEKSkge1xuICAgICAgdGhpcy5vcmRlcnMucHVzaChuZXdPcmRlcilcbiAgICAgIHRoaXMuYm9hcmRQYWludGVyLnJlZHJhd09yZGVycyh0aGlzLm9yZGVycylcbiAgICAgIHRoaXMudGlsZVNlbGVjdGVkID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRPcmRlciA9ICh0ZXJyaXRvcnk6IHN0cmluZykgPT4ge1xuICAgIGlmICh0aGlzLnBsYXllckhhc1VuaXRBdCh0ZXJyaXRvcnkpKSB7XG4gICAgICB0aGlzLnRpbGVTZWxlY3RlZCA9IHRlcnJpdG9yeVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcGxheWVySGFzVW5pdEF0ID0gKHRlcnJpdG9yeTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgdW5pdCA9IHRoaXMudW5pdHNbdGhpcy5wbGF5ZXJFbXBpcmVdLmZpbmQoKHVuaXQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIHVuaXQubG9jYXRpb24gPT09IHRlcnJpdG9yeVxuICAgIH0pXG4gICAgcmV0dXJuICEhdW5pdFxuICB9XG59ICgpXG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGgqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1hcFRpdGxlOiAnQ2xhc3NpYycsXG4gIHZpZXdCb3g6ICcwIDAgNjA5IDU1OScsXG4gIHRlcnJpdG9yaWVzOiBbXG4gICAge1xuICAgICAgdGl0bGU6ICdBZHJpYXRpY19TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAzMjIgNDgwIEwgMjk3IDQ1NiBMIDMwMCA0NTMgTCAyOTAgNDUzIEwgMjc4IDQ0MyBMIDI3MiA0MjQgTCAyNjAgNDE3IEwgMjYxIDQwMSBMIDI3MCAzOTggTCAyNzYgMzk5IEwgMjc1IDQwMyBMIDI3OCA0MTAgTCAyODIgNDAxIEwgMjg2IDQwMiBMIDI4OSA0MTggTCAzMDYgNDM2IEwgMzMxIDQ1NCBMIDMzMSA0NzcgTCAzMzUgNDgwIEwgMzIyIDQ4MGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI4MCcsXG4gICAgICAgIHk6ICc0MjcnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQWVnZWFuX1NlYScsXG4gICAgICB0aWxlVHlwZTogJ3NlYVRpbGUnLFxuICAgICAgaWQ6ICd3JyxcbiAgICAgIHBhdGg6IGBNIDM3NiA1MzcgTCAzNzEgNTIwIEwgMzc4IDUyMSBMIDM3NyA1MTMgTCAzODYgNTE2IEwgMzg1IDUwOSBMIDM3MCA0OTQgTCAzNzEgNDkxIEwgMzc4IDQ5NCBMIDM2OCA0ODMgTCAzNzEgNDc3IEwgMzc5IDQ4NCBMIDM4MiA0ODMgTCAzODEgNDc3IEwgMzg2IDQ3OCBMIDM4MCA0NzIgTCAzOTIgNDcyIEwgNDAwIDQ2OCBMIDQwOCA0NzAgTCA0MTAgNDczIEwgNDE0IDQ3NSAgICAgICBMIDQxMCA0ODIgTCA0MDkgNDg3IEwgNDE3IDQ4NiBMIDQxNyA0ODkgTCA0MjAgNDk1IEwgNDE3IDQ5OCBMIDQxNyA1MDcgTCA0MjMgNTEwIEwgNDI3IDUyNCBMIDQzNSA1MjMgTCA0MzUgNTMwIEwgNDE2IDU0OSBMIDQxMiA1NDcgTCAzODcgNTQ2IEwgMzgzIDU0NCBMIDM3NiA1MzdgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICczOTQnLFxuICAgICAgICB5OiAnNTEwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0JhbHRpY19TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAyNjYgMjU1IEwgMjcxIDI2MCBMIDI3OCAyNTQgTCAyNzcgMjUwIEwgMjgwIDI0OCBMIDI3OSAyNDMgTCAyODIgMjUzIEwgMjg5IDI1NCBMIDI5NCAyNDUgTCAzMDUgMjQ0IEwgMzEyIDIyOSBMIDMxMSAyMjAgTCAzNTkgMjIwIEwgMzQ5IDIyOSBMIDM0NyAyNDMgTCAzNDcgMjQ4IEwgMzQ4IDI1NCBMIDM0NCAyNjIgTCAzMzcgMjY0IEwgMzM0IDI3MyBMIDMyOCAyNzQgICAgICAgTCAzMjYgMjY1IEwgMzE0IDI2NiBMIDMwNyAyNzMgTCAyOTQgMjc1IEwgMjg2IDI3NCBMIDI4NyAyNjcgTCAyODAgMjY2IEwgMjY2IDI3NSBMIDI2MSAyNzQgTCAyNjAgMjY5IEwgMjU2IDI2NiBMIDI1NiAyNjMgTCAyNTQgMjU1IEwgMjY2IDI1NWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzMwMCcsXG4gICAgICAgIHk6ICcyNTcnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQmFyZW50c19TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSA1NDAgMCBMIDUzNSA5IEwgNTMwIDYgTCA1MTcgMTkgTCA1MTYgMzMgTCA1MTMgMzggTCA1MTMgMjMgTCA1MDcgMjAgTCA1MDUgMjYgTCA0OTkgMzMgTCA0OTIgNDggTCA0OTUgNTggTCA0ODggNjAgTCA0NzkgNTcgTCA0NzcgNTUgTCA0ODEgNTAgTCA0NzMgNDMgTCA0NjYgNDUgTCA0NzIgNjIgTCA0NzggNjYgTCA0NzggNzQgTCA0NzIgNzIgTCA0NjggNzQgTCA0NTcgOTEgICAgICAgTCA0NjkgMTAwIEwgNDY3IDEwNiBMIDQ2MiAxMDkgTCA0NDQgMTAxIEwgNDQyIDExMCBMIDQ0NyAxMTUgTCA0NTQgMTE5IEwgNDUyIDEyMiBMIDQzNCAxMTggTCA0MjYgMTAzIEwgNDI2IDk0IEwgNDE0IDg4IEwgNDEyIDgzIEwgNDQ1IDg0IEwgNDU3IDc5IEwgNDU5IDY2IEwgNDUzIDYxIEwgNDE3IDQ3IEwgNDA1IDQ5IEwgNDAxIDQ1IEwgMzk3IDQ4IEwgMzkxIDQ3IEwgMzk1IDQxIEwgMzk0IDM4IEwgMzg0IDMzIEwgMzgyIDQwICAgICAgIEwgMzgwIDMzIEwgMzc3IDMxIEwgMzc0IDM4IEwgMzcxIDMzIEwgMzY2IDQyIEwgMzY2IDMzIEwgMzYyIDMzIEwgMzYyIDAgTCA1NDAgMGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzQ0MCcsXG4gICAgICAgIHk6ICcxNScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdCbGFja19TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSA0NDAgNDU4IEwgNDMwIDQ1NSBMIDQyNiA0NTAgTCA0MjIgNDQxIEwgNDI1IDQyNyBMIDQyOSA0MjYgTCA0MzAgNDIzIEwgNDMyIDQwOSBMIDQzOSA0MDQgTCA0MzggMzk3IEwgNDQ2IDM3OCBMIDQ1OSAzNzUgTCA0NjEgMzc3IEwgNDU5IDM3OSBMIDQ2NSAzODMgTCA0NzYgMzgxIEwgNDc4IDM4MyBMIDQ3MiAzODUgTCA0NjggMzkyIEwgNDc3IDM5NiBMIDQ3NyA0MDEgICAgICAgTCA0ODYgNDA0IEwgNDg4IDM5NyBMIDQ5NCAzOTYgTCA0OTcgMzkyIEwgNTA3IDM4OSBMIDUwNiAzODQgTCA0OTQgMzg3IEwgNDg1IDM3OCBMIDUwMyAzNjQgTCA1MjYgMzUxIEwgNTI3IDM1NCBMIDUxNCAzNjUgTCA1MTcgMzcxIEwgNTIwIDM3MSBMIDUxNSAzODQgTCA1MTEgMzgzIEwgNTEwIDM4NiBMIDUxNyAzOTMgTCA1MjggMzk0IEwgNTU0IDQwNiBMIDU2NyA0MDggTCA1NzMgNDE3IEwgNTcwIDQyNyBMIDU1NSA0MzggICAgICAgTCA1NTEgNDM3IEwgNTIwIDQ0MSBMIDUxNCA0MzggTCA1MTEgNDQwIEwgNTAyIDQzMyBMIDQ4MSA0MzggTCA0NzAgNDQ3IEwgNDY0IDQ1NyBMIDQ0MiA0NjAgTCA0NDAgNDU4YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnNDgwJyxcbiAgICAgICAgeTogJzQyMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdFYXN0ZXJuX01lZGl0ZXJyYW5lYW4nLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSA0MzUgNTMwIEwgNDQxIDUyNiBMIDQ0NyA1MjggTCA0NTMgNTM0IEwgNDY0IDUzMSBMIDQ2NiA1MjEgTCA0NzUgNTIwIEwgNDg1IDUyOCBMIDQ5MSA1MzAgTCA1MDUgNTI2IEwgNTExIDUxNCBMIDUyMCA1MTcgTCA1MjcgNTA4IEwgNTMwIDUwOSBMIDUyNSA1MTggTCA1MjYgNTMwIEwgNTMyIDUzNSBMIDUyOCA1NTkgTCA0MDAgNTU5IEwgNDAwIDU1NCBMIDQxNCA1NTIgTCA0MTYgNTQ5IEwgNDM1IDUzMGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzQzNScsXG4gICAgICAgIHk6ICc1NDgnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnRW5nbGlzaF9DaGFubmVsJyxcbiAgICAgIHRpbGVUeXBlOiAnc2VhVGlsZScsXG4gICAgICBpZDogJ3cnLFxuICAgICAgcGF0aDogYE0gMTczIDMwMSBMIDE2OSAzMTEgTCAxNTMgMzE1IEwgMTU1IDMyMCBMIDE1MCAzMTkgTCAxNDQgMzE4IEwgMTQyIDMxMiBMIDEzNiAzMTAgTCAxMzYgMzI2IEwgMTI0IDMyMyBMIDEyMiAzMTggTCAxMDIgMzE3IEwgODggMzAzIEwgMTAwIDI5MSBMIDExMCAyOTIgTCAxMjAgMjk1IEwgMTI0IDI5MSBMIDEzNCAyOTQgTCAxNDcgMjk1IEwgMTYwIDI5OCBMIDE2OCAyOTYgTCAxNzMgMzAxYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTA1JyxcbiAgICAgICAgeTogJzMwOCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdHdWxmX29mX0x5b24nLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAxMTUgNDY5IEwgMTEwIDQ2MSBMIDEyNCA0NDQgTCAxMzEgNDM5IEwgMTQ2IDQzOCBMIDE1NyA0MzIgTCAxNTggNDI1IEwgMTU4IDQxOCBMIDE2OSA0MTIgTCAxNzYgNDE3IEwgMTg4IDQyMiBMIDE5OCA0MjEgTCAyMTEgNDE2IEwgMjIyIDQxMCBMIDIzMyA0MTUgTCAyMzggNDMxIEwgMjI0IDQzMSBMIDIyMSA0MzQgTCAyMTEgNDM2IEwgMjEzIDQ1MSBMIDIxOCA0NTQgICAgICAgTCAyMTggNDU4IEwgMjE0IDQ2MSBMIDIwNiA0NjIgTCAyMDUgNDY2IEwgMTU0IDQ2NiBMIDE0OCA0NjMgTCAxNDIgNDY5IEwgMTE1IDQ2OWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzE2MCcsXG4gICAgICAgIHk6ICc0NTAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnR3VsZl9vZl9Cb3RobmlhJyxcbiAgICAgIHRpbGVUeXBlOiAnc2VhVGlsZScsXG4gICAgICBpZDogJ3cnLFxuICAgICAgcGF0aDogYE0gMzExIDIyMCBMIDMxNCAyMDkgTCAzMjIgMjA2IEwgMzI4IDIwMyBMIDMzMSAxOTMgTCAzMjYgMTgzIEwgMzIwIDE4MiBMIDMyMSAxNjEgTCAzMzAgMTQ2IEwgMzQzIDEzOCBMIDM1MSAxMjggTCAzNDcgMTIxIEwgMzQ5IDExMiBMIDM1NSAxMDQgTCAzNjIgMTA3IEwgMzY4IDEwOCBMIDM3MiAxMjAgTCAzNjYgMTIxIEwgMzU5IDEzNiBMIDM0NSAxNTEgTCAzNDcgMTYwICAgICAgIEwgMzUwIDE2NSBMIDM0OCAxNzggTCAzNDkgMTg0IEwgMzU3IDE4NiBMIDM2NSAxOTEgTCAzODQgMTg1IEwgNDAyIDE3NyBMIDQwMyAxODMgTCA0MTEgMTg0IEwgNDE0IDE4NyBMIDQwOCAxODcgTCA0MDAgMTkyIEwgMzk5IDE5NyBMIDM4NyAxOTYgTCAzNzEgMTk4IEwgMzY5IDIwMiBMIDM2NSAyMDQgTCAzNjggMjEwIEwgMzcyIDIxMyBMIDM3MyAyMjEgTCAzNzcgMjI3IEwgMzczIDIyOSBMIDM2NiAyMjggTCAzNTkgMjIwIEwgMzExIDIyMGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzMyOCcsXG4gICAgICAgIHk6ICcxNzUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnSGVsZ29sYW5kX0JpZ2h0JyxcbiAgICAgIHRpbGVUeXBlOiAnc2VhVGlsZScsXG4gICAgICBpZDogJ3cnLFxuICAgICAgcGF0aDogYE0gMjQ1IDIzNyBMIDI0MyAyNDcgTCAyNDQgMjU0IEwgMjQzIDI1NyBMIDI0NSAyNjMgTCAyNDQgMjcwIEwgMjQ0IDI3MyBMIDIzNSAyNzcgTCAyMzQgMjc0IEwgMjMwIDI3MyBMIDIyNiAyNzUgTCAyMTEgMjc0IEwgMjExIDIzNyBMIDI0NSAyMzdgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMjAnLFxuICAgICAgICB5OiAnMjY1JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0lvbmlhbl9TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAyODkgNTExIEwgMjkwIDUxNCBMIDI5NSA1MTUgTCAzMDggNTAwIEwgMzExIDQ5MSBMIDMwNCA0ODQgTCAzMTAgNDgwIEwgMzE4IDQ4NSBMIDMyMiA0ODUgTCAzMjIgNDgwIEwgMzM1IDQ4MCBMIDMzOSA0ODcgTCAzNDYgNDk4IEwgMzUwIDQ5OCBMIDM0NyA1MDAgTCAzNTIgNTA4IEwgMzY3IDUwNyBMIDM3MSA1MTEgTCAzNTUgNTEwIEwgMzUwIDUxNCBMIDM1NyA1MjEgICAgICAgTCAzNTkgNTMzIEwgMzYwIDUyOCBMIDM2NyA1MzYgTCAzNjggNTMxIEwgMzc2IDUzNyBMIDM4MyA1NDQgTCAzODAgNTQ3IEwgMzgzIDU1MCBMIDQwMCA1NTQgTCA0MDAgNTU5IEwgMjMyIDU1OSBMIDIzNCA1NTEgTCAyMzIgNTQ0IEwgMjI1IDUzNSBMIDIzMSA1MzEgTCAyMzYgNTI0IEwgMjQ3IDUxMyBMIDI1OCA1MTkgTCAyNzMgNTMxIEwgMjgxIDUzMiBMIDI4MiA1MjEgTCAyODUgNTEzIEwgMjg1IDUxMSBMIDI4OSA1MTFgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICczMDUnLFxuICAgICAgICB5OiAnNTM1JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0lyaXNoX1NlYScsXG4gICAgICB0aWxlVHlwZTogJ3NlYVRpbGUnLFxuICAgICAgaWQ6ICd3JyxcbiAgICAgIHBhdGg6IGBNIDEwMCAyOTEgTCAxMTIgMjg3IEwgMTIyIDI4MSBMIDEzMCAyODIgTCAxMjcgMjc2IEwgMTE5IDI3MiBMIDExNiAyNzIgTCAxMTUgMjY1IEwgMTI4IDI2MiBMIDEyNiAyNTYgTCAxMjEgMjU3IEwgMTMyIDI1MCBMIDEzNSAyNTAgTCAxMzkgMjQwIEwgMTM2IDIyOSBMIDEzMCAyMjcgTCAxMjAgMjI3IEwgMTEwIDIzMiBMIDEwOSAyNDYgTCA5OCAyNTkgTCA4NyAyNTcgICAgICAgTCA3MCAyNjEgTCA1OCAyNzMgTCA4OCAzMDMgTCAxMDAgMjkxYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnODAnLFxuICAgICAgICB5OiAnMjc1JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ01pZF9BdGxhbnRpY19PY2VhbicsXG4gICAgICB0aWxlVHlwZTogJ3NlYVRpbGUnLFxuICAgICAgaWQ6ICd3JyxcbiAgICAgIHBhdGg6IGBNIDEwMiAzMTcgTCAxMDAgMzIyIEwgMTAzIDMyOCBMIDEwOSAzMjkgTCAxMjMgMzQ0IEwgMTIyIDM1MCBMIDEyMyAzNTcgTCAxMjggMzYzIEwgMTIxIDM4MiBMIDEyMiAzODQgTCAxMTIgMzk5IEwgMTAxIDM5NiBMIDk2IDM5NyBMIDcyIDM4NCBMIDU5IDM4MSBMIDU0IDM3NSBMIDQ4IDM3NCBMIDQ2IDM3OCBMIDM5IDM3NSBMIDMzIDM4MSBMIDM1IDM4NCBMIDMyIDM5NiAgICAgICBMIDMwIDQwNiBMIDE3IDQyNyBMIDE0IDQyNyBMIDEwIDQzMyBMIDEzIDQ0MCBMIDE1IDQ0MSBMIDEyIDQ1MCBMIDEzIDQ1NCBMIDggNDYyIEwgMTkgNDY5IEwgMjcgNDY4IEwgMzMgNDc1IEwgMzQgNDg0IEwgMzcgNDkwIEwgMzcgNDk1IEwgMzMgNDk2IEwgMTcgNTE4IEwgMCA1MjAgTCAwIDI3MyBMIDU4IDI3MyBMIDEwMiAzMTdgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyNScsXG4gICAgICAgIHk6ICczNDUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnTm9ydGhfQXRsYW50aWNfT2NlYW4nLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSA3MCAyNjEgTCA2NCAyNTAgTCA2NyAyNDIgTCA3MSAyNDUgTCA4MSAyMzQgTCA3NCAyMjggTCA4MCAyMjUgTCA3OCAyMTggTCA4MiAyMTcgTCA4OSAyMjAgTCA5NCAyMjAgTCA5NSAyMTggTCA5NCAyMTYgTCA5NyAyMTYgTCAxMDEgMjEyIEwgMTEwIDIxMiBMIDExOSAyMTcgTCAxMjAgMjI3IEwgMTMwIDIyNyBMIDEzMCAyMjMgTCAxMzggMjE3IEwgMTM4IDIxNCAgICAgICBMIDEzMCAyMDggTCAxMjkgMTk3IEwgMTM5IDE4OSBMIDE0MCAxODIgTCAxNDggMTc3IEwgMTQ4IDAgTCAwIDAgTCAwIDI3MyBMIDU4IDI3MyBMIDcwIDI2MWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzQwJyxcbiAgICAgICAgeTogJzEyMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdOb3J0aF9TZWEnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAxNjggMjk2IEwgMTcyIDI5NCBMIDE2NSAyOTMgTCAxNzYgMjgzIEwgMTc4IDI3NCBMIDE3NyAyNzAgTCAxNzEgMjY4IEwgMTY4IDI3MCBMIDE2NiAyNjkgTCAxNjkgMjY1IEwgMTcwIDI1MiBMIDE2OCAyNDYgTCAxNjMgMjM5IEwgMTYzIDIyNiBMIDE2MSAyMTggTCAxNTcgMjE2IEwgMTUxIDIxNSBMIDE1OCAyMTQgTCAxNjUgMjEwIEwgMTcwIDIwMiBMIDE3MSAxOTcgTCAxNzEgMTgxICAgICAgIEwgMTk4IDE1NCBMIDIzNiAxNTQgTCAyMzcgMTYwIEwgMjMzIDE2NyBMIDIzMSAxODAgTCAyMzMgMTg2IEwgMjI5IDE5MiBMIDIzMSAyMDEgTCAyNDEgMjA5IEwgMjQxIDIyNCBMIDI0OCAyMjQgTCAyNDUgMjM3IEwgMjExIDIzNyBMIDIxMSAyNzQgTCAyMDcgMjc5IEwgMjA1IDI3OSBMIDIwNSAyNzYgTCAxOTggMjg5IEwgMTkxIDI5OSBMIDE3MyAzMDEgTCAxNjggMjk2YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTkwJyxcbiAgICAgICAgeTogJzIzMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdOb3J3ZWdpYW5fU2VhJyxcbiAgICAgIHRpbGVUeXBlOiAnc2VhVGlsZScsXG4gICAgICBpZDogJ3cnLFxuICAgICAgcGF0aDogYE0gMzYyIDMzIEwgMzU3IDM5IEwgMzQzIDQ0IEwgMzI0IDU0IEwgMzIwIDY0IEwgMzEwIDc1IEwgMzA5IDg0IEwgMzAzIDg2IEwgMjkyIDExMSBMIDI3NyAxMzIgTCAyNjkgMTM0IEwgMjY0IDE0MiBMIDI1OCAxNDEgTCAyMzYgMTU0IEwgMTk4IDE1NCBMIDE3MSAxODEgTCAxNzEgMTk3IEwgMTU4IDE5MyBMIDE1MiAxOTQgTCAxNTQgMTg4IEwgMTYxIDE4NSBMIDE2MiAxODEgICAgICAgTCAxNDggMTc3IEwgMTQ4IDAgTCAzNjIgMCBMIDM2MiAzM2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzIyMCcsXG4gICAgICAgIHk6ICc3MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTa2FnZXJyYWsnLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAyNDEgMjA5IEwgMjQ2IDIxMCBMIDI2NiAyMDEgTCAyNzAgMTkzIEwgMjc1IDIwMyBMIDI3NyAyMTggTCAyNzYgMjI0IEwgMjgyIDIzNiBMIDI3OSAyNDAgTCAyNzkgMjQzIEwgMjc1IDI0MiBMIDI2OSAyNDMgTCAyNjYgMjQwIEwgMjY3IDIzNCBMIDI2NiAyMjEgTCAyNjMgMjIzIEwgMjQ4IDIyNCBMIDI0MSAyMjQgTCAyNDEgMjA5YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjU1JyxcbiAgICAgICAgeTogJzIyMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdUeXJyaGVuaWFuX1NlYScsXG4gICAgICB0aWxlVHlwZTogJ3NlYVRpbGUnLFxuICAgICAgaWQ6ICd3JyxcbiAgICAgIHBhdGg6IGBNIDIzOCA0MzEgTCAyNDcgNDQyIEwgMjQ4IDQ0NyBMIDI1NiA0NTggTCAyNzEgNDY0IEwgMjc2IDQ3NCBMIDI5MCA0ODcgTCAyOTQgNTAyIEwgMjg5IDUxMSBMIDI4NSA1MTEgTCAyODUgNTA4IEwgMjc2IDUxMCBMIDI2MyA1MTAgTCAyNTcgNTA3IEwgMjUyIDUwOCBMIDI0NyA1MTMgTCAyMzYgNTI0IEwgMjMzIDUyMyBMIDIyNCA1MjcgTCAyMjMgNTE4ICAgICAgIEwgMjE4IDUxNiBMIDIxOCA0OTAgTCAyMjAgNDkwIEwgMjI0IDQ2OCBMIDIyMiA0NTggTCAyMTggNDU4IEwgMjE4IDQ1NCBMIDIyMyA0NTAgTCAyMjUgNDQ0IEwgMjI1IDQzNiBMIDIyNCA0MzEgTCAyMzggNDMxYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjMwJyxcbiAgICAgICAgeTogJzQ5NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdXZXN0ZXJuX01lZGl0ZXJyYW5lYW4nLFxuICAgICAgdGlsZVR5cGU6ICdzZWFUaWxlJyxcbiAgICAgIGlkOiAndycsXG4gICAgICBwYXRoOiBgTSAzNyA0OTAgTCA0NyA0ODggTCA1MiA0ODkgTCA2MCA0ODYgTCA3OCA0OTEgTCA4MyA0OTQgTCA4NiA0ODUgTCA5MCA0ODMgTCA5OCA0ODQgTCAxMDcgNDc0IEwgMTEzIDQ3MyBMIDExNSA0NjkgTCAxNDIgNDY5IEwgMTUwIDQ3MSBMIDE1NCA0NjYgTCAyMDUgNDY2IEwgMjA2IDQ3NiBMIDIwNCA0ODUgTCAyMDggNDkyIEwgMjEyIDQ5MiBMIDIxNyA0ODkgTCAyMTggNDkwICAgICAgIEwgMjE4IDUxNiBMIDIxMiA1MTcgTCAyMDggNTIxIEwgMjAzIDUyMCBMIDE3OSA1MTUgTCAxNjkgNTE4IEwgMTUwIDUxMSBMIDExNyA1MDkgTCAxMDYgNTExIEwgOTkgNTE1IEwgODkgNTEyIEwgODQgNTE4IEwgNzkgNTIwIEwgNjggNTE2IEwgNjggNTExIEwgNjQgNTE0IEwgNDYgNTA5IEwgNDIgNTAyIEwgNDEgNDk0IEwgMzcgNDk1IEwgMzcgNDkwYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTEwJyxcbiAgICAgICAgeTogJzQ5NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgLy8gIE5ldXRyYWwgVGVycml0b3JpZXNcbiAgICB7XG4gICAgICB0aXRsZTogJ1N3aXR6ZXJsYW5kJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdzJyxcbiAgICAgIHBhdGg6IGBNIDIwOSAzNjMgTCAyMDggMzY3IEwgMTk0IDM4MiBMIDE5NyAzODUgTCAyMDMgMzc5IEwgMjA3IDM4NiBMIDIxMyAzODcgTCAyMjEgMzg1IEwgMjI3IDM5MCBMIDIyOSAzODUgTCAyNDMgMzg4IEwgMjQ1IDM4NCBMIDI0MSAzNzggTCAyMzQgMzc0IEwgMjM0IDM2NiBMIDIzMiAzNjMgTCAyMjUgMzYyIEwgMjIyIDM2NSBMIDIwOSAzNjNgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMTUnLFxuICAgICAgICB5OiAnMzc4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0lyZWxhbmQnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ3MnLFxuICAgICAgcGF0aDogYE0gNzAgMjYxIEwgNjQgMjUwIEwgNjcgMjQyIEwgNzEgMjQ1IEwgODEgMjM0IEwgNzQgMjI4IEwgODAgMjI1IEwgNzggMjE4IEwgODIgMjE3IEwgODkgMjIwIEwgOTQgMjIwIEwgOTUgMjE4IEwgOTQgMjE2IEwgOTcgMjE2IEwgMTAxIDIxMiBMIDExMCAyMTIgTCAxMTkgMjE3IEwgMTIwIDIyNyBMIDEyMCAyMjcgTCAxMTAgMjMyIEwgMTA5IDI0NiBMIDk4IDI1OSBMIDg3IDI1NyBMIDcwIDI2MWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzIxNScsXG4gICAgICAgIHk6ICczNzgnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQ29yc2ljYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAncycsXG4gICAgICBwYXRoOiBgYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjE1JyxcbiAgICAgICAgeTogJzM3OCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTYXJkaW5pYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAncycsXG4gICAgICBwYXRoOiBgYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjE1JyxcbiAgICAgICAgeTogJzM3OCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdNYWxsb3JjYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAncycsXG4gICAgICBwYXRoOiBgTSAxNTQgNDY2IEwgMTQ4IDQ2MyBMIDE0MiA0NjkgTCAxNTAgNDcxIEwgMTU0IDQ2NmAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzIxNScsXG4gICAgICAgIHk6ICczNzgnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnU2ljaWx5JyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdzJyxcbiAgICAgIHBhdGg6IGBgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMTUnLFxuICAgICAgICB5OiAnMzc4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0NyZXRlJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdzJyxcbiAgICAgIHBhdGg6IGBgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMTUnLFxuICAgICAgICB5OiAnMzc4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvLyAgTGFuZCBUZXJyaXRvcmllc1xuICAgIHtcbiAgICAgIHRpdGxlOiAnQWxiYW5pYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBBbGJhbmlhJyxcbiAgICAgIHBhdGg6IGBNIDMzMSA0NTQgTCAzMzEgNDc3IEwgMzM1IDQ4MCBMIDMzOSA0ODcgTCAzNTAgNDc3IEwgMzUwIDQ3MSBMIDM0NiA0NjYgTCAzNDYgNDUyIEwgMzM3IDQ0NiBMIDMzMCA0NDUgTCAzMzEgNDU0YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzM3JyxcbiAgICAgICAgeTogJzQ2OScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdBbmthcmEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgQW5rYXJhJyxcbiAgICAgIHBhdGg6IGBNIDU1NSA0MzggTCA1NTEgNDM3IEwgNTIwIDQ0MSBMIDUxNCA0MzggTCA1MTEgNDQwIEwgNTAyIDQzMyBMIDQ4MSA0MzggTCA0NzAgNDQ3IEwgNDY0IDQ1NyBMIDQ2OCA0NjEgTCA0NjggNDc5IEwgNDY2IDQ5MSBMIDQ3MyA0OTEgTCA0OTAgNDgwIEwgNTAxIDQ4MiBMIDUwOCA0ODAgTCA1MzEgNDYwIEwgNTQ2IDQ2MiBMIDU1NSA0NjAgTCA1NTcgNDQ5IEwgNTU1IDQzOGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzUxMCcsXG4gICAgICAgIHk6ICc0NTUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQXB1bGlhJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEFwdWxpYScsXG4gICAgICBwYXRoOiBgTSAzMDQgNDg0IEwgMzEwIDQ4MCBMIDMxOCA0ODUgTCAzMjIgNDg1IEwgMzIyIDQ4MCBMIDI5NyA0NTYgTCAzMDAgNDUzIEwgMjkwIDQ1MyBMIDI3OCA0NDMgTCAyNzQgNDQ3IEwgMjc5IDQ1MSBMIDI4MCA0NTUgTCAyNzkgNDU4IEwgMjkzIDQ4MSBMIDMwNCA0ODRgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyODInLFxuICAgICAgICB5OiAnNDY3JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0FybWVuaWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgQXJtZW5pYScsXG4gICAgICBwYXRoOiBgTSA2MDkgNDkzIEwgNTg0IDQ3OCBMIDU2MyA0NzkgTCA1NjIgNDcxIEwgNTU2IDQ2NyBMIDU1NSA0NjAgTCA1NTcgNDQ5IEwgNTU1IDQzOCBMIDU3MCA0MjcgTCA1ODkgNDQyIEwgNTk0IDQzOSBMIDYwMyA0NDEgTCA2MDkgNDQwIEwgNjA5IDQ5M2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzU3MicsXG4gICAgICAgIHk6ICc0NjMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQmVsZ2l1bScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBCZWxnaXVtJyxcbiAgICAgIHBhdGg6IGBNIDE5MSAyOTkgTCAxOTQgMzAzIEwgMjA2IDMwNiBMIDIwNSAzMTEgTCAyMDggMzE1IEwgMjEwIDMyNiBMIDIwNSAzMzEgTCAxOTIgMzIzIEwgMTg0IDMxNSBMIDE2OSAzMTEgTCAxNzMgMzAxIEwgMTkxIDI5OWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzE5MicsXG4gICAgICAgIHk6ICczMTYnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQmVybGluJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEJlcmxpbicsXG4gICAgICBwYXRoOiBgTSAyOTQgMjc1IEwgMjg2IDI3NCBMIDI4NyAyNjcgTCAyODAgMjY2IEwgMjY2IDI3NSBMIDI2NiAyODMgTCAyNjIgMjg3IEwgMjY0IDI5MyBMIDI2MSAyOTYgTCAyNjMgMzEwIEwgMjg4IDMwNSBMIDI5NiAzMDAgTCAyOTcgMjk2IEwgMjkyIDI5MCBMIDI5NCAyNzVgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyNzInLFxuICAgICAgICB5OiAnMjkyJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0JvaGVtaWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgQm9oZW1pYScsXG4gICAgICBwYXRoOiBgTSAyODEgMzU2IEwgMjc2IDM0NiBMIDI2OCAzNDMgTCAyNjQgMzI5IEwgMjY2IDMyNSBMIDI3OCAzMjYgTCAyODggMzIxIEwgMjk3IDMyMiBMIDMxMSAzMzQgTCAzMTQgMzMyIEwgMzIxIDMzOSBMIDMyMiAzNDcgTCAzMTYgMzQ4IEwgMzAzIDM0NiBMIDI5NSAzNDkgTCAyOTIgMzU3IEwgMjgxIDM1NmAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI3OCcsXG4gICAgICAgIHk6ICczMzgnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQnJlc3QnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgQnJlc3QnLFxuICAgICAgcGF0aDogYE0gMTUwIDMxOSBMIDE0NCAzMTggTCAxNDIgMzEyIEwgMTM2IDMxMCBMIDEzNiAzMjYgTCAxMjQgMzIzIEwgMTIyIDMxOCBMIDEwMiAzMTcgTCAxMDAgMzIyIEwgMTAzIDMyOCBMIDEwOSAzMjkgTCAxMjMgMzQ0IEwgMTIyIDM1MCBMIDEyMyAzNTcgTCAxMjggMzYzIEwgMTQ2IDM2NSBMIDE0NiAzMzcgTCAxNDggMzI5IEwgMTUwIDMxOWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzEzMCcsXG4gICAgICAgIHk6ICczNDUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQnVkYXBlc3QnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgQnVkYXBlc3QnLFxuICAgICAgcGF0aDogYE0gMzk0IDM3NiBMIDM5NSAzODIgTCA0MDEgMzg1IEwgNDA2IDM5NiBMIDQwMSA0MDIgTCAzODcgNDAyIEwgMzY3IDQwNiBMIDM2NSA0MTIgTCAzNjAgNDEzIEwgMzQyIDQxMCBMIDMzOCA0MTIgTCAzMzUgNDEwIEwgMzMyIDQxMCBMIDMyMyA0MDggTCAzMjEgMzk4IEwgMzExIDM5NCBMIDMwOCAzODMgTCAzMTEgMzc1IEwgMzIyIDM3MCBMIDMzNSAzNTQgTCAzMzcgMzUwICAgICAgIEwgMzUwIDM0NyBMIDM2MCAzNTEgTCAzNjggMzUzIEwgMzc3IDM2MCBMIDM3OCAzNjMgTCAzODQgMzY1IEwgMzk0IDM3NmAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzM1MCcsXG4gICAgICAgIHk6ICczOTAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQnVsZ2FyaWFfX2VjJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsJyxcbiAgICAgIHBhdGg6IGBNIDQxMyA0NjQgTCA0MTIgNDU0IEwgNDIwIDQ1MSBMIDQyNiA0NTAgTCA0MjIgNDQxIEwgNDI1IDQyNyBMIDQyOSA0MjYgTCA0MzAgNDIzIEwgNDIyIDQyMCBMIDQxMCA0MjAgTCA0MDQgNDIyIEwgMzk4IDQyNyBMIDM5MCA0MjUgTCAzODIgNDI3IEwgMzc1IDQyMyBMIDM3MCA0MjUgTCAzNjcgNDIxIEwgMzY1IDQyNSBMIDM2OCA0MzMgTCAzNzEgNDM4IEwgNDEzIDQ2NGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzM5NScsXG4gICAgICAgIHk6ICc0NDMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQnVsZ2FyaWFfX3NjJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsJyxcbiAgICAgIHBhdGg6IGBNIDM3MSA0MzggTCAzNjYgNDM5IEwgMzcxIDQ1NiBMIDM2NSA0NjEgTCAzNjkgNDY0IEwgMzc2IDQ2NCBMIDM4OCA0NjAgTCAzOTIgNDcyIEwgNDAwIDQ2OCBMIDQwOCA0NzAgTCA0MTMgNDY0IEwgMzcxIDQzOGAsXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0J1cmd1bmR5JyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEJ1cmd1bmR5JyxcbiAgICAgIHBhdGg6IGBNIDE5MiAzMjMgTCAyMDUgMzMxIEwgMjA0IDMzOCBMIDIxMSAzNDYgTCAyMTMgMzUyIEwgMjA5IDM2MyBMIDIwOCAzNjcgTCAxOTQgMzgyIEwgMTc4IDM4MSBMIDE3OCAzOTAgTCAxNzMgMzk2IEwgMTY4IDM5NSBMIDE2MyAzODcgTCAxNjUgMzgzIEwgMTU4IDM4MCBMIDE1NiAzNzQgTCAxNjUgMzY1IEwgMTg1IDM0NCBMIDE4OCAzMzIgTCAxOTIgMzIzYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTcxJyxcbiAgICAgICAgeTogJzM3MScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdDbHlkZScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBDbHlkZScsXG4gICAgICBwYXRoOiBgTSAxMzggMjE0IEwgMTMwIDIwOCBMIDEyOSAxOTcgTCAxMzkgMTg5IEwgMTQwIDE4MiBMIDE0OCAxNzcgTCAxNjIgMTgxIEwgMTYxIDE4NSBMIDE1NCAxODggTCAxNTIgMTk0IEwgMTQ2IDIwMCBMIDE0NCAyMTMgTCAxMzggMjE0YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTMzJyxcbiAgICAgICAgeTogJzIwMScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdDb25zdGFudGlub3BsZScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBDb25zdGFudGlub3BsZScsXG4gICAgICBwYXRoOiBgTSA0MDggNDcwIEwgNDEwIDQ3MyBMIDQxNCA0NzUgTCA0MTAgNDgyIEwgNDA5IDQ4NyBMIDQxNyA0ODYgTCA0MTcgNDg5IEwgNDIzIDQ4NyBMIDQzMiA0OTMgTCA0NTIgNDk1IEwgNDY2IDQ5MSBMIDQ2OCA0NzkgTCA0NjggNDYxIEwgNDY0IDQ1NyBMIDQ0MiA0NjAgTCA0NDAgNDU4IEwgNDMwIDQ1NSBMIDQyNiA0NTAgTCA0MjAgNDUxIEwgNDEyIDQ1NCBMIDQxMyA0NjQgTCA0MDggNDcwYCxcbiAgICAgIC8vIDxwb2x5Z29uIGNsYXNzPVwid1wiIHBvaW50cz1cIkwgNDE0IDQ3NSBMIDQyMSA0NjcgTCA0MzUgNDYzIEwgNDQwIDQ1OCBMIDQ0MiA0NjAgTCA0MzkgNDYzIEwgNDQ4IDQ2NCBMIDQyNSA0NzVcIi8+XG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzQxMCcsXG4gICAgICAgIHk6ICc0ODMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnRGVubWFyaycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBEZW5tYXJrJyxcbiAgICAgIHBhdGg6IGBNIDI3OSAyNDMgTCAyNzUgMjQyIEwgMjY5IDI0MyBMIDI2NiAyNDAgTCAyNjcgMjM0IEwgMjY2IDIyMSBMIDI2MyAyMjMgTCAyNDggMjI0IEwgMjQ1IDIzNyBMIDI0MyAyNDcgTCAyNDQgMjU0IEwgMjU0IDI1NSBMIDI2NiAyNTUgTCAyNzEgMjYwIEwgMjc4IDI1NCBMIDI3NyAyNTAgTCAyODAgMjQ4ICBMIDI3OSAyNDNgLFxuICAgICAgLy8gPHBvbHlnb24gY2xhc3M9XCJ3XCIgcG9pbnRzPVwiTCAyNjkgMjQzIEwgMjY4IDI0NiBMIDI2MyAyNDcgTCAyNjYgMjU1IEwgMjU0IDI1NSBMIDI1NyAyNDcgTCAyNjYgMjQwXCIvPlxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyNTInLFxuICAgICAgICB5OiAnMjM1JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0VkaW5idXJnaCcsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBFZGluYnVyZ2gnLFxuICAgICAgcGF0aDogYE0gMTUyIDE5NCBMIDE1OCAxOTMgTCAxNzEgMTk3IEwgMTcwIDIwMiBMIDE2NSAyMTAgTCAxNTggMjE0IEwgMTUxIDIxNSBMIDE1NyAyMTYgTCAxNjEgMjE4IEwgMTYzIDIyNiBMIDE1NSAyMjggTCAxNDUgMjE3IEwgMTQ0IDIxMyBMIDE0NiAyMDAgTCAxNTIgMTk0YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTU4JyxcbiAgICAgICAgeTogJzIwOScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdGaW5sYW5kJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEZpbmxhbmQnLFxuICAgICAgcGF0aDogYE0gMzYyIDEwNyBMIDM2OCAxMDggTCAzNzIgMTIwIEwgMzY2IDEyMSBMIDM1OSAxMzYgTCAzNDUgMTUxIEwgMzQ3IDE2MCBMIDM1MCAxNjUgTCAzNDggMTc4IEwgMzQ5IDE4NCBMIDM1NyAxODYgTCAzNjUgMTkxIEwgMzg0IDE4NSBMIDQwMiAxNzcgTCA0MTIgMTYxIEwgNDEwIDE1MiBMIDQxNCAxNDcgTCA0MTAgMTMwIEwgNDAyIDExOCBMIDQwMSAxMTAgTCAzOTIgOTIgICAgICAgTCAzOTMgNzMgTCAzODcgNjggTCAzODggNjEgTCAzODYgNTggTCAzODggNTQgTCAzNzkgNDggTCAzNzAgNDkgTCAzNjkgNjEgTCAzNTUgNjIgTCAzNDYgNTQgTCAzNDIgNjEgTCAzNTYgNzEgTCAzNjIgMTA3YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzc1JyxcbiAgICAgICAgeTogJzE2MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdHYWxpY2lhJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEdhbGljaWEnLFxuICAgICAgcGF0aDogYE0gMzMzIDMzMCBMIDM0MSAzMzAgTCAzNDQgMzMyIEwgMzUzIDMyNyBMIDM1NiAzMjMgTCAzNjEgMzI0IEwgMzY3IDMyOSBMIDM3NCAzMjcgTCAzNzkgMzI0IEwgMzgzIDMyNyBMIDM4NSAzMzIgTCAzOTkgMzM4IEwgNDA0IDM1NCBMIDQwMyAzNjAgTCA0MDQgMzcxIEwgMzk0IDM3NiBMIDM4NCAzNjUgTCAzNzggMzYzIEwgMzc3IDM2MCBMIDM2OCAzNTMgTCAzNjAgMzUxICAgICAgIEwgMzUwIDM0NyBMIDMzNyAzNTAgTCAzMjkgMzQ2IEwgMzIyIDM0NyBMIDMyMSAzMzkgTCAzMjIgMzQ3IEwgMzIxIDMzOSBMIDMyNSAzNDAgTCAzMjkgMzM4IEwgMzMzIDMzMGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzM1NScsXG4gICAgICAgIHk6ICczNDMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnR2FzY29ueScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBHYXNjb255JyxcbiAgICAgIHBhdGg6IGBNIDEyOCAzNjMgTCAxMjEgMzgyIEwgMTIyIDM4NCBMIDExMiAzOTkgTCAxMTMgNDA3IEwgMTIzIDQxMiBMIDEzNCA0MTcgTCAxMzUgNDE0IEwgMTQyIDQxNyBMIDE0OSA0MDMgTCAxNTcgMzk3IEwgMTY4IDM5NSBMIDE2MyAzODcgTCAxNjUgMzgzIEwgMTU4IDM4MCBMIDE1NiAzNzQgTCAxNDkgMzcyIEwgMTQ2IDM2NSBMIDEyOCAzNjNgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcxMzAnLFxuICAgICAgICB5OiAnMzkwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0dyZWVjZScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBHcmVlY2UnLFxuICAgICAgcGF0aDogYE0gMzM5IDQ4NyBMIDM0NiA0OTggTCAzNTAgNDk4IEwgMzQ3IDUwMCBMIDM1MiA1MDggTCAzNjcgNTA3IEwgMzcxIDUxMSBMIDM1NSA1MTAgTCAzNTAgNTE0IEwgMzU3IDUyMSBMIDM1OSA1MzMgTCAzNjAgNTI4IEwgMzY3IDUzNiBMIDM2OCA1MzEgTCAzNzYgNTM3IEwgMzcxIDUyMCBMIDM3OCA1MjEgTCAzNzcgNTEzIEwgMzg2IDUxNiBMIDM4NSA1MDkgTCAzNzAgNDk0ICAgICAgIEwgMzcxIDQ5MSBMIDM3OCA0OTQgTCAzNjggNDgzIEwgMzcxIDQ3NyBMIDM3OSA0ODQgTCAzODIgNDgzIEwgMzgxIDQ3NyBMIDM4NiA0NzggTCAzODAgNDcyIEwgMzkyIDQ3MiBMIDM4OCA0NjAgTCAzNzYgNDY0IEwgMzY5IDQ2NCBMIDM2MSA0NjcgTCAzNTYgNDcxIEwgMzUwIDQ3MSBMIDM1MCA0NzcgTCAzMzkgNDg3YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzQ2JyxcbiAgICAgICAgeTogJzQ5MScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdIb2xsYW5kJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEhvbGxhbmQnLFxuICAgICAgcGF0aDogYE0gMjI2IDI3NSBMIDIyNyAyODAgTCAyMjUgMjkyIEwgMjIwIDI5OCBMIDIxNSAyOTcgTCAyMTMgMzAyIEwgMjEwIDMxMyBMIDIwOCAzMTUgTCAyMDUgMzExIEwgMjA2IDMwNiBMIDE5NCAzMDMgTCAxOTEgMjk5IEwgMTk4IDI4OSBMIDIwNSAyNzYgTCAyMDUgMjc5IEwgMjA3IDI3OSBMIDIxMSAyNzQgTCAyMjYgMjc1YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjEwJyxcbiAgICAgICAgeTogJzI5NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdLaWVsJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIEtpZWwnLFxuICAgICAgcGF0aDogYE0gMjQ0IDI1NCBMIDI0MyAyNTcgTCAyNDUgMjYzIEwgMjQ0IDI3MCBMIDI0NCAyNzMgTCAyMzUgMjc3IEwgMjM0IDI3NCBMIDIzMCAyNzMgTCAyMjYgMjc1IEwgMjI3IDI4MCBMIDIyNSAyOTIgTCAyMjAgMjk4IEwgMjE1IDI5NyBMIDIxMyAzMDIgTCAyMzIgMzA4IEwgMjQxIDMxNiBMIDI0MyAzMjIgTCAyNjMgMzEwIEwgMjYxIDI5NiBMIDI2NCAyOTMgICAgICAgTCAyNjIgMjg3IEwgMjY2IDI4MyBMIDI2NiAyNzUgTCAyNjEgMjc0IEwgMjYwIDI2OSBMIDI1NiAyNjYgTCAyNTYgMjYzIEwgMjU0IDI1NSBMIDI0NCAyNTRgLFxuICAgICAgLy8gPHBvbHlnb24gY2xhc3M9XCJ3XCIgcG9pbnRzPVwiTCAyNDQgMjcwIEwgMjQ0IDI3MyBMIDI1NiAyNjYgTCAyNTYgMjYzIFwiLz5cbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjM3JyxcbiAgICAgICAgeTogJzI4NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdMaXZlcnBvb2wnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgTGl2ZXJwb29sJyxcbiAgICAgIHBhdGg6IGBNIDEyOCAyNjIgTCAxMjYgMjU2IEwgMTIxIDI1NyBMIDEzMiAyNTAgTCAxMzUgMjUwIEwgMTM5IDI0MCBMIDEzNiAyMjkgTCAxMzAgMjI3IEwgMTMwIDIyMyBMIDEzOCAyMTcgTCAxMzggMjE0IEwgMTQ0IDIxMyBMIDE0NSAyMTcgTCAxNTUgMjI4IEwgMTU1IDIzOSBMIDE1MSAyNDggTCAxNTAgMjY0IEwgMTQzIDI2MiBMIDEyOCAyNjJgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcxNDAnLFxuICAgICAgICB5OiAnMjMwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0xpdm9uaWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgTGl2b25pYScsXG4gICAgICBwYXRoOiBgTSAzNjkgMjAyIEwgMzY1IDIwNCBMIDM2OCAyMTAgTCAzNzIgMjEzIEwgMzczIDIyMSBMIDM3NyAyMjcgTCAzNzMgMjI5IEwgMzY2IDIyOCBMIDM1OSAyMjAgTCAzNDkgMjI5IEwgMzQ3IDI0MyBMIDM1NCAyNTEgTCAzNTYgMjYxIEwgMzYyIDI2MCBMIDM2NyAyNjUgTCAzNjUgMjgxIEwgMzcyIDI4MyBMIDM3OSAyOTAgTCAzODkgMjg1IEwgMzkyIDI3OCAgICAgICBMIDQwNCAyNzUgTCA0MDUgMjM5IEwgNDA5IDIyOCBMIDQwNSAyMTcgTCAzOTQgMjA1IEwgMzgyIDIwNiBMIDM3MiAyMDUgTCAzNjkgMjAyYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzcwJyxcbiAgICAgICAgeTogJzI1MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdMb25kb24nLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgTG9uZG9uJyxcbiAgICAgIHBhdGg6IGBNIDE2NiAyNjkgTCAxNjggMjcwIEwgMTcxIDI2OCBMIDE3NyAyNzAgTCAxNzggMjc0IEwgMTc2IDI4MyBMIDE2NSAyOTMgTCAxNzIgMjk0IEwgMTY4IDI5NiBMIDE2MCAyOTggTCAxNDcgMjk1IEwgMTQ1IDI4MSBMIDE1MCAyNzcgTCAxNTMgMjcxIEwgMTY2IDI2OWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzE2MCcsXG4gICAgICAgIHk6ICcyODAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnTWFyc2VpbGxlcycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBNYXJzZWlsbGVzJyxcbiAgICAgIHBhdGg6IGBNIDE0MiA0MTcgTCAxNDkgNDAzIEwgMTU3IDM5NyBMIDE2OCAzOTUgTCAxNzMgMzk2IEwgMTc4IDM5MCBMIDE3OCAzODEgTCAxOTQgMzgyIEwgMTk3IDM4NSBMIDIwMyAzNzkgTCAyMDcgMzg2IEwgMjA0IDM5MCBMIDIwNyAzOTYgTCAyMDEgMzk5IEwgMjA0IDQwMiBMIDIwMyA0MTAgTCAyMTEgNDE2IEwgMTk4IDQyMSBMIDE4OCA0MjIgTCAxNzYgNDE3ICAgICAgIEwgMTY5IDQxMiBMIDE1OCA0MTggTCAxNTggNDI1IEwgMTU0IDQyNyBMIDE0MiA0MTdgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcxNjUnLFxuICAgICAgICB5OiAnNDEwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ01vc2NvdycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBNb3Njb3cnLFxuICAgICAgcGF0aDogYE0gNjA5IDExNyBMIDU5OCAxMzIgTCA1NzMgMTQzIEwgNTY0IDE1OSBMIDUzNCAxNjQgTCA1MTUgMTY5IEwgNDg5IDE4NCBMIDQ3NiAxODMgTCA0NTggMTk0IEwgNDU2IDIwNyBMIDQ1NyAyMTAgTCA0NTEgMjEzIEwgNDQ3IDIwOSBMIDQzOSAyMTEgTCA0MjggMjI1IEwgNDIxIDIyOSBMIDQwOSAyMjggTCA0MDUgMjM5IEwgNDA0IDI3NSBMIDM5MiAyNzggICAgICAgTCAzODkgMjg1IEwgMzc5IDI5MCBMIDM4NiAzMDkgTCAzOTAgMzA2IEwgNDU2IDI5MiBMIDQ2OCAyOTUgTCA0NzcgMjg5IEwgNDk0IDI5NSBMIDUwNSAyODAgTCA1MTYgMjg2IEwgNTI2IDI4NyBMIDUzMyAyODMgTCA1NDkgMjg0IEwgNTU0IDMwNCBMIDU2NCAzMDUgTCA1NjkgMzIxIEwgNTk3IDMzMCBMIDYwOSAzMzAgTCA2MDkgMTE3YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnNDYwJyxcbiAgICAgICAgeTogJzI2NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdNdW5pY2gnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgTXVuaWNoJyxcbiAgICAgIHBhdGg6IGBNIDIzNCAzNjYgTCAyNDMgMzcwIEwgMjQ2IDM2OSBMIDI1MCAzNzEgTCAyNjcgMzY4IEwgMjcxIDM3MCBMIDI2OSAzNjIgTCAyNzUgMzYyIEwgMjgxIDM1NiBMIDI3NiAzNDYgTCAyNjggMzQzIEwgMjY0IDMyOSBMIDI2NiAzMjUgTCAyNzggMzI2IEwgMjg4IDMyMSBMIDI4NCAzMTQgTCAyODggMzA1IEwgMjYzIDMxMCBMIDI0MyAzMjIgTCAyMzcgMzIyICAgICAgIEwgMjE5IDM0NCBMIDIxMSAzNDYgTCAyMTMgMzUyIEwgMjA5IDM2MyBMIDIyMiAzNjUgTCAyMjUgMzYyIEwgMjMyIDM2MyBMIDIzNCAzNjZgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMzUnLFxuICAgICAgICB5OiAnMzUwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ05hcGxlcycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBOYXBsZXMnLFxuICAgICAgcGF0aDogYE0gMjcxIDQ2NCBMIDI3NiA0NzQgTCAyOTAgNDg3IEwgMjk0IDUwMiBMIDI4OSA1MTEgTCAyOTAgNTE0IEwgMjk1IDUxNSBMIDMwOCA1MDAgTCAzMTEgNDkxIEwgMzA0IDQ4NCBMIDI5MyA0ODEgTCAyNzkgNDU4IEwgMjcxIDQ2NGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI5MycsXG4gICAgICAgIHk6ICc0OTMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnTm9ydGhfQWZyaWNhJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIE5vcnRoIEFmcmljYScsXG4gICAgICBwYXRoOiBgTSAyMDMgNTIwIEwgMTc5IDUxNSBMIDE2OSA1MTggTCAxNTAgNTExIEwgMTE3IDUwOSBMIDEwNiA1MTEgTCA5OSA1MTUgTCA4OSA1MTIgTCA4NCA1MTggTCA3OSA1MjAgTCA2OCA1MTYgTCA2OCA1MTEgTCA2NCA1MTQgTCA0NiA1MDkgTCA0MiA1MDIgTCA0MSA0OTQgTCAzNyA0OTUgTCAzMyA0OTYgTCAxNyA1MTggTCAwIDUyMCBMIDAgNTU5IEwgMTk1IDU1OSBMIDE5NyA1MjcgTCAyMDMgNTIwYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTAwJyxcbiAgICAgICAgeTogJzU0MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdOb3J3YXknLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgTm9yd2F5JyxcbiAgICAgIHBhdGg6IGBNIDM5NyA0OCBMIDM5MSA0NyBMIDM5NSA0MSBMIDM5NCAzOCBMIDM4NCAzMyBMIDM4MiA0MCBMIDM4MCAzMyBMIDM3NyAzMSBMIDM3NCAzOCBMIDM3MSAzMyBMIDM2NiA0MiBMIDM2NiAzMyBMIDM2MiAzMyBMIDM1NyAzOSBMIDM0MyA0NCBMIDMyNCA1NCBMIDMyMCA2NCBMIDMxMCA3NSBMIDMwOSA4NCBMIDMwMyA4NiBMIDI5MiAxMTEgTCAyNzcgMTMyIEwgMjY5IDEzNCAgICAgICBMIDI2NCAxNDIgTCAyNTggMTQxIEwgMjM2IDE1NCBMIDIzNyAxNjAgTCAyMzMgMTY3IEwgMjMxIDE4MCBMIDIzMyAxODYgTCAyMjkgMTkyIEwgMjMxIDIwMSBMIDI0MSAyMDkgTCAyNDYgMjEwIEwgMjY2IDIwMSBMIDI3MCAxOTMgTCAyNzUgMjAzIEwgMjc5IDIwNCBMIDI4NyAxNzcgTCAyODUgMTcwIEwgMjkwIDE2NCBMIDI5MiAxMzMgTCAzMDEgMTMyIEwgMzAwIDEyNiBMIDMwOSAxMTUgTCAzMDggMTA0IEwgMzExIDEwMSAgICAgICBMIDMyNCA3MSBMIDMzMiA3NCBMIDMzMCA2NCBMIDM0MSA2NSBMIDM0MiA2MSBMIDM0NiA1NCBMIDM1NSA2MiBMIDM2OSA2MSBMIDM3MCA0OSBMIDM3OSA0OCBMIDM4OCA1NCBMIDM4NiA1OCBMIDM4OCA2MSBMIDM5NyA0OGAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI1MCcsXG4gICAgICAgIHk6ICcxNzUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnUGFyaXMnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgUGFyaXMnLFxuICAgICAgcGF0aDogYE0gMTQ2IDM2NSBMIDE0OSAzNzIgTCAxNTYgMzc0IEwgMTY1IDM2NSBMIDE4NSAzNDQgTCAxODggMzMyIEwgMTcyIDMyOCBMIDE2NSAzMzEgTCAxNTkgMzMxIEwgMTQ4IDMyOSBMIDE0NiAzMzcgTCAxNDYgMzY1YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTU1JyxcbiAgICAgICAgeTogJzM1OCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdQaWNhcmR5JyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFBpY2FyZHknLFxuICAgICAgcGF0aDogYE0gMTY5IDMxMSBMIDE1MyAzMTUgTCAxNTUgMzIwIEwgMTUwIDMxOSBMIDE0OCAzMjkgTCAxNTkgMzMxIEwgMTY1IDMzMSBMIDE3MiAzMjggTCAxODggMzMyIEwgMTkyIDMyMyBMIDE4NCAzMTUgTCAxNjkgMzExYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTYwJyxcbiAgICAgICAgeTogJzMyNicsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdQaWVkbW9udCcsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBQaWVkbW9udCcsXG4gICAgICBwYXRoOiBgTSAyMDcgMzg2IEwgMjA0IDM5MCBMIDIwNyAzOTYgTCAyMDEgMzk5IEwgMjA0IDQwMiBMIDIwMyA0MTAgTCAyMTEgNDE2IEwgMjIyIDQxMCBMIDIzMyA0MTUgTCAyMzYgNDExIEwgMjMzIDQwNCBMIDI0NiAzOTIgTCAyNDMgMzg4IEwgMjI5IDM4NSBMIDIyNyAzOTAgTCAyMjEgMzg1IEwgMjEzIDM4NyBMIDIwNyAzODZgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyMTUnLFxuICAgICAgICB5OiAnNDA4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1BvcnR1Z2FsJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFBvcnR1Z2FsJyxcbiAgICAgIHBhdGg6IGBNIDMyIDM5NiBMIDMwIDQwNiBMIDE3IDQyNyBMIDE0IDQyNyBMIDEwIDQzMyBMIDEzIDQ0MCBMIDE1IDQ0MSBMIDEyIDQ1MCBMIDEzIDQ1NCBMIDggNDYyIEwgMTkgNDY5IEwgMjcgNDY4IEwgMzYgNDU3IEwgMzQgNDQ3IEwgNDAgNDQxIEwgMzcgNDMxIEwgNDIgNDMyIEwgNTIgNDEyIEwgNjEgNDExIEwgNjIgNDA3IEwgNTUgNDAwIEwgNDIgMzk5IEwgNDMgMzk1IEwgMzIgMzk2YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTUnLFxuICAgICAgICB5OiAnNDIwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1BydXNzaWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgUHJ1c3NpYScsXG4gICAgICBwYXRoOiBgTSAzNDcgMjQzIEwgMzQ3IDI0OCBMIDM0OCAyNTQgTCAzNDQgMjYyIEwgMzM3IDI2NCBMIDMzNCAyNzMgTCAzMjggMjc0IEwgMzI2IDI2NSBMIDMxNCAyNjYgTCAzMDcgMjczIEwgMjk0IDI3NSBMIDI5MiAyOTAgTCAyOTcgMjk2IEwgMjk2IDMwMCBMIDMyMCAzMDMgTCAzMjQgMjk5IEwgMzI2IDI5MiBMIDM0MSAyODcgTCAzNDUgMjg5IEwgMzU5IDI4NiAgICAgICBMIDM2NSAyODEgTCAzNjcgMjY1IEwgMzYyIDI2MCBMIDM1NiAyNjEgTCAzNTQgMjUxIEwgMzQ3IDI0M2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzMyMCcsXG4gICAgICAgIHk6ICcyODMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnUm9tZScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBSb21lJyxcbiAgICAgIHBhdGg6IGBNIDI0NyA0NDIgTCAyNDggNDQ3IEwgMjU2IDQ1OCBMIDI3MSA0NjQgTCAyNzkgNDU4IEwgMjgwIDQ1NSBMIDI3OSA0NTEgTCAyNzQgNDQ3IEwgMjYzIDQzNCBMIDI1MCA0MzggTCAyNDcgNDQyYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMjU3JyxcbiAgICAgICAgeTogJzQ1MicsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdSdWhyJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFJ1aHInLFxuICAgICAgcGF0aDogYE0gMjEzIDMwMiBMIDIxMCAzMTMgTCAyMDggMzE1IEwgMjEwIDMyNiBMIDIwNSAzMzEgTCAyMDQgMzM4IEwgMjExIDM0NiBMIDIxOSAzNDQgTCAyMzcgMzIyIEwgMjQzIDMyMiBMIDI0MSAzMTYgTCAyMzIgMzA4IEwgMjEzIDMwMmAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzIxNScsXG4gICAgICAgIHk6ICczMzAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnUnVtYW5pYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBSdW1hbmlhJyxcbiAgICAgIHBhdGg6IGBNIDQwMyAzNjAgTCA0MDQgMzcxIEwgMzk0IDM3NiBMIDM5NSAzODIgTCA0MDEgMzg1IEwgNDA2IDM5NiBMIDQwMSA0MDIgTCAzODcgNDAyIEwgMzY3IDQwNiBMIDM2NSA0MTIgTCAzNjcgNDIxIEwgMzcwIDQyNSBMIDM3NSA0MjMgTCAzODIgNDI3IEwgMzkwIDQyNSBMIDM5OCA0MjcgTCA0MDQgNDIyIEwgNDEwIDQyMCBMIDQyMiA0MjAgTCA0MzAgNDIzIEwgNDMyIDQwOSAgICAgICBMIDQzOSA0MDQgTCA0MzggMzk3IEwgNDI3IDM5OSBMIDQyMiAzODIgTCA0MjMgMzc2IEwgNDE0IDM3MiBMIDQxMSAzNjEgTCA0MDMgMzYwYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzkwJyxcbiAgICAgICAgeTogJzQxMCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTZXJiaWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgU2VyYmlhJyxcbiAgICAgIHBhdGg6IGBNIDM2NSA0MTIgTCAzNjAgNDEzIEwgMzQyIDQxMCBMIDMzOCA0MTIgTCAzMzUgNDEwIEwgMzMyIDQxMCBMIDMzMCA0MTYgTCAzMzEgNDI0IEwgMzI3IDQyOSBMIDMzMCA0MzcgTCAzMzcgNDQ2IEwgMzQ2IDQ1MiBMIDM0NiA0NjYgTCAzNTAgNDcxIEwgMzU2IDQ3MSBMIDM2MSA0NjcgTCAzNjkgNDY0IEwgMzY1IDQ2MSBMIDM3MSA0NTYgTCAzNjYgNDM5IEwgMzcxIDQzOCAgICAgICBMIDM2OCA0MzMgTCAzNjUgNDI1IEwgMzY3IDQyMSBMIDM2NSA0MTJgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICczNDAnLFxuICAgICAgICB5OiAnNDQwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1NldmFzdG9wb2wnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgU2V2YXN0b3BvbCcsXG4gICAgICBwYXRoOiBgTSA0MzggMzk3IEwgNDQ2IDM3OCBMIDQ1OSAzNzUgTCA0NjEgMzc3IEwgNDU5IDM3OSBMIDQ2NSAzODMgTCA0NzYgMzgxIEwgNDc4IDM4MyBMIDQ3MiAzODUgTCA0NjggMzkyIEwgNDc3IDM5NiBMIDQ3NyA0MDEgTCA0ODYgNDA0IEwgNDg4IDM5NyBMIDQ5NCAzOTYgTCA0OTcgMzkyIEwgNTA3IDM4OSBMIDUwNiAzODQgTCA0OTQgMzg3IEwgNDg1IDM3OCBMIDUwMyAzNjQgICAgICAgTCA1MjYgMzUxIEwgNTI3IDM1NCBMIDUxNCAzNjUgTCA1MTcgMzcxIEwgNTIwIDM3MSBMIDUxNSAzODQgTCA1MTEgMzgzIEwgNTEwIDM4NiBMIDUxNyAzOTMgTCA1MjggMzk0IEwgNTU0IDQwNiBMIDU2NyA0MDggTCA1NzMgNDE3IEwgNTcwIDQyNyBMIDU4OSA0NDIgTCA1OTQgNDM5IEwgNjAzIDQ0MSBMIDYwOSA0NDAgTCA2MDkgMzMwIEwgNTk3IDMzMCBMIDU2OSAzMjEgTCA1NjQgMzA1IEwgNTU0IDMwNCBMIDU0OSAyODQgICAgICAgTCA1MzMgMjgzIEwgNTI2IDI4NyBMIDUxNiAyODYgTCA1MDUgMjgwIEwgNDk0IDI5NSBMIDQ3NyAyODkgTCA0NjggMjk1IEwgNDcwIDMwMyBMIDQ2NiAzMDcgTCA0NjAgMzQ1IEwgNDQ1IDM1MCBMIDQzNCAzNjAgTCA0MzIgMzcyIEwgNDIzIDM3NiBMIDQyMiAzODIgTCA0MjcgMzk5IEwgNDM4IDM5N2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzU0MCcsXG4gICAgICAgIHk6ICczNTAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnU2lsZXNpYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBTaWxlc2lhJyxcbiAgICAgIHBhdGg6IGBNIDI4OCAzMjEgTCAyOTcgMzIyIEwgMzExIDMzNCBMIDMxNCAzMzIgTCAzMjEgMzM5IEwgMzI1IDM0MCBMIDMyOSAzMzggTCAzMzMgMzMwIEwgMzI2IDMyNyBMIDMyMyAzMjIgTCAzMjAgMzAzIEwgMjk2IDMwMCBMIDI4OCAzMDUgTCAyODQgMzE0IEwgMjg4IDMyMWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI5OCcsXG4gICAgICAgIHk6ICczMTgnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnU215cm5hJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFNteXJuYScsXG4gICAgICBwYXRoOiBgTSA0MTcgNDg5IEwgNDIwIDQ5NSBMIDQxNyA0OTggTCA0MTcgNTA3IEwgNDIzIDUxMCBMIDQyNyA1MjQgTCA0MzUgNTIzIEwgNDM1IDUzMCBMIDQ0MSA1MjYgTCA0NDcgNTI4IEwgNDUzIDUzNCBMIDQ2NCA1MzEgTCA0NjYgNTIxIEwgNDc1IDUyMCBMIDQ4NSA1MjggTCA0OTEgNTMwIEwgNTA1IDUyNiBMIDUxMSA1MTQgTCA1MjAgNTE3IEwgNTI3IDUwOCBMIDUzMCA1MDkgICAgICAgTCA1MzYgNDk0IEwgNTQ1IDQ4NiBMIDU1NSA0ODQgTCA1NjMgNDc5IEwgNTYyIDQ3MSBMIDU1NiA0NjcgTCA1NTUgNDYwIEwgNTQ2IDQ2MiBMIDUzMSA0NjAgTCA1MDggNDgwIEwgNTAxIDQ4MiBMIDQ5MCA0ODAgTCA0NzMgNDkxIEwgNDY2IDQ5MSBMIDQ1MiA0OTUgTCA0MzIgNDkzIEwgNDIzIDQ4NyBMIDQxNyA0ODlgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICc0NjAnLFxuICAgICAgICB5OiAnNTEwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1NwYWluX19uYycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCcsXG4gICAgICBwYXRoOiBgTSAxMzQgNDE3IEwgMTIzIDQxMiBMIDExMyA0MDcgTCAxMTIgMzk5IEwgMTAxIDM5NiBMIDk2IDM5NyBMIDcyIDM4NCBMIDU5IDM4MSBMIDU0IDM3NSBMIDQ4IDM3NCBMIDQ2IDM3OCBMIDM5IDM3NSBMIDMzIDM4MSBMIDM1IDM4NCBMIDMyIDM5NiBMIDQzIDM5NSBMIDQyIDM5OSBMIDU1IDQwMCBMIDYyIDQwNyBMIDYxIDQxMSBMIDUyIDQxMiBMIDQyIDQzMiBMIDM3IDQzMSBMIDQwIDQ0MSBMIDEzNCA0MTdgLFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTcGFpbl9fc2MnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wnLFxuICAgICAgcGF0aDogYE0gNDAgNDQxIEwgMzQgNDQ3IEwgMzYgNDU3IEwgMjcgNDY4IEwgMzMgNDc1IEwgMzQgNDg0IEwgMzcgNDkwIEwgNDcgNDg4IEwgNTIgNDg5IEwgNjAgNDg2IEwgNzggNDkxIEwgODMgNDk0IEwgODYgNDg1IEwgOTAgNDgzIEwgOTggNDg0IEwgMTA3IDQ3NCBMIDExMyA0NzMgTCAxMTUgNDY5IEwgMTEwIDQ2MSBMIDEyNCA0NDQgTCAxMzEgNDM5IEwgMTQ2IDQzOCAgICAgICBMIDE1NyA0MzIgTCAxNTggNDI1IEwgMTU0IDQyNyBMIDE0MiA0MTcgTCAxMzUgNDE0IEwgMTM0IDQxNyBMIDQwIDQ0MWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzg1JyxcbiAgICAgICAgeTogJzQ1MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTdF9QZXRlcnNidXJnX19uYycsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBTdF9QZXRlcnNidXJnJyxcbiAgICAgIHBhdGg6IGBNIDUzNCAxNjQgTCA1NjQgMTU5IEwgNTczIDE0MyBMIDU5OCAxMzIgTCA2MDkgMTE3IEwgNjA5IDAgNTQwIDAgTCA1MzUgOSBMIDUzMCA2IEwgNTE3IDE5IEwgNTE2IDMzIEwgNTEzIDM4IEwgNTEzIDIzIEwgNTA3IDIwIEwgNTA1IDI2IEwgNDk5IDMzIEwgNDkyIDQ4IEwgNDk1IDU4IEwgNDg4IDYwIEwgNDc5IDU3IEwgNDc3IDU1IEwgNDgxIDUwIEwgNDczIDQzIEwgNDY2IDQ1IEwgNDcyIDYyICAgICAgIEwgNDc4IDY2IEwgNDc4IDc0IEwgNDcyIDcyIEwgNDY4IDc0IEwgNDU3IDkxIEwgNDY5IDEwMCBMIDQ2NyAxMDYgTCA0NjIgMTA5IEwgNDQ0IDEwMSBMIDQ0MiAxMTAgTCA0NDcgMTE1IEwgNDU0IDExOSBMIDQ1MiAxMjIgTCA0MzQgMTE4IEwgNDI2IDEwMyBMIDQyNiA5NCBMIDQxNCA4OCBMIDQxMiA4MyBMIDQ0NSA4NCBMIDQ1NyA3OSBMIDQ1OSA2NiBMIDQ1MyA2MSBMIDQxNyA0NyBMIDQwNSA0OSBMIDQwMSA0NSBMIDM5NyA0OCAgICAgICBMIDM4OCA2MSBMIDM4NyA2OCBMIDM5MyA3MyBMIDM5MiA5MiBMIDQwMSAxMTAgTCA0MDIgMTE4IEwgNDEwIDEzMCBMIDQxNCAxNDcgTCA1MzQgMTY0YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnNDYwJyxcbiAgICAgICAgeTogJzE0OScsXG4gICAgICB9LFxuICAgICAgLy8gPHRleHQgeD1cIjQ3NVwiIHk9XCI5MFwiPihuYyk8L3RleHQ+XG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1N0X1BldGVyc2J1cmdfX3NjJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFN0X1BldGVyc2J1cmcnLFxuICAgICAgcGF0aDogYE0gNDE0IDE0NyBMIDQxMCAxNTIgTCA0MTIgMTYxIEwgNDAyIDE3NyBMIDQwMyAxODMgTCA0MTEgMTg0IEwgNDE0IDE4NyBMIDQwOCAxODcgTCA0MDAgMTkyIEwgMzk5IDE5NyBMIDM4NyAxOTYgTCAzNzEgMTk4IEwgMzY5IDIwMiBMIDM3MiAyMDUgTCAzODIgMjA2IEwgMzk0IDIwNSBMIDQwNSAyMTcgTCA0MDkgMjI4IEwgNDIxIDIyOSBMIDQyOCAyMjUgTCA0MzkgMjExICAgICAgIEwgNDQ3IDIwOSBMIDQ1MSAyMTMgTCA0NTcgMjEwIEwgNDU2IDIwNyBMIDQ1OCAxOTQgTCA0NzYgMTgzIEwgNDg5IDE4NCBMIDUxNSAxNjkgTCA1MzQgMTY0IEwgNDE0IDE0N2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzQwOCcsXG4gICAgICAgIHk6ICcyMDAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnU3dlZGVuJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFN3ZWRlbicsXG4gICAgICBwYXRoOiBgTSAyNzUgMjAzIEwgMjc3IDIxOCBMIDI3NiAyMjQgTCAyODIgMjM2IEwgMjc5IDI0MCBMIDI3OSAyNDMgTCAyODIgMjUzIEwgMjg5IDI1NCBMIDI5NCAyNDUgTCAzMDUgMjQ0IEwgMzEyIDIyOSBMIDMxMSAyMjAgTCAzMTQgMjA5IEwgMzIyIDIwNiBMIDMyOCAyMDMgTCAzMzEgMTkzIEwgMzI2IDE4MyBMIDMyMCAxODIgTCAzMjEgMTYxIEwgMzMwIDE0NiBMIDM0MyAxMzggICAgICAgTCAzNTEgMTI4IEwgMzQ3IDEyMSBMIDM0OSAxMTIgTCAzNTUgMTA0IEwgMzYyIDEwNyBMIDM1NiA3MSBMIDM0MiA2MSBMIDM0MSA2NSBMIDMzMCA2NCBMIDMzMiA3NCBMIDMyNCA3MSBMIDMxMSAxMDEgTCAzMDggMTA0IEwgMzA5IDExNSBMIDMwMCAxMjYgTCAzMDEgMTMyIEwgMjkyIDEzMyBMIDI5MCAxNjQgTCAyODUgMTcwIEwgMjg3IDE3NyBMIDI3OSAyMDQgTCAyNzUgMjAzYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzAwJyxcbiAgICAgICAgeTogJzE0NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTeXJpYScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBTeXJpYScsXG4gICAgICBwYXRoOiBgTSA1MzAgNTA5IEwgNTM2IDQ5NCBMIDU0NSA0ODYgTCA1NTUgNDg0IEwgNTYzIDQ3OSBMIDU4NCA0NzggTCA2MDkgNDkzIEwgNjA5IDU1OSBMIDUyOCA1NTkgTCA1MzIgNTM1IEwgNTI2IDUzMCBMIDUyNSA1MTggTCA1MzAgNTA5YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnNTcwJyxcbiAgICAgICAgeTogJzUzNScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdUcmllc3RlJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFRyaWVzdGUnLFxuICAgICAgcGF0aDogYE0gMjc2IDM5OSBMIDI3NSA0MDMgTCAyNzggNDEwIEwgMjgyIDQwMSBMIDI4NiA0MDIgTCAyODkgNDE4IEwgMzA2IDQzNiBMIDMzMSA0NTQgTCAzMzAgNDQ1IEwgMzM3IDQ0NiBMIDMzMCA0MzcgTCAzMjcgNDI5IEwgMzMxIDQyNCBMIDMzMCA0MTYgTCAzMzIgNDEwIEwgMzIzIDQwOCBMIDMyMSAzOTggTCAzMTEgMzk0IEwgMzA4IDM4MyBMIDI5OSAzODUgTCAyOTQgMzgwICAgICAgIEwgMjg5IDM4NSBMIDI3NiAzODYgTCAyNzkgMzg5IEwgMjc2IDM5OWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzMwNScsXG4gICAgICAgIHk6ICc0MjUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnVHVuaXMnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgVHVuaXMnLFxuICAgICAgcGF0aDogYE0gMjMyIDU1OSBMIDIzNCA1NTEgTCAyMzIgNTQ0IEwgMjI1IDUzNSBMIDIzMSA1MzEgTCAyMzYgNTI0IEwgMjMzIDUyMyBMIDIyNCA1MjcgTCAyMjMgNTE4IEwgMjE4IDUxNiBMIDIxMiA1MTcgTCAyMDggNTIxIEwgMjAzIDUyMCBMIDE5NyA1MjcgTCAxOTUgNTU5IEwgMjMyIDU1OWAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzIwOCcsXG4gICAgICAgIHk6ICc1NTAnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnVHVzY2FueScsXG4gICAgICB0aWxlVHlwZTogJ2xhbmRUaWxlJyxcbiAgICAgIGlkOiAnbCBUdXNjYW55JyxcbiAgICAgIHBhdGg6IGBNIDIzMyA0MTUgTCAyMzggNDMxIEwgMjQ3IDQ0MiBMIDI1MCA0MzggTCAyNjMgNDM0IEwgMjUzIDQxOCBMIDI0NiA0MTYgTCAyNDAgNDE1IEwgMjM2IDQxMSBMIDIzMyA0MTVgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyNDAnLFxuICAgICAgICB5OiAnNDI1JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1R5cm9saWEnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgVHlyb2xpYScsXG4gICAgICBwYXRoOiBgTSAyMzQgMzY2IEwgMjQzIDM3MCBMIDI0NiAzNjkgTCAyNTAgMzcxIEwgMjY3IDM2OCBMIDI3MSAzNzAgTCAyNjkgMzYyIEwgMjc1IDM2MiBMIDI4MSAzNTYgTCAyOTIgMzU3IEwgMjk1IDM2MiBMIDI5NCAzODAgTCAyODkgMzg1IEwgMjc2IDM4NiBMIDI2OCAzODUgTCAyNTkgMzg4IEwgMjU1IDM5NCBMIDI1MCAzOTcgTCAyNDYgMzkyIEwgMjQzIDM4OCBMIDI0NSAzODQgICAgICAgTCAyNDEgMzc4IEwgMjM0IDM3NCBMIDIzNCAzNjZgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICcyNTUnLFxuICAgICAgICB5OiAnMzgwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1VrcmFpbmUnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgVWtyYWluZScsXG4gICAgICBwYXRoOiBgTSAzODMgMzI3IEwgMzg1IDMzMiBMIDM5OSAzMzggTCA0MDQgMzU0IEwgNDAzIDM2MCBMIDQxMSAzNjEgTCA0MTQgMzcyIEwgNDIzIDM3NiBMIDQzMiAzNzIgTCA0MzQgMzYwIEwgNDQ1IDM1MCBMIDQ2MCAzNDUgTCA0NjYgMzA3IEwgNDcwIDMwMyBMIDQ2OCAyOTUgTCA0NTYgMjkyIEwgMzkwIDMwNiBMIDM4NiAzMDkgTCAzODMgMzI3YCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnNDIwJyxcbiAgICAgICAgeTogJzM0MCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdWZW5pY2UnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgVmVuaWNlJyxcbiAgICAgIHBhdGg6IGBNIDI3OCA0NDMgTCAyNzIgNDI0IEwgMjYwIDQxNyBMIDI2MSA0MDEgTCAyNzAgMzk4IEwgMjc2IDM5OSBMIDI3OSAzODkgTCAyNzYgMzg2IEwgMjY4IDM4NSBMIDI1OSAzODggTCAyNTUgMzk0IEwgMjUwIDM5NyBMIDI0NiAzOTIgTCAyMzMgNDA0IEwgMjM2IDQxMSBMIDI0MCA0MTUgTCAyNDYgNDE2IEwgMjUzIDQxOCBMIDI2MyA0MzQgTCAyNzQgNDQ3IEwgMjc4IDQ0M2AsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzI0NScsXG4gICAgICAgIHk6ICc0MDcnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnVmllbm5hJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFZpZW5uYScsXG4gICAgICBwYXRoOiBgTSAyOTIgMzU3IEwgMjk1IDM0OSBMIDMwMyAzNDYgTCAzMTYgMzQ4IEwgMzIyIDM0NyBMIDMyOSAzNDYgTCAzMzcgMzUwIEwgMzM1IDM1NCBMIDMyMiAzNzAgTCAzMTEgMzc1IEwgMzA4IDM4MyBMIDI5OSAzODUgTCAyOTQgMzgwIEwgMjk1IDM2MiBMIDI5MiAzNTdgLFxuICAgICAgdGV4dExvY2F0aW9uOiB7XG4gICAgICAgIHg6ICczMDUnLFxuICAgICAgICB5OiAnMzU2JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1dhbGVzJyxcbiAgICAgIHRpbGVUeXBlOiAnbGFuZFRpbGUnLFxuICAgICAgaWQ6ICdsIFdhbGVzJyxcbiAgICAgIHBhdGg6IGBNIDEwMCAyOTEgTCAxMTIgMjg3IEwgMTIyIDI4MSBMIDEzMCAyODIgTCAxMjcgMjc2IEwgMTE5IDI3MiBMIDExNiAyNzIgTCAxMTUgMjY1IEwgMTI4IDI2MiBMIDE0MyAyNjIgTCAxNTAgMjY0IEwgMTUzIDI3MSBMIDE1MCAyNzcgTCAxNDUgMjgxIEwgMTQ3IDI5NSBMIDEzNCAyOTQgTCAxMjQgMjkxIEwgMTIwIDI5NSBMIDExMCAyOTIgTCAxMDAgMjkxYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMTMwJyxcbiAgICAgICAgeTogJzI3NScsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdXYXJzYXcnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgV2Fyc2F3JyxcbiAgICAgIHBhdGg6IGBNIDMzMyAzMzAgTCAzMjYgMzI3IEwgMzIzIDMyMiBMIDMyMCAzMDMgTCAzMjQgMjk5IEwgMzI2IDI5MiBMIDM0MSAyODcgTCAzNDUgMjg5IEwgMzU5IDI4NiBMIDM2NSAyODEgTCAzNzIgMjgzIEwgMzc5IDI5MCBMIDM4NiAzMDkgTCAzODMgMzI3IEwgMzc5IDMyNCBMIDM3NCAzMjcgTCAzNjcgMzI5IEwgMzYxIDMyNCBMIDM1NiAzMjMgTCAzNTMgMzI3ICAgICAgIEwgMzQ0IDMzMiBMIDM0MSAzMzAgTCAzMzMgMzMwYCxcbiAgICAgIHRleHRMb2NhdGlvbjoge1xuICAgICAgICB4OiAnMzQ1JyxcbiAgICAgICAgeTogJzMxNicsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdZb3Jrc2hpcmUnLFxuICAgICAgdGlsZVR5cGU6ICdsYW5kVGlsZScsXG4gICAgICBpZDogJ2wgWW9ya3NoaXJlJyxcbiAgICAgIHBhdGg6IGBNIDE2MyAyMjYgTCAxNjMgMjM5IEwgMTY4IDI0NiBMIDE3MCAyNTIgTCAxNjkgMjY1IEwgMTY2IDI2OSBMIDE1MyAyNzEgTCAxNTAgMjY0IEwgMTUxIDI0OCBMIDE1NSAyMzkgTCAxNTUgMjI4IEwgMTYzIDIyNmAsXG4gICAgICB0ZXh0TG9jYXRpb246IHtcbiAgICAgICAgeDogJzE2MCcsXG4gICAgICAgIHk6ICcyNDgnLFxuICAgICAgfSxcbiAgICB9LFxuICBdLFxufVxuIC8vIDxnIHRpdGxlPVwiQmVybGluXCIgY2xhc3M9XCJsYW5kVGlsZVwiPj5cbi8vIFx0PHBvbHlnb24gY2xhc3M9XCJsIEJlcmxpblwiIHBvaW50cz1cIkwgMjk0IDI3NSBMIDI4NiAyNzQgTCAyODcgMjY3IEwgMjgwIDI2NiBMIDI2NiAyNzUgTCAyNjYgMjgzIEwgMjYyIDI4NyBMIDI2NCAyOTMgTCAyNjEgMjk2IEwgMjYzIDMxMCBMIDI4OCAzMDUgTCAyOTYgMzAwIEwgMjk3IDI5NiBMIDI5MiAyOTBcIi8+XG4vLyBcdDx0ZXh0IHg9XCIyNzJcIiB5PVwiMjkyXCI+QmVybGluPC90ZXh0PlxuLy8gXHQ8dXNlIGhyZWY9XCIjU0NcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoJnNjQmVybGluOylcIi8+XG4vLyA8L2c+XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgaH0gZnJvbSAncHJlYWN0J1xuaW1wb3J0ICcuL3RlcnJpdG9yeS5zY3NzJ1xuLy8gTW92ZSB0aWxlIHR5cGUgaW50byBzaGFyZWQgdHlwZXMgZm9sZGVyP1xuZXhwb3J0IGludGVyZmFjZSBJVGVycml0b3J5UHJvcHMge1xuICB0aWxlOiB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpbGVUeXBlOiBzdHJpbmc7XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIHRleHRMb2NhdGlvbj86IHtcbiAgICAgIHg6IHN0cmluZyxcbiAgICAgIHk6IHN0cmluZyxcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIElUZXJyaXRvcnlTdGF0ZSB7XG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXJyaXRvcnkgZXh0ZW5kcyBDb21wb25lbnQgPElUZXJyaXRvcnlQcm9wcywgSVRlcnJpdG9yeVN0YXRlPiB7XG4gIGRvU29tZXRoaW5nID0gKHRpdGxlOnN0cmluZykgPT4gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKHRpdGxlKVxuICB9XG5cbiAgcHVibGljIHJlbmRlcihwcm9wczogSVRlcnJpdG9yeVByb3BzLCBzdGF0ZTogSVRlcnJpdG9yeVN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxnIHRpdGxlPXtwcm9wcy50aWxlLnRpdGxlfSBjbGFzcz17cHJvcHMudGlsZS50aWxlVHlwZX0+XG4gICAgICAgIDxwYXRoIGNsYXNzPXtwcm9wcy50aWxlLmlkfSBkPXtwcm9wcy50aWxlLnBhdGh9IG9uQ2xpY2s9e3RoaXMuZG9Tb21ldGhpbmcocHJvcHMudGlsZS50aXRsZSl9Lz5cbiAgICAgICAge3Byb3BzLnRpbGUudGV4dExvY2F0aW9uICYmIDx0ZXh0IHsuLi5wcm9wcy50aWxlLnRleHRMb2NhdGlvbn0gY2xhc3NOYW1lPSdjb3VudHJ5VGV4dCc+e3Byb3BzLnRpbGUudGl0bGV9PC90ZXh0Pn1cbiAgICAgIDwvZz5cbiAgICApXG4gIH1cbn0iLCJpbXBvcnQge0NvbXBvbmVudCwgaH0gZnJvbSAncHJlYWN0J1xuaW1wb3J0IGJvYXJkRGF0YSBmcm9tICdAY2xpZW50L2Fzc2V0cy9jb3VudHJ5RGF0YSdcbmltcG9ydCBUZXJyaXRvcnkgZnJvbSAnLi90ZXJyaXRvcnkvdGVycml0b3J5JztcbmltcG9ydCAnLi9ib2FyZC5zY3NzJ1xuXG4vLyA/IFJlY2lldmUgYm9hcmREYXRhIGFzIHByb3BzIG9yIGltcG9ydD9cbi8vID8gSW1wb3J0IGlzIHNpbXBsZXIsIHByb3A7cyBhbGxvd3MgZm9yIGV4dGVuZGluZyBpbiB0aGUgZnV0dXJlLlxuZXhwb3J0IGludGVyZmFjZSBJQm9hcmRQcm9wcyB7XG4gIGJvYXJkRGF0YT86IGFueVxufVxuXG5pbnRlcmZhY2UgSUJvYXJkU3RhdGUge1xuICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9hcmQgZXh0ZW5kcyBDb21wb25lbnQgPElCb2FyZFByb3BzLCBJQm9hcmRTdGF0ZT4ge1xuICBwdWJsaWMgcmVuZGVyKHByb3BzOiBJQm9hcmRQcm9wcywgc3RhdGU6IElCb2FyZFN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9e2JvYXJkRGF0YS52aWV3Qm94fSBjbGFzc05hbWU9J2dhbWVCb2FyZCcgaWQ9J2dhbWVCb2FyZCc+XG4gICAgICAgIHtib2FyZERhdGEudGVycml0b3JpZXMubWFwKHRpbGUgPT4gPFRlcnJpdG9yeSB0aWxlPXt0aWxlfS8+KX1cbiAgICAgIDwvc3ZnPlxuICAgIClcbiAgfVxufSIsImltcG9ydCB7Q29tcG9uZW50LCBofSBmcm9tICdwcmVhY3QnXG5cbmltcG9ydCB7IElHYW1lSlNPTiAsIElHYW1lVHVybkpTT059IGZyb20gJ0BzaGFyZWQvdHlwZXMnXG5pbXBvcnQgdG8gZnJvbSAnYXdhaXQtdG8tanMnXG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgc2V0dXBOZXdGdWxsR2FtZSBmcm9tICcuLi8uLi8uLi9kZXZUb29scy9zZXR1cEdhbWUnXG5pbXBvcnQgZ2FtZSBmcm9tICdAY2xpZW50L2VuZ2luZS9nYW1lJ1xuXG5pbXBvcnQgJy4vZ2FtZS5zY3NzJ1xuaW1wb3J0IEJvYXJkIGZyb20gJ0BjbGllbnQvYXBwL2NvbXBvbmVudHMvYm9hcmQvYm9hcmQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElHYW1lUHJvcHMge1xuICB1c2VySUQ6IHN0cmluZyxcbiAgbG9nT3V0OiAoKSA9PiB2b2lkLFxufVxuXG5pbnRlcmZhY2UgSUdhbWVTdGF0ZSB7XG4gIGdhbWU/OiBJR2FtZUpTT04sXG4gIHR1cm4/OiBJR2FtZVR1cm5KU09OLFxuICBnYW1lSXNSdW5uaW5nOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUgZXh0ZW5kcyBDb21wb25lbnQgPElHYW1lUHJvcHMsIElHYW1lU3RhdGU+IHtcbiAgc3RhdGU6IElHYW1lU3RhdGUgPSB7Z2FtZUlzUnVubmluZzogZmFsc2V9XG5cbiAgcmVuZGVyKHByb3BzOiBJR2FtZVByb3BzLCBzdGF0ZTogSUdhbWVTdGF0ZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncGFnZSc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdidXR0b25zQ29udGFpbmVyJyA+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnNldHVwR2FtZX0+U2V0IFVwIEdhbWU8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuZ2V0TGF0ZXN0R2FtZX0+TG9hZCBHYW1lPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnN1Ym1pdE9yZGVyc30+U3VibWl0IE9yZGVyczwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5sb2dPdXR9PkxvZyBvdXQ8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMubmV4dFR1cm59Pk5leHQgVHVybjwvYnV0dG9uPjxici8+XG4gICAgICAgIDwvZGl2Pjxici8+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPG9iamVjdCBpZD0nYXJteScgdHlwZT0naW1hZ2Uvc3ZnK3htbCcgZGF0YT0nYXNzZXRzL3N2Zy8wMDEtdGFuay0xLnN2Zycgd2lkdGg9JzAnPjwvb2JqZWN0PlxuICAgICAgICAgIDxvYmplY3QgaWQ9J2ZsZWV0JyB0eXBlPSdpbWFnZS9zdmcreG1sJyBkYXRhPSdhc3NldHMvc3ZnLzAwMi1jcnVpc2VyLnN2Zycgd2lkdGg9JzAnPjwvb2JqZWN0PlxuICAgICAgICAgIHsvKiA8b2JqZWN0IGlkPSdtYXAnIHR5cGU9J2ltYWdlL3N2Zyt4bWwnIGRhdGE9J2Fzc2V0cy9EaXBsb21hY3kuc3ZnJyBjbGFzcz0nb3ZlcmxheSc+RGlwbG9tYWN5IG1hcCBzaG91bGQgYmUgaGVyZTwvb2JqZWN0PiAqL31cbiAgICAgICAgICA8Qm9hcmQvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIC8vID8gTW92ZSBheGlvcyByZXF1ZXN0cyBpbnRvIGEgaGVscGVyIHNlcnZpY2U/XG4gIHByaXZhdGUgc2V0dXBHYW1lID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHtkYXRhOiBnYW1lfSA9IGF3YWl0IHNldHVwTmV3RnVsbEdhbWUoKVxuICAgIGNvbnN0IHtkYXRhOiB0dXJufSA9IGF3YWl0IEF4aW9zLmdldChgYXBpL3R1cm4vJHtnYW1lLmN1cnJlbnRUdXJufWApXG4gICAgdGhpcy5zZXRTdGF0ZSh7Z2FtZSwgdHVybn0sICgpID0+IHtcbiAgICAgIHRoaXMucnVuR2FtZSgpXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGF0ZXN0R2FtZSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7ZGF0YTogZ2FtZX0gPSBhd2FpdCBBeGlvcy5nZXQoJy9hcGkvZ2FtZS9sYXRlc3QnKVxuICAgIGNvbnN0IHtkYXRhOiB0dXJufSA9IGF3YWl0IEF4aW9zLmdldChgL2FwaS90dXJuLyR7Z2FtZS5jdXJyZW50VHVybn1gKVxuICAgIHRoaXMuc2V0U3RhdGUoe2dhbWUsIHR1cm59LCB0aGlzLnJlZnJlc2gpXG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgZ2FtZS5jbGVhck1hcCgpXG4gICAgdGhpcy5ydW5HYW1lKClcbiAgfVxuXG4gIHByaXZhdGUgZmV0Y2hHYW1lID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB7ZGF0YTogZ2FtZX0gPSBhd2FpdCBBeGlvcy5nZXQoYC9hcGkvZ2FtZS8ke2lkfWApXG4gICAgY29uc3Qge2RhdGE6IHR1cm59ID0gYXdhaXQgQXhpb3MuZ2V0KGAvYXBpL3R1cm4vJHtnYW1lLmN1cnJlbnRUdXJufWApXG4gICAgdGhpcy5zZXRTdGF0ZSh7Z2FtZSwgdHVybn0pXG4gIH1cblxuICBwcml2YXRlIHN1Ym1pdE9yZGVycyA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBBeGlvcy5wYXRjaChgL2FwaS90dXJuLyR7dGhpcy5zdGF0ZS5nYW1lLmN1cnJlbnRUdXJufWAsIHtcbiAgICAgIG1vdmVzOiBnYW1lLm9yZGVycy5tYXAoKG9yZGVyKSA9PiBvcmRlci50b09iamVjdCgpKSxcbiAgICAgIHR1cm5JRDogdGhpcy5zdGF0ZS5nYW1lLmN1cnJlbnRUdXJuLFxuICAgIH0pXG4gICAgY29uc29sZS5sb2coJ3NlbnQhJylcbiAgfVxuXG4gIHByaXZhdGUgbmV4dFR1cm4gPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgW2VyciwgcmVzXSA9IGF3YWl0IHRvKEF4aW9zLnBvc3QoYC9hcGkvZ2FtZS8ke3RoaXMuc3RhdGUuZ2FtZS5faWR9L25leHRgKSlcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpXG4gICAgaWYgKHJlcykgdGhpcy5nZXRMYXRlc3RHYW1lKClcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3ZnID0gKGxhYmVsOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdmdPYmplY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsYWJlbCkgYXMgSFRNTE9iamVjdEVsZW1lbnRcbiAgICBjb25zb2xlLmxvZyhzdmdPYmplY3QsIGxhYmVsKVxuICAgIHJldHVybiBzdmdPYmplY3QuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2xhYmVsfVN2Z2ApXG4gIH1cbiAgcHJpdmF0ZSBydW5HYW1lKCkge1xuICAgIGNvbnN0IFthcm15LCBmbGVldF0gPSBbJ2FybXknLCAnZmxlZXQnXS5tYXAodGhpcy5nZXRTdmcpXG4gICAgY29uc3QgbWFwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWVCb2FyZCcpIGFzIEhUTUxPYmplY3RFbGVtZW50XG4gICAgZ2FtZS5zZXR1cCh7bWFwLCBhcm15LCBmbGVldH0sIHRoaXMuc3RhdGUudHVybiwgdGhpcy5wcm9wcy51c2VySUQpXG4gICAgZ2FtZS5ydW4oKVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIGggfSBmcm9tICdwcmVhY3QnXG5cbmltcG9ydCAnLi9mb3JtQm94LnNjc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1Cb3ggZXh0ZW5kcyBDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybUJveFwiPlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIGh9IGZyb20gJ3ByZWFjdCdcblxuaW1wb3J0IHRvIGZyb20gJ2F3YWl0LXRvLWpzJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC9jbG9uZSdcblxuaW1wb3J0IHsgTGluaywgcm91dGUgfSBmcm9tICdwcmVhY3Qtcm91dGVyJ1xuaW1wb3J0ICcuL2xvZ2luLnNjc3MnXG5cbmltcG9ydCBGb3JtQm94IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybUJveC9mb3JtQm94JztcblxuZXhwb3J0IGludGVyZmFjZSBJTG9naW5Qcm9wcyB7XG4gIHRvZ2dsZUxvZ0luOiAoYXJnOiBib29sZWFuKSA9PiB2b2lkXG59XG5cbmludGVyZmFjZSBJTG9naW5TdGF0ZSB7XG4gIGZvcm1GaWVsZHM/OiB7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ/OiBzdHJpbmcsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9naW4gZXh0ZW5kcyBDb21wb25lbnQgPElMb2dpblByb3BzLCBJTG9naW5TdGF0ZT4ge1xuICBzdGF0ZTogSUxvZ2luU3RhdGUgPSB7IGZvcm1GaWVsZHM6IHt9IH1cbiAgdXNlcm5hbWVJbnB1dDogSFRNTElucHV0RWxlbWVudFxuICBwYXNzd29yZElucHV0OiBIVE1MSW5wdXRFbGVtZW50XG5cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZm9ybUZpZWxkczoge1xuICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZUlucHV0LnZhbHVlLFxuICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZElucHV0LnZhbHVlLFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZW5kZXIocHJvcHM6IElMb2dpblByb3BzLCBzdGF0ZTogSUxvZ2luU3RhdGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J3BhZ2UnPlxuICAgICAgICA8aDE+RGlwbG9tYWN5PC9oMT48YnIvPlxuICAgICAgICA8Rm9ybUJveD5cbiAgICAgICAgICAgIHsvKiA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHtyb3V0ZSgnL2dhbWUnLCB0cnVlKX19PiBHYW1lIDwvYnV0dG9uPiAqL31cbiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0nYXBpL3VzZXIvYXV0aGVudGljYXRlJyBtZXRob2Q9J3Bvc3QnIG9uU3VibWl0PXt0aGlzLmxvZ2lufT5cbiAgICAgICAgICAgICAgVXNlcm5hbWU8YnIvPlxuICAgICAgICAgICAgICA8aW5wdXQgcmVmPXt1c2VybmFtZUlucHV0ID0+IHRoaXMudXNlcm5hbWVJbnB1dCA9IHVzZXJuYW1lSW5wdXR9IHR5cGU9J3RleHQnIG5hbWU9J3VzZXJuYW1lJyBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UoJ3VzZXJuYW1lJyl9Lz48YnIvPlxuICAgICAgICAgICAgICBQYXNzd29yZDxici8+XG4gICAgICAgICAgICAgIDxpbnB1dCByZWY9e3Bhc3N3b3JkSW5wdXQgPT4gdGhpcy5wYXNzd29yZElucHV0ID0gcGFzc3dvcmRJbnB1dH0gdHlwZT0ndGV4dCcgbmFtZT0ncGFzc3dvcmQnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgncGFzc3dvcmQnKX0vPjxici8+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdzdWJtaXQnIHZhbHVlPSdTdWJtaXQnLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIHsnTmV3PyBSZWdpc3RlciAnfVxuICAgICAgICAgIDxMaW5rIGhyZWY9Jy9yZWdpc3Rlcic+aGVyZTwvTGluaz5cbiAgICAgICAgPC9Gb3JtQm94PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgbG9naW4gPSBhc3luYyAoZXZ0OiBFdmVudCkgPT4ge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc29sZS5sb2coJ2F0dGVtcHRpbmcgdG8gbG9nIGluJylcbiAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXRlLmZvcm1GaWVsZHMpXG4gICAgY29uc3QgW2VyciwgcmVzXSA9IGF3YWl0IHRvKGF4aW9zLnBvc3QoJ2FwaS9sb2dpbicsIHRoaXMuc3RhdGUuZm9ybUZpZWxkcykpXG4gICAgaWYgKGVycikge1xuICAgICAgY29uc29sZS5sb2coJ2xvZ2dpbmcgYW4gZXJyJylcbiAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICB9XG4gICAgaWYgKHJlcykge1xuICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MhJylcbiAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKVxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy50b2dnbGVMb2dJbih0cnVlKVxuICAgICAgcm91dGUoJy9nYW1lJylcbiAgICB9XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UgPSAoZmllbGQ6ICd1c2VybmFtZScgfCAncGFzc3dvcmQnKSA9PiB7XG4gICAgcmV0dXJuIChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGZvcm1GaWVsZHMgPSBjbG9uZSh0aGlzLnN0YXRlLmZvcm1GaWVsZHMpXG4gICAgICBmb3JtRmllbGRzW2ZpZWxkXSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Zvcm1GaWVsZHN9KVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHRvIGZyb20gJ2F3YWl0LXRvLWpzJ1xuaW1wb3J0IEF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC9jbG9uZSdcbmltcG9ydCB7Q29tcG9uZW50LCBofSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgeyByb3V0ZSB9IGZyb20gJ3ByZWFjdC1yb3V0ZXInXG5cbmltcG9ydCBGb3JtQm94IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybUJveC9mb3JtQm94JztcblxuZXhwb3J0IGludGVyZmFjZSBJUmVnaXN0ZXJQcm9wcyB7XG5cbn1cblxuaW50ZXJmYWNlIElSZWdpc3RlclN0YXRlIHtcbiAgZm9ybUZpZWxkcz86IHtcbiAgICB1c2VybmFtZT86IHN0cmluZyxcbiAgICBuYW1lPzogc3RyaW5nLFxuICAgIGVtYWlsPzogc3RyaW5nLFxuICAgIHBhc3N3b3JkPzogc3RyaW5nLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZ2lzdGVyIGV4dGVuZHMgQ29tcG9uZW50IDxJUmVnaXN0ZXJQcm9wcywgSVJlZ2lzdGVyU3RhdGU+IHtcbiAgc3RhdGU6IElSZWdpc3RlclN0YXRlID0ge1xuICAgIGZvcm1GaWVsZHM6IHt9LFxuICB9XG5cbiAgcmVuZGVyKHByb3BzOiBJUmVnaXN0ZXJQcm9wcywgc3RhdGU6IElSZWdpc3RlclN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZVwiPlxuICAgICAgICA8Rm9ybUJveD5cbiAgICAgICAgICA8Zm9ybSBhY3Rpb249Jy91c2VyL3JlZ2lzdGVyJyBtZXRob2Q9J3Bvc3QnICBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgVXNlcm5hbWU6PGJyLz5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPSd0ZXh0J1xuICAgICAgICAgICAgICBuYW1lPSd1c2VybmFtZSdcbiAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmZvcm1GaWVsZHMudXNlcm5hbWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgndXNlcm5hbWUnKX1cbiAgICAgICAgICAgICAgLz48YnIvPlxuXG4gICAgICAgICAgICBOYW1lOjxici8+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT0ndGV4dCdcbiAgICAgICAgICAgICAgbmFtZT0nbmFtZSdcbiAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmZvcm1GaWVsZHMubmFtZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKCduYW1lJyl9XG4gICAgICAgICAgICAgIC8+PGJyLz5cblxuICAgICAgICAgICAgRW1haWw6PGJyLz5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPSd0ZXh0J1xuICAgICAgICAgICAgICBuYW1lPSdlbWFpbCdcbiAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmZvcm1GaWVsZHMuZW1haWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgnZW1haWwnKX1cbiAgICAgICAgICAgICAgLz48YnIvPlxuXG4gICAgICAgICAgICBQYXNzd29yZDo8YnIvPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcbiAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmZvcm1GaWVsZHMucGFzc3dvcmR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgncGFzc3dvcmQnKX1cbiAgICAgICAgICAgICAgLz48YnIvPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9J3N1Ym1pdCcgdmFsdWU9J1N1Ym1pdCcgLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvRm9ybUJveD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGV2dDogRXZlbnQpID0+IHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IFtlcnIsIHJlc10gPSBhd2FpdCB0byhBeGlvcy5wb3N0KCcvYXBpL3VzZXIvcmVnaXN0ZXInLCB0aGlzLnN0YXRlLmZvcm1GaWVsZHMpKVxuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycilcbiAgICBpZiAocmVzKSByb3V0ZSgnLycsIHRydWUpXG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNoYW5nZSA9IChmaWVsZDogJ3VzZXJuYW1lJyB8ICduYW1lJyB8ICdlbWFpbCcgfCAncGFzc3dvcmQnKSA9PiB7XG4gICAgcmV0dXJuIChldnQ6IEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBmb3JtRmllbGRzID0gY2xvbmUodGhpcy5zdGF0ZS5mb3JtRmllbGRzKVxuICAgICAgZm9ybUZpZWxkc1tmaWVsZF0gPSAoZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9ybUZpZWxkc30pXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgaH0gZnJvbSAncHJlYWN0J1xuaW1wb3J0IFJvdXRlciwgeyByb3V0ZSwgUm91dGVyT25DaGFuZ2VBcmdzIH0gZnJvbSAncHJlYWN0LXJvdXRlcidcbi8vICEgaW1wb3J0IExhenlSb3V0ZSBmcm9tICdwcmVhY3QtbGF6eS1yb3V0ZSc7XG4vLyAhIGh0dHBzOi8vZ2l0aHViLmNvbS9zY3Vya2VyL3ByZWFjdC1sYXp5LXJvdXRlXG5cbmltcG9ydCBBeGlvcyBmcm9tICdheGlvcydcbmltcG9ydCBjaGVja0F1dGhlbnRpY2F0aW9uIGZyb20gJy4vX2hlbHBlcnMvY2hlY2tBdXRoZW50aWNhdGlvbidcbmltcG9ydCBHYW1lIGZyb20gJy4vcGFnZXMvZ2FtZS9nYW1lJ1xuaW1wb3J0IExvZ2luIGZyb20gJy4vcGFnZXMvbG9naW4vbG9naW4nXG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSAnLi9wYWdlcy9yZWdpc3Rlci9yZWdpc3RlcidcblxuaW1wb3J0ICcuL2FwcC5zY3NzJ1xuaW1wb3J0ICcuL3ZhcmlhYmxlcy9jb2xvcnMuc2NzcydcblxuZXhwb3J0IGludGVyZmFjZSBJQXBwUHJvcHMge31cblxuaW50ZXJmYWNlIElBcHBTdGF0ZSB7XG4gIGlzTG9nZ2VkSW46IGJvb2xlYW4sXG4gIHVzZXJJRDogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCA8SUFwcFByb3BzLCBJQXBwU3RhdGU+IHtcbiAgc3RhdGU6IElBcHBTdGF0ZSA9IHtcbiAgICBpc0xvZ2dlZEluOiBmYWxzZSxcbiAgICB1c2VySUQ6IG51bGwsXG4gIH1cblxuICBoYW5kbGVSb3V0ZSA9IGFzeW5jIChldmVudDogUm91dGVyT25DaGFuZ2VBcmdzKSA9PiB7XG4gICAgc3dpdGNoIChldmVudC51cmwpIHtcbiAgICAgIGNhc2UgJy9nYW1lJzpcbiAgICAgICAgY29uc29sZS5sb2coJ2F0dGVtcHRpbmcgdG8gcm91dGUgdG8gL2dhbWUnKVxuICAgICAgICBjb25zdCBpc0F1dGhlZCA9IGF3YWl0IHRoaXMuY2hlY2tBdXRoZW50aWNhdGlvbigpXG4gICAgICAgIGlmICghaXNBdXRoZWQpIHJvdXRlKCcvJywgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICB0b2dnbGVMb2dJbiA9IChpc0xvZ2dlZEluPzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0xvZ2dlZEluKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtpc0xvZ2dlZElufSwgdGhpcy5jaGVja0F1dGhlbnRpY2F0aW9uKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7aXNMb2dnZWRJbjogIXRoaXMuc3RhdGUuaXNMb2dnZWRJbn0pXG4gIH1cblxuICBjaGVja0F1dGhlbnRpY2F0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGF1dGhJRCA9IGF3YWl0IGNoZWNrQXV0aGVudGljYXRpb24oKVxuICAgIGNvbnNvbGUubG9nKGBhdXRoSUQ6ICR7YXV0aElEfWApXG4gICAgaWYgKGF1dGhJRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHVzZXJJRDogYXV0aElELFxuICAgICAgfSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgbG9nT3V0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IEF4aW9zLmdldCgnL2xvZ291dCcpXG4gICAgcm91dGUoJy8nLCB0cnVlKVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdXNlcklEOiBudWxsLFxuICAgICAgaXNMb2dnZWRJbjogZmFsc2UsXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcihwcm9wczogSUFwcFByb3BzLCBzdGF0ZTogSUFwcFN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXIgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUm91dGV9PlxuICAgICAgICA8R2FtZSBwYXRoPScvZ2FtZScgdXNlcklEPXtzdGF0ZS51c2VySUR9IGxvZ091dD17dGhpcy5sb2dPdXR9Lz5cbiAgICAgICAgPFJlZ2lzdGVyIHBhdGg9Jy9yZWdpc3RlcicvPlxuICAgICAgICA8TG9naW4gcGF0aD0nLycgdG9nZ2xlTG9nSW49e3RoaXMudG9nZ2xlTG9nSW59Lz5cbiAgICAgIDwvUm91dGVyPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IHtoLCByZW5kZXJ9IGZyb20gJ3ByZWFjdCdcbmltcG9ydCBBcHAgZnJvbSAnLi9hcHAvYXBwJ1xuXG4vLyBodHRwczovL2RvbWluaWNzdHBpZXJyZS5jb20vaG93LXRvLXN0YXJ0LXdpdGgtdHlwZXNjcmlwdC1hbmQtcHJlYWN0LWE5ZWEzZTBiYTRkY1xucmVuZGVyKDxBcHAvPiAsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90ZXJyaXRvcnkuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90ZXJyaXRvcnkuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdGVycml0b3J5LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sLCAuVW5vd25lZCB7XFxuICBmaWxsOiAjRkZGRkREO1xcbiAgc3Ryb2tlOiBibGFjaztcXG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XFxuICBmaWxsLW9wYWNpdHk6IDAuMjtcXG4gIHN0cm9rZS13aWR0aDogMC44OyB9XFxuXFxuLncge1xcbiAgZmlsbDogIzk5Q0NGRjtcXG4gIHN0cm9rZTogIzIyMjtcXG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XFxuICBmaWxsLW9wYWNpdHk6IDAuNDU7XFxuICBzdHJva2Utd2lkdGg6IDAuODsgfVxcblxcbi53OmhvdmVyIHtcXG4gIGZpbGw6ICNBQURERkY7IH1cXG5cXG4ubDpob3ZlciB+IHRleHQsIC53OmhvdmVyIH4gdGV4dCB7XFxuICBmb250LXNpemU6IDEwcHg7IH1cXG5cXG4ubDpob3ZlciB7XFxuICBmaWxsLW9wYWNpdHk6IDAuNTsgfVxcblxcbi5zIHtcXG4gIGZpbGw6IHVybCgjZGlhZ29uYWxIYXRjaCk7XFxuICBzdHJva2U6ICMyMjA7XFxuICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xcbiAgb3BhY2l0eTogMC41OyB9XFxuXFxuLnNjIHtcXG4gIGZpbGw6ICNEREREREQ7XFxuICBzdHJva2U6IGJsYWNrOyB9XFxuXFxuI0EsICNGLCAjc2Mge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBzdHJva2U6IGJsYWNrOyB9XFxuXFxudGV4dCB7XFxuICBmb250LWZhbWlseTogUGFsYXRpbm87XFxuICBmaWxsOiAjMjIyO1xcbiAgZm9udC1zaXplOiA5cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNXB4LCAwcHgpO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH1cXG5cXG4uZW1waXJlMSB7XFxuICBmaWxsOiAjRkZGRjg4OyB9XFxuXFxuLmVtcGlyZTIge1xcbiAgZmlsbDogI0ZGRkYwMDsgfVxcblxcbi5lbXBpcmUzIHtcXG4gIGZpbGw6ICNGRjg4RkY7IH1cXG5cXG4uZW1waXJlNCB7XFxuICBmaWxsOiAjRkY4ODg4OyB9XFxuXFxuLmVtcGlyZTUge1xcbiAgZmlsbDogI0ZGODgwMDsgfVxcblxcbi5lbXBpcmU2IHtcXG4gIGZpbGw6ICNGRjAwRkY7IH1cXG5cXG4uZW1waXJlNyB7XFxuICBmaWxsOiAjRkYwMDg4OyB9XFxuXFxuLmVtcGlyZTgge1xcbiAgZmlsbDogI0ZGMDAwMDsgfVxcblxcbi5lbXBpcmU5IHtcXG4gIGZpbGw6ICM4OEZGRkY7IH1cXG5cXG4uZW1waXJlMTAge1xcbiAgZmlsbDogIzg4RkY4ODsgfVxcblxcbi5lbXBpcmUxMSB7XFxuICBmaWxsOiAjODhGRjAwOyB9XFxuXFxuLmVtcGlyZTEyIHtcXG4gIGZpbGw6ICM4ODg4RkY7IH1cXG5cXG4uZW1waXJlMTMge1xcbiAgZmlsbDogIzg4ODg4ODsgfVxcblxcbi5lbXBpcmUxNCB7XFxuICBmaWxsOiAjODg4ODAwOyB9XFxuXFxuLmVtcGlyZTE1IHtcXG4gIGZpbGw6ICM4ODAwRkY7IH1cXG5cXG4uZW1waXJlMTYge1xcbiAgZmlsbDogIzg4MDA4ODsgfVxcblxcbi5lbXBpcmUxNyB7XFxuICBmaWxsOiAjODgwMDAwOyB9XFxuXFxuLmVtcGlyZTE4IHtcXG4gIGZpbGw6ICMwMEZGRkY7IH1cXG5cXG4uZW1waXJlMTkge1xcbiAgZmlsbDogIzAwRkY4ODsgfVxcblxcbi5lbXBpcmUyMCB7XFxuICBmaWxsOiAjMDBGRjAwOyB9XFxuXFxuLmVtcGlyZTIxIHtcXG4gIGZpbGw6ICMwMDg4RkY7IH1cXG5cXG4uZW1waXJlMjIge1xcbiAgZmlsbDogIzAwODg4ODsgfVxcblxcbi5lbXBpcmUyMyB7XFxuICBmaWxsOiAjMDA4ODAwOyB9XFxuXFxuLmVtcGlyZTI0IHtcXG4gIGZpbGw6ICMwMDAwRkY7IH1cXG5cXG4uZW1waXJlMjUge1xcbiAgZmlsbDogIzAwMDA4ODsgfVxcblxcbi5zdWNjZXNzIHtcXG4gIHN0cm9rZTogIzFDMTsgfVxcblxcbi5ib3VuY2Uge1xcbiAgc3Ryb2tlOiAjRDUwOyB9XFxuXFxuLm1vdmUge1xcbiAgc3Ryb2tlOiAjMDAwOyB9XFxuXFxuc3ZnIHRleHQge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTsgfVxcblxcbnN2ZyB0ZXh0OjpzZWxlY3Rpb24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTsgfVxcblxcbi5lMDEtbGlnaHQge1xcbiAgZmlsbDogIzAwMDA3ZjsgfVxcblxcbi5lMDEtbWVkaXVtIHtcXG4gIGZpbGw6ICMwMDAwNjU7IH1cXG5cXG4uZTAxLXNoYWRvdyB7XFxuICBmaWxsOiAjMDAwMDRjOyB9XFxuXFxuLmUwMi1saWdodCB7XFxuICBmaWxsOiAjMDAwMGZmOyB9XFxuXFxuLmUwMi1tZWRpdW0ge1xcbiAgZmlsbDogIzAwMDBjYzsgfVxcblxcbi5lMDItc2hhZG93IHtcXG4gIGZpbGw6ICMwMDAwOTk7IH1cXG5cXG4uZTAzLWxpZ2h0IHtcXG4gIGZpbGw6ICMwMDdmMDA7IH1cXG5cXG4uZTAzLW1lZGl1bSB7XFxuICBmaWxsOiAjMDA2NTAwOyB9XFxuXFxuLmUwMy1zaGFkb3cge1xcbiAgZmlsbDogIzAwNGMwMDsgfVxcblxcbi5lMDQtbGlnaHQge1xcbiAgZmlsbDogIzAwN2Y3ZjsgfVxcblxcbi5lMDQtbWVkaXVtIHtcXG4gIGZpbGw6ICMwMDY1NjU7IH1cXG5cXG4uZTA0LXNoYWRvdyB7XFxuICBmaWxsOiAjMDA0YzRjOyB9XFxuXFxuLmUwNS1saWdodCB7XFxuICBmaWxsOiAjMDA3ZmZmOyB9XFxuXFxuLmUwNS1tZWRpdW0ge1xcbiAgZmlsbDogIzAwNjVjYzsgfVxcblxcbi5lMDUtc2hhZG93IHtcXG4gIGZpbGw6ICMwMDRjOTk7IH1cXG5cXG4uZTA2LWxpZ2h0IHtcXG4gIGZpbGw6ICMwMGZmMDA7IH1cXG5cXG4uZTA2LW1lZGl1bSB7XFxuICBmaWxsOiAjMDBjYzAwOyB9XFxuXFxuLmUwNi1zaGFkb3cge1xcbiAgZmlsbDogIzAwOTkwMDsgfVxcblxcbi5lMDctbGlnaHQge1xcbiAgZmlsbDogIzAwZmY3ZjsgfVxcblxcbi5lMDctbWVkaXVtIHtcXG4gIGZpbGw6ICMwMGNjNjU7IH1cXG5cXG4uZTA3LXNoYWRvdyB7XFxuICBmaWxsOiAjMDA5OTRjOyB9XFxuXFxuLmUwOC1saWdodCB7XFxuICBmaWxsOiAjMDBmZmZmOyB9XFxuXFxuLmUwOC1tZWRpdW0ge1xcbiAgZmlsbDogIzAwY2NjYzsgfVxcblxcbi5lMDgtc2hhZG93IHtcXG4gIGZpbGw6ICMwMDk5OTk7IH1cXG5cXG4uZTA5LWxpZ2h0IHtcXG4gIGZpbGw6ICM3ZjAwMDA7IH1cXG5cXG4uZTA5LW1lZGl1bSB7XFxuICBmaWxsOiAjNjUwMDAwOyB9XFxuXFxuLmUwOS1zaGFkb3cge1xcbiAgZmlsbDogIzRjMDAwMDsgfVxcblxcbi5lMTAtbGlnaHQge1xcbiAgZmlsbDogIzdmMDA3ZjsgfVxcblxcbi5lMTAtbWVkaXVtIHtcXG4gIGZpbGw6ICM2NTAwNjU7IH1cXG5cXG4uZTEwLXNoYWRvdyB7XFxuICBmaWxsOiAjNGMwMDRjOyB9XFxuXFxuLmUxMS1saWdodCB7XFxuICBmaWxsOiAjN2YwMGZmOyB9XFxuXFxuLmUxMS1tZWRpdW0ge1xcbiAgZmlsbDogIzY1MDBjYzsgfVxcblxcbi5lMTEtc2hhZG93IHtcXG4gIGZpbGw6ICM0YzAwOTk7IH1cXG5cXG4uZTEyLWxpZ2h0IHtcXG4gIGZpbGw6ICM3ZjdmMDA7IH1cXG5cXG4uZTEyLW1lZGl1bSB7XFxuICBmaWxsOiAjNjU2NTAwOyB9XFxuXFxuLmUxMi1zaGFkb3cge1xcbiAgZmlsbDogIzRjNGMwMDsgfVxcblxcbi5lMTMtbGlnaHQge1xcbiAgZmlsbDogIzdmN2Y3ZjsgfVxcblxcbi5lMTMtbWVkaXVtIHtcXG4gIGZpbGw6ICM2NTY1NjU7IH1cXG5cXG4uZTEzLXNoYWRvdyB7XFxuICBmaWxsOiAjNGM0YzRjOyB9XFxuXFxuLmUxNC1saWdodCB7XFxuICBmaWxsOiAjN2Y3ZmZmOyB9XFxuXFxuLmUxNC1tZWRpdW0ge1xcbiAgZmlsbDogIzY1NjVjYzsgfVxcblxcbi5lMTQtc2hhZG93IHtcXG4gIGZpbGw6ICM0YzRjOTk7IH1cXG5cXG4uZTE1LWxpZ2h0IHtcXG4gIGZpbGw6ICM3ZmZmMDA7IH1cXG5cXG4uZTE1LW1lZGl1bSB7XFxuICBmaWxsOiAjNjVjYzAwOyB9XFxuXFxuLmUxNS1zaGFkb3cge1xcbiAgZmlsbDogIzRjOTkwMDsgfVxcblxcbi5lMTYtbGlnaHQge1xcbiAgZmlsbDogIzdmZmY3ZjsgfVxcblxcbi5lMTYtbWVkaXVtIHtcXG4gIGZpbGw6ICM2NWNjNjU7IH1cXG5cXG4uZTE2LXNoYWRvdyB7XFxuICBmaWxsOiAjNGM5OTRjOyB9XFxuXFxuLmUxNy1saWdodCB7XFxuICBmaWxsOiAjN2ZmZmZmOyB9XFxuXFxuLmUxNy1tZWRpdW0ge1xcbiAgZmlsbDogIzY1Y2NjYzsgfVxcblxcbi5lMTctc2hhZG93IHtcXG4gIGZpbGw6ICM0Yzk5OTk7IH1cXG5cXG4uZTE4LWxpZ2h0IHtcXG4gIGZpbGw6ICNmZjAwMDA7IH1cXG5cXG4uZTE4LW1lZGl1bSB7XFxuICBmaWxsOiAjY2MwMDAwOyB9XFxuXFxuLmUxOC1zaGFkb3cge1xcbiAgZmlsbDogIzk5MDAwMDsgfVxcblxcbi5lMTktbGlnaHQge1xcbiAgZmlsbDogI2ZmMDA3ZjsgfVxcblxcbi5lMTktbWVkaXVtIHtcXG4gIGZpbGw6ICNjYzAwNjU7IH1cXG5cXG4uZTE5LXNoYWRvdyB7XFxuICBmaWxsOiAjOTkwMDRjOyB9XFxuXFxuLmUyMC1saWdodCB7XFxuICBmaWxsOiAjZmYwMGZmOyB9XFxuXFxuLmUyMC1tZWRpdW0ge1xcbiAgZmlsbDogI2NjMDBjYzsgfVxcblxcbi5lMjAtc2hhZG93IHtcXG4gIGZpbGw6ICM5OTAwOTk7IH1cXG5cXG4uZTIxLWxpZ2h0IHtcXG4gIGZpbGw6ICNmZjdmMDA7IH1cXG5cXG4uZTIxLW1lZGl1bSB7XFxuICBmaWxsOiAjY2M2NTAwOyB9XFxuXFxuLmUyMS1zaGFkb3cge1xcbiAgZmlsbDogIzk5NGMwMDsgfVxcblxcbi5lMjItbGlnaHQge1xcbiAgZmlsbDogI2ZmN2Y3ZjsgfVxcblxcbi5lMjItbWVkaXVtIHtcXG4gIGZpbGw6ICNjYzY1NjU7IH1cXG5cXG4uZTIyLXNoYWRvdyB7XFxuICBmaWxsOiAjOTk0YzRjOyB9XFxuXFxuLmUyMy1saWdodCB7XFxuICBmaWxsOiAjZmY3ZmZmOyB9XFxuXFxuLmUyMy1tZWRpdW0ge1xcbiAgZmlsbDogI2NjNjVjYzsgfVxcblxcbi5lMjMtc2hhZG93IHtcXG4gIGZpbGw6ICM5OTRjOTk7IH1cXG5cXG4uZTI0LWxpZ2h0IHtcXG4gIGZpbGw6ICNmZmZmMDA7IH1cXG5cXG4uZTI0LW1lZGl1bSB7XFxuICBmaWxsOiAjY2NjYzAwOyB9XFxuXFxuLmUyNC1zaGFkb3cge1xcbiAgZmlsbDogIzk5OTkwMDsgfVxcblxcbi5lMjUtbGlnaHQge1xcbiAgZmlsbDogI2ZmZmY3ZjsgfVxcblxcbi5lMjUtbWVkaXVtIHtcXG4gIGZpbGw6ICNjY2NjNjU7IH1cXG5cXG4uZTI1LXNoYWRvdyB7XFxuICBmaWxsOiAjOTk5OTRjOyB9XFxuXCIsIFwiXCJdKTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2JvYXJkLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYm9hcmQuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYm9hcmQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmdhbWVCb2FyZCB7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMTAyNTQyO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgaGVpZ2h0OiA4MHZtaW47XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9wYXBlclRleHR1cmUuanBnKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsgfVxcblxcbi51bml0IHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXCIsIFwiXCJdKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=