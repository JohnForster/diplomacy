!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=27)}([function(e,n,t){"use strict";var r=t(3),o=t(9),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===a.call(e)}function c(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var t=0,r=e.length;t<r;t++)n.call(null,e[t],t,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var n={};function t(t,r){"object"==typeof n[r]&&"object"==typeof t?n[r]=e(n[r],t):n[r]=t}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],t);return n},extend:function(e,n,t){return c(n,function(n,o){e[o]=t&&"function"==typeof n?r(n,t):n}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,n,t){e.exports=t(8)},function(e,n,t){"use strict";(function(n){var r=t(0),o=t(12),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,n){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=t(4):void 0!==n&&(s=t(4)),s),transformRequest:[function(e,n){return o(n,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(a)}),e.exports=u}).call(this,t(11))},function(e,n,t){"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return e.apply(n,t)}}},function(e,n,t){"use strict";var r=t(0),o=t(13),a=t(15),i=t(16),s=t(17),u=t(5),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||t(18);e.exports=function(e){return new Promise(function(n,l){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||s(e.url)||(d=new window.XDomainRequest,h="onload",y=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var _=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+c(_+":"+m)}if(d.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||y)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var t="getAllResponseHeaders"in d?i(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:t,config:e,request:d};o(n,l,r),d=null}},d.onerror=function(){l(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var g=t(19),v=(e.withCredentials||s(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;v&&(p[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(p,function(e,n){void 0===f&&"content-type"===n.toLowerCase()?delete p[n]:d.setRequestHeader(n,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),l(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,n,t){"use strict";var r=t(14);e.exports=function(e,n,t,o,a){var i=new Error(e);return r(i,n,t,o,a)}},function(e,n,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,t){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,n,t){"use strict";var r=t(0),o=t(3),a=t(10),i=t(2);function s(e){var n=new a(e),t=o(a.prototype.request,n);return r.extend(t,a.prototype,n),r.extend(t,n),t}var u=s(i);u.Axios=a,u.create=function(e){return s(r.merge(i,e))},u.Cancel=t(7),u.CancelToken=t(25),u.isCancel=t(6),u.all=function(e){return Promise.all(e)},u.spread=t(26),e.exports=u,e.exports.default=u},function(e,n){function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,n,t){"use strict";var r=t(2),o=t(0),a=t(20),i=t(21);function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var n=[i,void 0],t=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){n.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){n.push(e.fulfilled,e.rejected)});n.length;)t=t.then(n.shift(),n.shift());return t},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(n,t){return this.request(o.merge(t||{},{method:e,url:n}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(n,t,r){return this.request(o.merge(r||{},{method:e,url:n,data:t}))}}),e.exports=s},function(e,n){var t,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var n=c.length;n;){for(u=c,c=[];++f<n;)u&&u[f].run();f=-1,n=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function h(e,n){this.fun=e,this.array=n}function y(){}o.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];c.push(new h(e,n)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,n,t){"use strict";var r=t(0);e.exports=function(e,n){r.forEach(e,function(t,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[r])})}},function(e,n,t){"use strict";var r=t(5);e.exports=function(e,n,t){var o=t.config.validateStatus;t.status&&o&&!o(t.status)?n(r("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},function(e,n,t){"use strict";e.exports=function(e,n,t,r,o){return e.config=n,t&&(e.code=t),e.request=r,e.response=o,e}},function(e,n,t){"use strict";var r=t(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var a;if(t)a=t(n);else if(r.isURLSearchParams(n))a=n.toString();else{var i=[];r.forEach(n,function(e,n){null!=e&&(r.isArray(e)?n+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(n)+"="+o(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,n,t){"use strict";var r=t(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),n=r.trim(e.substr(0,a)).toLowerCase(),t=r.trim(e.substr(a+1)),n){if(i[n]&&o.indexOf(n)>=0)return;i[n]="set-cookie"===n?(i[n]?i[n]:[]).concat([t]):i[n]?i[n]+", "+t:t}}),i):i}},function(e,n,t){"use strict";var r=t(0);e.exports=r.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function o(e){var r=e;return n&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=o(window.location.href),function(n){var t=r.isString(n)?o(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},function(e,n,t){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var n,t,a=String(e),i="",s=0,u=r;a.charAt(0|s)||(u="=",s%1);i+=u.charAt(63&n>>8-s%1*8)){if((t=a.charCodeAt(s+=.75))>255)throw new o;n=n<<8|t}return i}},function(e,n,t){"use strict";var r=t(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,n,t,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(n)),r.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,t){"use strict";var r=t(0);function o(){this.handlers=[]}o.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(n){null!==n&&e(n)})},e.exports=o},function(e,n,t){"use strict";var r=t(0),o=t(22),a=t(6),i=t(2),s=t(23),u=t(24);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(n){delete e.headers[n]}),(e.adapter||i.adapter)(e).then(function(n){return c(e),n.data=o(n.data,n.headers,e.transformResponse),n},function(n){return a(n)||(c(e),n&&n.response&&(n.response.data=o(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)})}},function(e,n,t){"use strict";var r=t(0);e.exports=function(e,n,t){return r.forEach(t,function(t){e=t(e,n)}),e}},function(e,n,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,t){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,t){"use strict";var r=t(7);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(e){n=e});var t=this;e(function(e){t.reason||(t.reason=new r(e),n(t.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(n){e=n}),cancel:e}},e.exports=o},function(e,n,t){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,t){"use strict";t.r(n);var r=function(){},o={},a=[],i=[];function s(e,n){var t,s,u,c,l=i;for(c=arguments.length;c-- >2;)a.push(arguments[c]);for(n&&null!=n.children&&(a.length||a.push(n.children),delete n.children);a.length;)if((s=a.pop())&&void 0!==s.pop)for(c=s.length;c--;)a.push(s[c]);else"boolean"==typeof s&&(s=null),(u="function"!=typeof e)&&(null==s?s="":"number"==typeof s?s=String(s):"string"!=typeof s&&(u=!1)),u&&t?l[l.length-1]+=s:l===i?l=[s]:l.push(s),t=u;var f=new r;return f.nodeName=e,f.children=l,f.attributes=null==n?void 0:n,f.key=null==n?void 0:n.key,void 0!==o.vnode&&o.vnode(f),f}function u(e,n){for(var t in n)e[t]=n[t];return e}function c(e,n){null!=e&&("function"==typeof e?e(n):e.current=n)}var l="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;var f=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,p=[];function d(e){!e._dirty&&(e._dirty=!0)&&1==p.push(e)&&(o.debounceRendering||l)(h)}function h(){for(var e;e=p.pop();)e._dirty&&M(e)}function y(e,n){return e.normalizedNodeName===n||e.nodeName.toLowerCase()===n.toLowerCase()}function _(e){var n=u({},e.attributes);n.children=e.children;var t=e.nodeName.defaultProps;if(void 0!==t)for(var r in t)void 0===n[r]&&(n[r]=t[r]);return n}function m(e){var n=e.parentNode;n&&n.removeChild(e)}function g(e,n,t,r,o){if("className"===n&&(n="class"),"key"===n);else if("ref"===n)c(t,null),c(r,e);else if("class"!==n||o)if("style"===n){if(r&&"string"!=typeof r&&"string"!=typeof t||(e.style.cssText=r||""),r&&"object"==typeof r){if("string"!=typeof t)for(var a in t)a in r||(e.style[a]="");for(var a in r)e.style[a]="number"==typeof r[a]&&!1===f.test(a)?r[a]+"px":r[a]}}else if("dangerouslySetInnerHTML"===n)r&&(e.innerHTML=r.__html||"");else if("o"==n[0]&&"n"==n[1]){var i=n!==(n=n.replace(/Capture$/,""));n=n.toLowerCase().substring(2),r?t||e.addEventListener(n,v,i):e.removeEventListener(n,v,i),(e._listeners||(e._listeners={}))[n]=r}else if("list"!==n&&"type"!==n&&!o&&n in e){try{e[n]=null==r?"":r}catch(e){}null!=r&&!1!==r||"spellcheck"==n||e.removeAttribute(n)}else{var s=o&&n!==(n=n.replace(/^xlink:?/,""));null==r||!1===r?s?e.removeAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase()):e.removeAttribute(n):"function"!=typeof r&&(s?e.setAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase(),r):e.setAttribute(n,r))}else e.className=r||""}function v(e){return this._listeners[e.type](o.event&&o.event(e)||e)}var S=[],x=0,w=!1,b=!1;function B(){for(var e;e=S.shift();)o.afterMount&&o.afterMount(e),e.componentDidMount&&e.componentDidMount()}function A(e,n,t,r,o,a){x++||(w=null!=o&&void 0!==o.ownerSVGElement,b=null!=e&&!("__preactattr_"in e));var i=C(e,n,t,r,a);return o&&i.parentNode!==o&&o.appendChild(i),--x||(b=!1,a||B()),i}function C(e,n,t,r,o){var a=e,i=w;if(null!=n&&"boolean"!=typeof n||(n=""),"string"==typeof n||"number"==typeof n)return e&&void 0!==e.splitText&&e.parentNode&&(!e._component||o)?e.nodeValue!=n&&(e.nodeValue=n):(a=document.createTextNode(n),e&&(e.parentNode&&e.parentNode.replaceChild(a,e),N(e,!0))),a.__preactattr_=!0,a;var s,u,c=n.nodeName;if("function"==typeof c)return function(e,n,t,r){var o=e&&e._component,a=o,i=e,s=o&&e._componentConstructor===n.nodeName,u=s,c=_(n);for(;o&&!u&&(o=o._parentComponent);)u=o.constructor===n.nodeName;o&&u&&(!r||o._component)?(L(o,c,3,t,r),e=o.base):(a&&!s&&(O(a),e=i=null),o=E(n.nodeName,c,t),e&&!o.nextBase&&(o.nextBase=e,i=null),L(o,c,1,t,r),e=o.base,i&&e!==i&&(i._component=null,N(i,!1)));return e}(e,n,t,r);if(w="svg"===c||"foreignObject"!==c&&w,c=String(c),(!e||!y(e,c))&&(s=c,(u=w?document.createElementNS("http://www.w3.org/2000/svg",s):document.createElement(s)).normalizedNodeName=s,a=u,e)){for(;e.firstChild;)a.appendChild(e.firstChild);e.parentNode&&e.parentNode.replaceChild(a,e),N(e,!0)}var l=a.firstChild,f=a.__preactattr_,p=n.children;if(null==f){f=a.__preactattr_={};for(var d=a.attributes,h=d.length;h--;)f[d[h].name]=d[h].value}return!b&&p&&1===p.length&&"string"==typeof p[0]&&null!=l&&void 0!==l.splitText&&null==l.nextSibling?l.nodeValue!=p[0]&&(l.nodeValue=p[0]):(p&&p.length||null!=l)&&function(e,n,t,r,o){var a,i,s,u,c,l=e.childNodes,f=[],p={},d=0,h=0,_=l.length,g=0,v=n?n.length:0;if(0!==_)for(var S=0;S<_;S++){var x=l[S],w=x.__preactattr_,b=v&&w?x._component?x._component.__key:w.key:null;null!=b?(d++,p[b]=x):(w||(void 0!==x.splitText?!o||x.nodeValue.trim():o))&&(f[g++]=x)}if(0!==v)for(var S=0;S<v;S++){u=n[S],c=null;var b=u.key;if(null!=b)d&&void 0!==p[b]&&(c=p[b],p[b]=void 0,d--);else if(h<g)for(a=h;a<g;a++)if(void 0!==f[a]&&(B=i=f[a],k=o,"string"==typeof(A=u)||"number"==typeof A?void 0!==B.splitText:"string"==typeof A.nodeName?!B._componentConstructor&&y(B,A.nodeName):k||B._componentConstructor===A.nodeName)){c=i,f[a]=void 0,a===g-1&&g--,a===h&&h++;break}c=C(c,u,t,r),s=l[S],c&&c!==e&&c!==s&&(null==s?e.appendChild(c):c===s.nextSibling?m(s):e.insertBefore(c,s))}var B,A,k;if(d)for(var S in p)void 0!==p[S]&&N(p[S],!1);for(;h<=g;)void 0!==(c=f[g--])&&N(c,!1)}(a,p,t,r,b||null!=f.dangerouslySetInnerHTML),function(e,n,t){var r;for(r in t)n&&null!=n[r]||null==t[r]||g(e,r,t[r],t[r]=void 0,w);for(r in n)"children"===r||"innerHTML"===r||r in t&&n[r]===("value"===r||"checked"===r?e[r]:t[r])||g(e,r,t[r],t[r]=n[r],w)}(a,n.attributes,f),w=i,a}function N(e,n){var t=e._component;t?O(t):(null!=e.__preactattr_&&c(e.__preactattr_.ref,null),!1!==n&&null!=e.__preactattr_||m(e),k(e))}function k(e){for(e=e.lastChild;e;){var n=e.previousSibling;N(e,!0),e=n}}var T=[];function E(e,n,t){var r,o=T.length;for(e.prototype&&e.prototype.render?(r=new e(n,t),R.call(r,n,t)):((r=new R(n,t)).constructor=e,r.render=P);o--;)if(T[o].constructor===e)return r.nextBase=T[o].nextBase,T.splice(o,1),r;return r}function P(e,n,t){return this.constructor(e,t)}function L(e,n,t,r,a){e._disable||(e._disable=!0,e.__ref=n.ref,e.__key=n.key,delete n.ref,delete n.key,void 0===e.constructor.getDerivedStateFromProps&&(!e.base||a?e.componentWillMount&&e.componentWillMount():e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r)),r&&r!==e.context&&(e.prevContext||(e.prevContext=e.context),e.context=r),e.prevProps||(e.prevProps=e.props),e.props=n,e._disable=!1,0!==t&&(1!==t&&!1===o.syncComponentUpdates&&e.base?d(e):M(e,1,a)),c(e.__ref,e))}function M(e,n,t,r){if(!e._disable){var a,i,s,c=e.props,l=e.state,f=e.context,p=e.prevProps||c,d=e.prevState||l,h=e.prevContext||f,y=e.base,m=e.nextBase,g=y||m,v=e._component,w=!1,b=h;if(e.constructor.getDerivedStateFromProps&&(l=u(u({},l),e.constructor.getDerivedStateFromProps(c,l)),e.state=l),y&&(e.props=p,e.state=d,e.context=h,2!==n&&e.shouldComponentUpdate&&!1===e.shouldComponentUpdate(c,l,f)?w=!0:e.componentWillUpdate&&e.componentWillUpdate(c,l,f),e.props=c,e.state=l,e.context=f),e.prevProps=e.prevState=e.prevContext=e.nextBase=null,e._dirty=!1,!w){a=e.render(c,l,f),e.getChildContext&&(f=u(u({},f),e.getChildContext())),y&&e.getSnapshotBeforeUpdate&&(b=e.getSnapshotBeforeUpdate(p,d));var C,k,T=a&&a.nodeName;if("function"==typeof T){var P=_(a);(i=v)&&i.constructor===T&&P.key==i.__key?L(i,P,1,f,!1):(C=i,e._component=i=E(T,P,f),i.nextBase=i.nextBase||m,i._parentComponent=e,L(i,P,0,f,!1),M(i,1,t,!0)),k=i.base}else s=g,(C=v)&&(s=e._component=null),(g||1===n)&&(s&&(s._component=null),k=A(s,a,f,t||!y,g&&g.parentNode,!0));if(g&&k!==g&&i!==v){var R=g.parentNode;R&&k!==R&&(R.replaceChild(k,g),C||(g._component=null,N(g,!1)))}if(C&&O(C),e.base=k,k&&!r){for(var U=e,G=e;G=G._parentComponent;)(U=G).base=k;k._component=U,k._componentConstructor=U.constructor}}for(!y||t?S.push(e):w||(e.componentDidUpdate&&e.componentDidUpdate(p,d,b),o.afterUpdate&&o.afterUpdate(e));e._renderCallbacks.length;)e._renderCallbacks.pop().call(e);x||r||B()}}function O(e){o.beforeUnmount&&o.beforeUnmount(e);var n=e.base;e._disable=!0,e.componentWillUnmount&&e.componentWillUnmount(),e.base=null;var t=e._component;t?O(t):n&&(null!=n.__preactattr_&&c(n.__preactattr_.ref,null),e.nextBase=n,m(n),T.push(e),k(n)),c(e.__ref,null)}function R(e,n){this._dirty=!0,this.context=n,this.props=e,this.state=this.state||{},this._renderCallbacks=[]}function U(e,n,t){return A(t,e,{},!1,n,!1)}u(R.prototype,{setState:function(e,n){this.prevState||(this.prevState=this.state),this.state=u(u({},this.state),"function"==typeof e?e(this.state,this.props):e),n&&this._renderCallbacks.push(n),d(this)},forceUpdate:function(e){e&&this._renderCallbacks.push(e),M(this,2)},render:function(){}});var G,j=function(e,n){return e.then(function(e){return[null,e]}).catch(function(e){return n&&Object.assign(e,n),[e,void 0]})},I=t(1),D=t.n(I);!function(e){e[e.England=0]="England",e[e.France=1]="France",e[e.Germany=2]="Germany",e[e.Italy=3]="Italy",e[e.Austria=4]="Austria",e[e.Turkey=5]="Turkey",e[e.Russia=6]="Russia"}(G||(G={}));var W,F=G,H={Switzerland:{x:219,y:376},Adriatic_Sea:{x:296,y:441},Aegean_Sea:{x:403,y:524},Albania:{x:339,y:469},Ankara:{x:500,y:460},scAnkara:{x:482,y:469},Apulia:{x:302,y:472},Armenia:{x:576,y:456},Baltic_Sea:{x:323,y:250},Barents_Sea:{x:445,y:41},Belgium:{x:197,y:317},scBelgium:{x:186,y:305},Berlin:{x:279,y:283},scBerlin:{x:281,y:298},Black_Sea:{x:484,y:420},Bohemia:{x:289,y:336},Brest:{x:125,y:334},scBrest:{x:106,y:322},Budapest:{x:353,y:378},scBudapest:{x:326,y:376},Bulgaria:{x:395,y:443},scBulgaria:{x:377,y:444},Bulgaria__ec:{x:410,y:440},Bulgaria__sc:{x:399,y:462},Burgundy:{x:191,y:360},Clyde:{x:139,y:188},Constantinople:{x:439,y:473},scConstantinople:{x:429,y:460},Denmark:{x:256,y:245},scDenmark:{x:272,y:252},Eastern_Mediterranean:{x:474,y:546},Edinburgh:{x:157,y:210},scEdinburgh:{x:154,y:219},English_Channel:{x:119,y:307},Finland:{x:385,y:143},Galicia:{x:377,y:343},Gascony:{x:137,y:388},Greece:{x:366,y:515},scGreece:{x:378,y:507},Gulf_of_Lyon:{x:180,y:444},Gulf_of_Bothnia:{x:348,y:199},Helgoland_Bight:{x:226,y:252},Holland:{x:205,y:297},scHolland:{x:205,y:284},Ionian_Sea:{x:324,y:540},Irish_Sea:{x:90,y:276},Kiel:{x:243,y:295},scKiel:{x:254,y:278},Liverpool:{x:142,y:241},scLiverpool:{x:144,y:257},Livonia:{x:382,y:245},London:{x:162,y:281},scLondon:{x:162,y:290},Marseilles:{x:188,y:398},scMarseilles:{x:186,y:417},Mid_Atlantic_Ocean:{x:23,y:355},Moscow:{x:505,y:226},scMoscow:{x:481,y:234},Munich:{x:243,y:347},scMunich:{x:258,y:359},Naples:{x:299,y:505},scNaples:{x:278,y:469},North_Atlantic_Ocean:{x:65,y:140},North_Africa:{x:100,y:536},North_Sea:{x:204,y:215},Norway:{x:264,y:160},scNorway:{x:270,y:187},Norwegian_Sea:{x:220,y:90},Paris:{x:162,y:346},scParis:{x:173,y:334},Picardy:{x:168,y:319},Piedmont:{x:220,y:395},Portugal:{x:34,y:417},scPortugal:{x:15,y:434},Prussia:{x:315,y:283},Rome:{x:264,y:452},scRome:{x:252,y:443},Ruhr:{x:223,y:320},Rumania:{x:415,y:405},scRumania:{x:402,y:413},Serbia:{x:351,y:438},scSerbia:{x:343,y:419},Sevastopol:{x:515,y:330},scSevastopol:{x:483,y:396},Silesia:{x:304,y:314},Skagerrak:{x:260,y:212},Smyrna:{x:490,y:505},scSmyrna:{x:424,y:502},Spain:{x:64,y:439},scSpain:{x:80,y:432},Spain__nc:{x:80,y:404},Spain__sc:{x:52,y:475},St_Petersburg:{x:500,y:140},scSt_Petersburg:{x:418,y:187},St_Petersburg__nc:{x:472,y:122},St_Petersburg__sc:{x:418,y:205},Sweden:{x:315,y:140},scSweden:{x:323,y:196},Syria:{x:570,y:520},Trieste:{x:305,y:412},scTrieste:{x:284,y:396},Tunis:{x:212,y:542},scTunis:{x:220,y:529},Tuscany:{x:247,y:430},Tyrolia:{x:277,y:378},Tyrrhenian_Sea:{x:246,y:483},Ukraine:{x:427,y:327},Venice:{x:250,y:408},scVenice:{x:261,y:397},Vienna:{x:314,y:360},scVienna:{x:301,y:363},Wales:{x:125,y:285},Warsaw:{x:361,y:315},scWarsaw:{x:346,y:302},Western_Mediterranean:{x:140,y:492},Yorkshire:{x:161,y:254}},V=JSON.stringify({moves:[{country:"England",start:"English_Channel",end:"Brest"},{country:"Italy",start:"Rome",end:"Tyrrhenian_Sea"},{country:"France",start:"Burgundy",end:"Marseilles"}]}),q={Adriatic_Sea:["Ionian_Sea","Albania","Apulia","Trieste","Venice"],Aegean_Sea:["Eastern_Mediterranean","Ionian_Sea","Bulgaria__sc","Constantinople","Greece","Smyrna"],Baltic_Sea:["Gulf_of_Bothnia","Skagerrak","Berlin","Denmark","Kiel","Livonia","Prussia","Sweden"],Barents_Sea:["Norwegian_Sea","Norway","St_Petersburg__nc"],Black_Sea:["Ankara","Armenia","Constantinople","Rumania","Sevastopol"],Eastern_Mediterranean:["Aegean_Sea","Ionian_Sea","Smyrna","Syria"],English_Channel:["Irish_Sea","Mid_Atlantic_Ocean","North_Sea","Belgium","Brest","London","Picardy","Wales"],Gulf_of_Lyon:["Tyrrhenian_Sea","Western_Mediterranean","Marseilles","Piedmont","Spain__sc","Tuscany"],Gulf_of_Bothnia:["Baltic_Sea","Finland","Livonia","St_Petersburg__sc","Sweden"],Helgoland_Bight:["North_Sea","Denmark","Holland","Kiel"],Ionian_Sea:["Adriatic_Sea","Aegean_Sea","Eastern_Mediterranean","Tyrrhenian_Sea","Albania","Apulia","Greece","Naples","Tunis"],Irish_Sea:["English_Channel","Mid_Atlantic_Ocean","North_Atlantic_Ocean","Liverpool","Wales"],Mid_Atlantic_Ocean:["English_Channel","Irish_Sea","North_Atlantic_Ocean","Western_Mediterranean","Brest","Gascony","North_Africa","Portugal","Spain__nc","Spain__sc"],North_Atlantic_Ocean:["Irish_Sea","Mid_Atlantic_Ocean","Norwegian_Sea","Clyde","Liverpool"],North_Sea:["English_Channel","Helgoland_Bight","Norwegian_Sea","Skagerrak","Belgium","Denmark","Edinburgh","Holland","London","Norway","Yorkshire"],Norwegian_Sea:["Barents_Sea","North_Atlantic_Ocean","North_Sea","Clyde","Edinburgh","Norway"],Skagerrak:["Baltic_Sea","North_Sea","Denmark","Norway","Sweden"],Tyrrhenian_Sea:["Gulf_of_Lyon","Ionian_Sea","Naples","Rome","Tunis","Tuscany"],Western_Mediterranean:["Gulf_of_Lyon","Mid_Atlantic_Ocean","North_Africa","Spain__sc","Tunis"],Switzerland:[],Ireland:[],Corsica:[],Sardinia:[],Mallorca:[],Sicily:[],Crete:[],Albania:["Adriatic_Sea","Ionian_Sea","Greece","Serbia","Trieste"],Ankara:["Black_Sea","Armenia","Constantinople","Smyrna"],Apulia:["Adriatic_Sea","Ionian_Sea","Naples","Rome","Venice"],Armenia:["Black_Sea","Ankara","Sevastopol","Smyrna","Syria"],Belgium:["English_Channel","North_Sea","Burgundy","Holland","Picardy","Ruhr"],Berlin:["Baltic_Sea","Kiel","Munich","Prussia","Silesia"],Bohemia:["Galicia","Munich","Silesia","Tyrolia","Vienna"],Brest:["English_Channel","Mid_Atlantic_Ocean","Gascony","Paris","Picardy"],Budapest:["Galicia","Rumania","Serbia","Trieste","Vienna"],Bulgaria__sc:["Aegean_Sea","Constantinople","Greece","Serbia"],Burgundy:["Belgium","Gascony","Marseilles","Munich","Paris","Picardy","Ruhr"],Clyde:["North_Atlantic_Ocean","Norwegian_Sea","Edinburgh","Liverpool"],Constantinople:["Aegean_Sea","Black_Sea","Ankara","Bulgaria__sc","Smyrna"],Denmark:["Baltic_Sea","Helgoland_Bight","North_Sea","Skagerrak","Kiel","Sweden"],Edinburgh:["North_Sea","Norwegian_Sea","Clyde","Liverpool","Yorkshire"],Finland:["Gulf_of_Bothnia","Norway","St_Petersburg__nc","St_Petersburg__sc","Sweden"],Galicia:["Bohemia","Budapest","Rumania","Silesia","Ukraine","Vienna","Warsaw"],Gascony:["Mid_Atlantic_Ocean","Brest","Burgundy","Marseilles","Paris","Spain__nc","Spain__sc"],Greece:["Aegean_Sea","Ionian_Sea","Albania","Bulgaria__sc","Serbia"],Holland:["Helgoland_Bight","North_Sea","Belgium","Kiel","Ruhr"],Kiel:["Baltic_Sea","Helgoland_Bight","Berlin","Denmark","Holland","Munich","Ruhr"],Liverpool:["Irish_Sea","North_Atlantic_Ocean","Clyde","Edinburgh","Wales","Yorkshire"],Livonia:["Baltic_Sea","Gulf_of_Bothnia","Moscow","Prussia","St_Petersburg__sc","Warsaw"],London:["English_Channel","North_Sea","Wales","Yorkshire"],Marseilles:["Gulf_of_Lyon","Burgundy","Gascony","Piedmont","Spain__sc"],Moscow:["Livonia","Sevastopol","St_Petersburg__nc","St_Petersburg__sc","Ukraine","Warsaw"],Munich:["Berlin","Bohemia","Burgundy","Kiel","Ruhr","Silesia","Tyrolia"],Naples:["Ionian_Sea","Tyrrhenian_Sea","Apulia","Rome"],North_Africa:["Mid_Atlantic_Ocean","Western_Mediterranean","Tunis"],Norway:["Barents_Sea","North_Sea","Norwegian_Sea","Skagerrak","Finland","Sweden"],Paris:["Brest","Burgundy","Gascony","Picardy"],Picardy:["English_Channel","Belgium","Brest","Burgundy","Paris"],Piedmont:["Gulf_of_Lyon","Marseilles","Tuscany","Tyrolia","Venice"],Portugal:["Mid_Atlantic_Ocean","Spain__nc","Spain__sc"],Prussia:["Baltic_Sea","Berlin","Livonia","Silesia","Warsaw"],Rome:["Tyrrhenian_Sea","Apulia","Naples","Tuscany","Venice"],Ruhr:["Belgium","Burgundy","Holland","Kiel","Munich"],Rumania:["Black_Sea","Budapest","Galicia","Serbia","Sevastopol","Ukraine"],Serbia:["Albania","Budapest","Bulgaria__sc","Greece","Rumania","Trieste"],Sevastopol:["Black_Sea","Armenia","Moscow","Rumania","Ukraine"],Silesia:["Berlin","Bohemia","Galicia","Munich","Prussia","Warsaw"],Smyrna:["Aegean_Sea","Eastern_Mediterranean","Ankara","Armenia","Constantinople","Syria"],Spain__nc:["Mid_Atlantic_Ocean","Gascony","Portugal","Spain__sc"],Spain__sc:["Gulf_of_Lyon","Mid_Atlantic_Ocean","Western_Mediterranean","Gascony","Marseilles","Portugal","Spain__nc"],St_Petersburg__nc:["Barents_Sea","Finland","Moscow","St_Petersburg__sc"],St_Petersburg__sc:["Gulf_of_Bothnia","Finland","Livonia","Moscow","St_Petersburg__nc"],Sweden:["Baltic_Sea","Gulf_of_Bothnia","Skagerrak","Denmark","Finland","Norway"],Syria:["Eastern_Mediterranean","Armenia","Smyrna"],Trieste:["Adriatic_Sea","Albania","Budapest","Serbia","Tyrolia","Venice","Vienna"],Tunis:["Ionian_Sea","Tyrrhenian_Sea","Western_Mediterranean","North_Africa"],Tuscany:["Gulf_of_Lyon","Tyrrhenian_Sea","Piedmont","Rome","Venice"],Tyrolia:["Bohemia","Munich","Piedmont","Trieste","Venice","Vienna"],Ukraine:["Galicia","Moscow","Rumania","Sevastopol","Warsaw"],Venice:["Adriatic_Sea","Apulia","Piedmont","Rome","Trieste","Tuscany","Tyrolia"],Vienna:["Bohemia","Budapest","Galicia","Trieste","Tyrolia"],Wales:["English_Channel","Irish_Sea","Liverpool","London","Yorkshire"],Warsaw:["Galicia","Livonia","Moscow","Prussia","Silesia","Ukraine"],Yorkshire:["North_Sea","Edinburgh","Liverpool","London","Wales"]},K=function(e,n,t,r){return new(t||(t=Promise))(function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function s(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(i,s)}u((r=r.apply(e,n||[])).next())})},z=function(e,n){var t,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(e,i)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},X=new(function(){return function(){var e=this;this.playerCountry="England",this.run=function(){},this.setup=function(n){e.svg=n;var t=Array.from(n.getElementsByClassName("seaTile"));t.push.apply(t,Array.from(n.getElementsByClassName("landTile"))),t.forEach(function(n){n.addEventListener("click",function(t){e.onClick(n.getAttribute("title"))})}),e.drawInstructions(JSON.parse(V)),e.asyncSetup()},this.asyncSetup=function(){return K(e,void 0,void 0,function(){var e,n,t,r=this;return z(this,function(o){switch(o.label){case 0:return[4,j(D.a.get("/game/5cc5d578382f88cc84d4f6e2"))];case 1:if(e=o.sent(),n=e[0],t=e[1],console.log(t),n)throw new Error("No game data found");return t&&t.data.territories.forEach(function(e){e.ownedTerritories.forEach(function(n){return r.setOwnership(n,e.empire)})}),this.drawUnits(),[2]}})})},this.onClick=function(n){e.tileSelected?(e.finishOrder(n),e.drawLine(H[e.tileSelected],H[n]),e.tileSelected=null):e.startOrder(n)},this.finishOrder=function(n){q[e.tileSelected].includes(n)&&(e.drawLine(H[e.tileSelected],H[n]),e.tileSelected=null)},this.startOrder=function(n){e.playerHasUnitAt(n)&&(e.tileSelected=n)},this.playerHasUnitAt=function(n){return!!e.units[e.playerCountry].find(function(e){return e.location===n})},this.drawLine=function(n,t){var r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M "+n.x+" "+n.y+" L "+t.x+" "+t.y),r.setAttribute("stroke","green"),r.style.strokeWidth="2px",r.style.markerEnd="url(#triangle)",e.svg.appendChild(r)},this.drawUnits=function(n){var t=function(t){if(F.hasOwnProperty(t)){var r=F[t];if(!n[r])return"continue";n[r].forEach(function(n){e.drawUnit(n.location,r,n.unitType)})}};for(var r in F)t(r)},this.drawUnit=function(n,t,r){var o=document.createElementNS("http://www.w3.org/2000/svg","use"),a=H[n];o.setAttribute("href",{fleet:"#F",army:"#A"}[r]),o.setAttribute("class",t),o.setAttribute("transform","translate("+a.x+", "+a.y+")"),e.svg.appendChild(o)},this.drawInstructions=function(n){n.moves.forEach(function(n){e.drawLine(H[n.start],H[n.end])})},this.setOwnership=function(n,t){Array.from(e.svg.getElementsByClassName(n)).forEach(function(e){e.classList.remove("England","France","Germany","Austria","Russia","Italy","Turkey"),e.classList.add(t)})}}}()),Y=(W=function(e,n){return(W=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}W(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),J=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return Y(n,e),n.prototype.render=function(e,n){return s("div",{className:"map"},s("img",{class:"bg",src:"./assets/paperTexture.jpg"}),s("object",{id:"mainMap",type:"image/svg+xml",data:"assets/Diplomacy.svg",class:"europeMap",onLoad:this.runGame},"There should be a diplomacy map here..."))},n.prototype.runGame=function(){var e=document.getElementById("mainMap").contentDocument.getElementById("mapSvg");X.setup(e),X.run()},n}(R),$=function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),Q=function(e,n,t,r){return new(t||(t=Promise))(function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function s(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(i,s)}u((r=r.apply(e,n||[])).next())})},Z=function(e,n){var t,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(e,i)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},ee=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.logIn=function(){return Q(n,void 0,void 0,function(){var e,n,t;return Z(this,function(r){switch(r.label){case 0:return[4,j(D.a.post("/user/authenticate",{username:"john",password:"johnspassword"}))];case 1:return e=r.sent(),n=e[0],t=e[1],console.log("------------------------"),console.log(n),console.log(t),[2]}})})},n.test=function(){return Q(n,void 0,void 0,function(){var e,n,t;return Z(this,function(r){switch(r.label){case 0:return[4,j(D.a.get("/test",{withCredentials:!0}))];case 1:return e=r.sent(),n=e[0],t=e[1],console.log(n),console.log(t),[2]}})})},n}return $(n,e),n.prototype.render=function(e,n){return s("div",null,s("button",{value:"log in",onClick:this.logIn},"Log in"),s("button",{value:"authenticate",onClick:this.test},"Am I logged in?"),s("form",{action:"/user/register",method:"post"},"Username:",s("br",null),s("input",{type:"text",name:"username"}),s("br",null),"Name:",s("br",null),s("input",{type:"text",name:"name"}),s("br",null),"Email:",s("br",null),s("input",{type:"text",name:"email"}),s("br",null),"Password:",s("br",null),s("input",{type:"text",name:"password"}),s("br",null),s("input",{type:"submit",value:"Submit"})),s("form",{action:"/user/authenticate",method:"post"},"Username:",s("br",null),s("input",{type:"text",name:"username"}),s("br",null),"Password:",s("br",null),s("input",{type:"text",name:"password"}),s("br",null),s("input",{type:"submit",value:"Submit"})))},n}(R),ne=function(){var e=function(n,t){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(n,t)};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),te=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return ne(n,e),n.prototype.render=function(e,n){return s("div",null,n.isLoggedIn?s(J,null):s(ee,null))},n}(R);U(s(te,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,