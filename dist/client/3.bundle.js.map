{"version":3,"sources":["webpack:///./src/client/app/components/formBox/styled.ts","webpack:///./src/client/app/components/formBox/formBox.tsx","webpack:///./src/client/app/pages/login/styled.ts","webpack:///./src/client/app/pages/login/login.tsx"],"names":["FormBox","div","highlight","offwhite","shadow","children","Title","h1","state","formFields","login","evt","preventDefault","console","log","this","a","post","err","res","data","props","toggleLogIn","handleChange","field","event","target","value","setState","componentDidMount","username","usernameInput","password","passwordInput","render","action","method","onSubmit","ref","type","name","onChange","href"],"mappings":"qNAGaA,EAAU,IAAOC,IAAG,04BAQM,eACZ,uDAEe,0OAWb,cAdP,IAAQC,UACnB,IAAQC,SAES,IAAQC,OAWvB,IAAQD,UCfN,IANW,SAAC,G,IAACE,EAAA,EAAAA,SAAc,OACxC,WADwC,CACvC,EAAc,KACZA,K,+MCFQC,E,KAAQ,EAAOC,GAAE,yB,ioDCkB9B,yE,OACE,EAAAC,MAAqB,CAAEC,WAAY,IAgCnC,EAAAC,MAAQ,SAAOC,GAAU,qC,4DAIJ,OAHnBA,EAAIC,iBACJC,QAAQC,IAAI,wBACZD,QAAQC,IAAIC,KAAKP,MAAMC,YACJ,GAAM,YAAG,EAAAO,EAAMC,KAAK,YAAaF,KAAKP,MAAMC,c,cAAzD,EAAa,SAAZS,EAAG,KAAEC,EAAG,KACXD,IACFL,QAAQC,IAAI,kBACZD,QAAQC,IAAII,IAEVC,GACFN,QAAQC,IAAI,YACZD,QAAQC,IAAIK,EAAIC,MAChB,GAAML,KAAKM,MAAMC,aAAY,KAH3B,M,OAGF,SACA,YAAM,S,mCAIV,EAAAC,aAAe,SAACC,GACd,OAAO,SAACC,GACN,IAAMhB,EAAa,IAAM,EAAKD,MAAMC,YACpCA,EAAWe,GAAUC,EAAMC,OAA4BC,MACvD,EAAKC,SAAS,CAACnB,WAAU,M,EAG/B,OAzDmC,OAKjC,YAAAoB,kBAAA,WACEd,KAAKa,SAAS,CACZnB,WAAY,CACVqB,SAAUf,KAAKgB,cAAcJ,MAC7BK,SAAUjB,KAAKkB,cAAcN,UAKnC,YAAAO,OAAA,SAAOb,EAAoBb,GAA3B,WACE,OACE,WADK,CACJ,IAAQ,KACP,YAAC,EAAY,kBAAyB,uBACtC,YAAC,IAAO,KAEJ,oBAAM2B,OAAO,wBAAwBC,OAAO,OAAOC,SAAUtB,KAAKL,O,WACxD,uBACR,qBAAO4B,IAAK,SAAAP,GAAiB,SAAKA,cAAgBA,GAAeQ,KAAK,OAAOC,KAAK,WAAWC,SAAU1B,KAAKQ,aAAa,cAAc,uB,WAC/H,uBACR,qBAAOe,IAAK,SAAAL,GAAiB,SAAKA,cAAgBA,GAAeM,KAAK,WAAWC,KAAK,WAAWC,SAAU1B,KAAKQ,aAAa,cAAc,uBAC3I,qBAAOgB,KAAK,SAASZ,MAAM,YAE7B,qB,iBAAiB,YAAC,IAAI,CAACe,KAAK,aAAW,YA8BnD,EAzDA,CAAmC,K","file":"3.bundle.js","sourcesContent":["import styled from 'styled-components'\nimport Colours from '../../variables/colors'\n\nexport const FormBox = styled.div`\n  @import url('https://fonts.googleapis.com/css?family=Notable|Arvo&display=swap');\n\n  font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  text-align: center;\n  font-size: 16px;\n  border-radius: 20px;\n  padding: 24px;\n  background-color: ${Colours.highlight};\n  color: ${Colours.offwhite};\n  letter-spacing:2px;\n  box-shadow: 5px 5px 0px ${Colours.shadow};\n  margin: auto;\n\n  input[type=submit] {\n    width: 50%;\n    font-size: 12px;\n    font-family: 'Notable', 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    letter-spacing: 1px;\n  }\n\n  a {\n    color: ${Colours.offwhite};\n  }\n`\n","import { h } from 'preact'\n\nimport * as Styled from './styled'\n\nconst FormBox: React.FC = ({children}) => (\n  <Styled.FormBox>\n    {children}\n  </Styled.FormBox>\n)\n\nexport default FormBox","import styled from 'styled-components'\n\n// import Colours from '../../variables/colors'\n\nexport const Title = styled.h1`\n`\n","import {Component, h, Fragment} from 'preact'\n\nimport to from 'await-to-js'\nimport axios from 'axios'\nimport clone from 'lodash.clone'\nimport { Link, route } from 'preact-router'\n\nimport FormBox from '../../components/formBox/formBox'\n\nimport * as Styled from './styled'\n\nexport interface ILoginProps {\n  toggleLogIn: (arg: boolean) => void\n}\n\ninterface ILoginState {\n  formFields?: {\n    username?: string,\n    password?: string,\n  }\n}\n\nexport default class Login extends Component <ILoginProps, ILoginState> {\n  state: ILoginState = { formFields: {} }\n  usernameInput: HTMLInputElement\n  passwordInput: HTMLInputElement\n\n  componentDidMount () {\n    this.setState({\n      formFields: {\n        username: this.usernameInput.value,\n        password: this.passwordInput.value,\n      }\n    })\n  }\n\n  render(props: ILoginProps, state: ILoginState) {\n    return (\n      <Fragment>\n        <Styled.Title>Diplomacy</Styled.Title><br/>\n        <FormBox>\n            {/* <button onClick={() => {route('/game', true)}}> Game </button> */}\n            <form action='api/user/authenticate' method='post' onSubmit={this.login}>\n              Username<br/>\n              <input ref={usernameInput => this.usernameInput = usernameInput} type='text' name='username' onChange={this.handleChange('username')}/><br/>\n              Password<br/>\n              <input ref={passwordInput => this.passwordInput = passwordInput} type='password' name='password' onChange={this.handleChange('password')}/><br/>\n              <input type='submit' value='Submit'/>\n            </form>\n            <p>New? Register <Link href='/register'>here</Link></p>\n        </FormBox>\n      </Fragment>\n    )\n  }\n\n  login = async (evt: Event) => {\n    evt.preventDefault()\n    console.log('attempting to log in')\n    console.log(this.state.formFields)\n    const [err, res] = await to(axios.post('api/login', this.state.formFields))\n    if (err) {\n      console.log('logging an err')\n      console.log(err)\n    }\n    if (res) {\n      console.log('success!')\n      console.log(res.data)\n      await this.props.toggleLogIn(true)\n      route('/game')\n    }\n  }\n\n  handleChange = (field: 'username' | 'password') => {\n    return (event: Event) => {\n      const formFields = clone(this.state.formFields)\n      formFields[field] = (event.target as HTMLInputElement).value\n      this.setState({formFields})\n    }\n  }\n}\n"],"sourceRoot":""}